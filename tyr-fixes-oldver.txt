diff --git a/Rheda/src/controllers/MultieventMainpage.php b/Rheda/src/controllers/MultieventMainpage.php
index 1dc9dc9..09c6c86 100644
--- a/Rheda/src/controllers/MultieventMainpage.php
+++ b/Rheda/src/controllers/MultieventMainpage.php
@@ -40,7 +40,7 @@ class MultieventMainpage extends Controller
 
         return [
             'events' => array_map(function($event) {
-                $ellipsis = mb_strlen($event['description']) > 50 ? '...' : '';
+                $ellipsis = \mb_strlen($event['description']) > 50 ? '...' : '';
                 $event['description'] = mb_substr($event['description'], 0, 50) . $ellipsis;
                 return $event;
             }, $data['events']),
diff --git a/Tyr/src/app/app.component.html b/Tyr/src/app/app.component.html
index ce0b95e..8ea08e5 100644
--- a/Tyr/src/app/app.component.html
+++ b/Tyr/src/app/app.component.html
@@ -91,5 +91,13 @@
       *ngIf="state.currentScreen() === 'settings'"
       [state]="state"
     ></screen-settings>
+    <screen-greeting
+      *ngIf="state.currentScreen() === 'greeting'"
+      [state]="state"
+    ></screen-greeting>
+    <screen-events
+      *ngIf="state.currentScreen() === 'events'"
+      [state]="state"
+    ></screen-events>
   </div>
 </div>
diff --git a/Tyr/src/app/app.module.ts b/Tyr/src/app/app.module.ts
index fb1a20f..dfb2d7c 100644
--- a/Tyr/src/app/app.module.ts
+++ b/Tyr/src/app/app.module.ts
@@ -37,6 +37,8 @@ import { LoginScreen } from './components/screen-login';
 import { OtherTablesListScreen } from './components/screen-other-tables-list';
 import { OtherTableScreen } from './components/screen-other-table';
 import { SettingsScreen } from './components/screen-settings';
+import { GreetingScreen } from './components/screen-greeting';
+import { EventsScreen } from './components/screen-events';
 
 import { UserItemComponent } from './components/element-user-item';
 import { YakuItemButtonComponent } from './components/element-yaku-item-button';
@@ -77,6 +79,8 @@ import { classicLightTheme } from './themes/classicLight';
     LoginScreen,
     OtherTableScreen,
     SettingsScreen,
+    GreetingScreen,
+    EventsScreen,
 
     UserItemComponent,
     YakuItemButtonComponent,
diff --git a/Tyr/src/app/components/auxiliary-i18n/index.ts b/Tyr/src/app/components/auxiliary-i18n/index.ts
index 259d7ba..f74cb01 100644
--- a/Tyr/src/app/components/auxiliary-i18n/index.ts
+++ b/Tyr/src/app/components/auxiliary-i18n/index.ts
@@ -129,6 +129,9 @@ export class I18nComponent {
   get _USER_ACTIONS() {
     return this.i18n._t('User actions');
   }
+  get _GREETING() {
+    return this.i18n._t('Hello, unauthorized user!');
+  }
   get _TOTAL() {
     return this.i18n._t('Total: ');
   }
diff --git a/Tyr/src/app/components/navbar/template.html b/Tyr/src/app/components/navbar/template.html
index ef4060e..c8173d4 100644
--- a/Tyr/src/app/components/navbar/template.html
+++ b/Tyr/src/app/components/navbar/template.html
@@ -20,13 +20,13 @@
 <!-- Navbar for non-start-screens -->
 <button
   class="back-button gradient-button"
-  *ngIf="!isScreen('overview')"
+  *ngIf="!isScreen('overview', 'greeting')"
   [disabled]="isScreen('lastResults', 'login')"
   (click)="prevScreen()"
 ><custom-icon [type]="'previous'"></custom-icon></button>
 <button
   class="back-button gradient-button"
-  *ngIf="isScreen('overview')"
+  *ngIf="isScreen('overview', 'greeting')"
   (click)="openSettings()"
 ><custom-icon [type]="'settings'"></custom-icon></button>
 <!-- Navbar for yaku select screen -->
diff --git a/Tyr/src/app/components/screen-events/index.ts b/Tyr/src/app/components/screen-events/index.ts
new file mode 100755
index 0000000..c576cbc
--- /dev/null
+++ b/Tyr/src/app/components/screen-events/index.ts
@@ -0,0 +1,46 @@
+/*
+ * Tyr - Allows online game recording in japanese (riichi) mahjong sessions
+ * Copyright (C) 2016 Oleg Klimenko aka ctizen <me@ctizen.net>
+ *
+ * This file is part of Tyr.
+ *
+ * Tyr is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Tyr is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Tyr.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+import { Component, Input } from '@angular/core';
+import { AppState } from '../../primitives/appstate';
+import { I18nComponent, I18nService } from '../auxiliary-i18n';
+import { MetrikaService } from '../../services/metrika';
+import { RiichiApiService } from '../../services/riichiApi';
+
+@Component({
+  selector: 'screen-events',
+  templateUrl: './template.html',
+  styleUrls: ['./style.css']
+})
+export class EventsScreen extends I18nComponent {
+  @Input() state: AppState;
+  private events: any[];
+
+  constructor(
+    public i18n: I18nService,
+    private metrika: MetrikaService,
+    private api: RiichiApiService
+  ) { super(i18n); }
+
+  ngOnInit() {
+    this.metrika.track(MetrikaService.SCREEN_ENTER, { screen: 'screen-events' });
+    this.api.getMyEvents().then((eventsArray) => {this.events = eventsArray});
+  }
+}
\ No newline at end of file
diff --git a/Tyr/src/app/components/screen-events/style.css b/Tyr/src/app/components/screen-events/style.css
new file mode 100755
index 0000000..4a98f07
--- /dev/null
+++ b/Tyr/src/app/components/screen-events/style.css
@@ -0,0 +1,16 @@
+.greeting-container {
+  display: flex;
+  flex-direction: column;
+  padding: 4px;
+  color: #ccc;
+}
+
+.greeting-container .label {
+  flex: 1;
+  margin-top: 10px;
+  padding-bottom: 2px;
+  margin-bottom: 4px;
+  border-bottom: 1px solid #999;
+  text-align: center;
+  padding-right: 10px;
+}
diff --git a/Tyr/src/app/components/screen-events/template.html b/Tyr/src/app/components/screen-events/template.html
new file mode 100755
index 0000000..078005f
--- /dev/null
+++ b/Tyr/src/app/components/screen-events/template.html
@@ -0,0 +1,5 @@
+<div class="events-container">
+  <div   *ngFor="let event of events">
+    {{event.name}}    
+  </div>
+</div>
\ No newline at end of file
diff --git a/Tyr/src/app/components/screen-greeting/index.ts b/Tyr/src/app/components/screen-greeting/index.ts
new file mode 100755
index 0000000..f95ed24
--- /dev/null
+++ b/Tyr/src/app/components/screen-greeting/index.ts
@@ -0,0 +1,47 @@
+/*
+ * Tyr - Allows online game recording in japanese (riichi) mahjong sessions
+ * Copyright (C) 2016 Oleg Klimenko aka ctizen <me@ctizen.net>
+ *
+ * This file is part of Tyr.
+ *
+ * Tyr is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Tyr is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Tyr.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+import { Component, Input } from '@angular/core';
+import { AppState } from '../../primitives/appstate';
+import { I18nComponent, I18nService } from '../auxiliary-i18n';
+import { MetrikaService } from '../../services/metrika';
+import { environment } from '../../../environments/environment';
+
+@Component({
+  selector: 'screen-greeting',
+  templateUrl: './template.html',
+  styleUrls: ['./style.css']
+})
+export class GreetingScreen extends I18nComponent {
+  @Input() state: AppState;
+
+  constructor(
+    public i18n: I18nService,
+    private metrika: MetrikaService    
+  ) { super(i18n); }
+
+  ngOnInit() {
+    this.metrika.track(MetrikaService.SCREEN_ENTER, { screen: 'screen-greeting' });
+  }
+  
+  login() {
+    window.location.href = `${environment.rhedaUrl}login/`;
+  }
+}
\ No newline at end of file
diff --git a/Tyr/src/app/components/screen-greeting/style.css b/Tyr/src/app/components/screen-greeting/style.css
new file mode 100755
index 0000000..675947f
--- /dev/null
+++ b/Tyr/src/app/components/screen-greeting/style.css
@@ -0,0 +1,35 @@
+.greeting-container {
+  display: flex;
+  flex-direction: column;
+  padding: 4px;
+  color: #ccc;
+}
+
+.greeting-container .label {
+  flex: 1;
+  margin-top: 10px;
+  padding-bottom: 2px;
+  margin-bottom: 4px;
+  border-bottom: 1px solid #999;
+  text-align: center;
+  padding-right: 10px;
+}
+
+.greeting-container .buttons {
+  flex: 1;
+  display: flex;
+  flex-direction: row;
+}
+
+.greeting-container .buttons button {
+  background-color: #ccc;
+  font-size: 20px;
+  padding: 10px 5px;
+  border: outset 3px;
+  outline: none;
+  flex: 1;
+  display: flex;
+  justify-content: center;
+}
+
+
diff --git a/Tyr/src/app/components/screen-greeting/template.html b/Tyr/src/app/components/screen-greeting/template.html
new file mode 100755
index 0000000..9dfa685
--- /dev/null
+++ b/Tyr/src/app/components/screen-greeting/template.html
@@ -0,0 +1,6 @@
+<div class="greeting-container">
+  <div class="label">{{_GREETING}}</div>
+  <div class="buttons">
+    <button (click)="login()">{{_LOGIN}}</button>
+  </div>
+</div>
diff --git a/Tyr/src/app/components/screen-new-game/index.ts b/Tyr/src/app/components/screen-new-game/index.ts
index 79c3449..9b5773d 100644
--- a/Tyr/src/app/components/screen-new-game/index.ts
+++ b/Tyr/src/app/components/screen-new-game/index.ts
@@ -32,8 +32,6 @@ const defaultPlayer: LUser = {
   displayName: '--- ? ---',
   id: DEFAULT_ID,
   tenhouId: null,
-  ident: null,
-  alias: null
 };
 
 @Component({
diff --git a/Tyr/src/app/components/screen-settings/index.ts b/Tyr/src/app/components/screen-settings/index.ts
index bdbb77b..c16f549 100644
--- a/Tyr/src/app/components/screen-settings/index.ts
+++ b/Tyr/src/app/components/screen-settings/index.ts
@@ -70,6 +70,19 @@ export class SettingsScreen extends I18nComponent {
     }
   }
 
+  getButtonName() {
+    const eventName = this.state.getGameConfig('eventName');
+    if (eventName) {
+      return this.i18n._t('Current event: %1', [eventName]);
+    } else {
+      return this.i18n._t('No event selected');
+    }
+  }
+
+  openEventSelector() {
+    this.state.showEventsSelector();
+  }
+
   logout() {
     if (window.confirm(this.i18n._t("Are you sure you want to logout? You will have to get a new pin code to login again"))) {
       this.metrika.track(MetrikaService.LOGOUT, { screen: 'screen-settings' });
diff --git a/Tyr/src/app/components/screen-settings/style.css b/Tyr/src/app/components/screen-settings/style.css
index aa31622..62b95fe 100644
--- a/Tyr/src/app/components/screen-settings/style.css
+++ b/Tyr/src/app/components/screen-settings/style.css
@@ -36,6 +36,10 @@
   margin: 0 var(--margin-size);
 }
 
+.settings-container .buttons button:active {
+  border: inset 3px;
+}
+
 .settings-container .buttons button > * {
   flex: 1;
 }
diff --git a/Tyr/src/app/components/screen-settings/template.html b/Tyr/src/app/components/screen-settings/template.html
index cf819d5..b2ac0cb 100644
--- a/Tyr/src/app/components/screen-settings/template.html
+++ b/Tyr/src/app/components/screen-settings/template.html
@@ -20,6 +20,9 @@
     </ng-template>
   </div>
   <div class="label">{{_USER_ACTIONS}}</div>
+  <div class="buttons">
+    <button (click)="openEventSelector()">{{getButtonName()}}</button>
+  </div>
   <div class="buttons">
     <button (click)="logout()">{{_LOGOUT}}</button>
   </div>
diff --git a/Tyr/src/app/interfaces/common.ts b/Tyr/src/app/interfaces/common.ts
index 52e3f6a..7c35e66 100644
--- a/Tyr/src/app/interfaces/common.ts
+++ b/Tyr/src/app/interfaces/common.ts
@@ -35,7 +35,6 @@ export interface Yaku {
 
 export interface Player {
   id: number;
-  alias: string;
   displayName: string;
   score: number;
   penalties: number;
diff --git a/Tyr/src/app/interfaces/local.ts b/Tyr/src/app/interfaces/local.ts
index 9110134..f53352c 100644
--- a/Tyr/src/app/interfaces/local.ts
+++ b/Tyr/src/app/interfaces/local.ts
@@ -31,9 +31,7 @@ export type LCurrentGame = {
 export type LUser = {
   id: number;
   displayName: string;
-  ident: string;
   tenhouId: string;
-  alias: string;
 }
 
 export type LUserWithScore = LUser & {
diff --git a/Tyr/src/app/interfaces/remote.ts b/Tyr/src/app/interfaces/remote.ts
index fd429b5..4df2f7b 100644
--- a/Tyr/src/app/interfaces/remote.ts
+++ b/Tyr/src/app/interfaces/remote.ts
@@ -179,13 +179,15 @@ export type RTablesState = {
   }>;
 }[]
 
-// for getPlayer
+// for getPersonalInfo
 export interface RUserInfo {
   id: number;
-  alias: string;
-  ident: string;
-  display_name: string;
+  city: string;
+  email: string | null;
+  phone: string | null;
   tenhou_id: string;
+  groups : number[];
+  title: string;
 }
 
 // for current games info
diff --git a/Tyr/src/app/primitives/appstate/index.ts b/Tyr/src/app/primitives/appstate/index.ts
index be6887e..cac3e65 100644
--- a/Tyr/src/app/primitives/appstate/index.ts
+++ b/Tyr/src/app/primitives/appstate/index.ts
@@ -29,7 +29,7 @@ import { RSessionOverview, RRoundPaymentsInfo } from '../../interfaces/remote';
 const crc32 = require('crc/crc32').default;
 
 export type AppScreen = 'overview' | 'outcomeSelect' | 'playersSelect' | 'otherTable' | 'otherTablesList'
-  | 'yakuSelect' | 'confirmation' | 'newGame' | 'lastResults' | 'lastRound' | 'login' | 'paoSelect' | 'settings' | 'nagashiSelect';
+  | 'yakuSelect' | 'confirmation' | 'newGame' | 'lastResults' | 'lastRound' | 'login' | 'paoSelect' | 'settings' | 'nagashiSelect' | 'greeting' | 'events';
 export type LoadingSet = {
   games: boolean,
   overview: boolean,
@@ -87,7 +87,7 @@ export class AppState {
 
   // preloaders flags
   private _loading: LoadingSet = {
-    games: true,
+    games: false,
     overview: false,
     otherTables: false,
     otherTable: false,
@@ -183,21 +183,34 @@ export class AppState {
   }
 
   reinit() {
-    this.api.setCredentials(this.storage.get('authToken'));
-    this._isLoggedIn = !!this.storage.get('authToken');
+    this._isLoggedIn = !!this.storage.get('authToken') && !!this.storage.get('currentPersonId');
     if (!this._isLoggedIn) {
-      this._currentScreen = 'login';
+      this._currentScreen = 'greeting';
     } else {
       this._currentScreen = 'overview';
+      this.updateCurrentPlayer();
+      if (!!this.storage.get('currentEventId')) {
         this.updateCurrentGames();
       }
     }
+  }
 
   logout() {
     this.storage.delete(['authToken']);
     this.reinit();
   }
 
+  updateCurrentPlayer() {
+    const promise: Promise<LUser> = this.api.getUserInfo(this.storage.get('currentPersonId'));
+
+    promise.then((playerInfo) => {
+      this._currentPlayerDisplayName = playerInfo.displayName;
+      this._currentPlayerId = playerInfo.id;
+
+      this.metrika.setUserId(playerInfo.id);
+    });
+  }
+
   updateCurrentGames() {
     if (this.isUniversalWatcher()) {
       this._loading.games = false;
@@ -210,21 +223,17 @@ export class AppState {
 
     this._loading.games = true;
     // TODO: automate promises creation from mixins
-    const promises: [Promise<LCurrentGame[]>, Promise<LUser>, Promise<LGameConfig>, Promise<LTimerState>] = [
+    const promises: [Promise<LCurrentGame[]>, Promise<LGameConfig>, Promise<LTimerState>] = [
       this.api.getCurrentGames(),
-      this.api.getUserInfo(),
       this.api.getGameConfig(),
       this.api.getTimerState()
     ];
 
-    Promise.all(promises).then(([games, playerInfo, gameConfig, timerState]) => {
-      this._currentPlayerDisplayName = playerInfo.displayName;
-      this._currentPlayerId = playerInfo.id;
+    Promise.all(promises).then(([games, gameConfig, timerState]) => {
       this._gameConfig = gameConfig;
       initYaku(this._gameConfig.withMultiYakumans);
 
       this.metrika.track(MetrikaService.CONFIG_RECEIVED);
-      this.metrika.setUserId(playerInfo.id);
 
       if (games.length > 0) {
         // TODO: what if games > 1 ? Now it takes first one
@@ -343,6 +352,15 @@ export class AppState {
     }
   }
 
+  showEventsSelector() {
+    switch (this._currentScreen) {
+      case 'settings':
+        this._currentScreen = 'events';
+        break;
+      default: ;
+    }
+  }
+
   showLastRound() {
     switch (this._currentScreen) {
       case 'overview':
@@ -374,6 +392,7 @@ export class AppState {
 
   openSettings() {
     switch (this._currentScreen) {
+      case 'greeting':
       case 'overview':
         this._currentScreen = 'settings';
         break;
@@ -453,7 +472,12 @@ export class AppState {
       case 'otherTablesList':
       case 'settings':
       case 'newGame':
+        if (this._isLoggedIn) {
           this._currentScreen = 'overview';
+        }
+        else {
+          this._currentScreen = 'greeting';
+        }
         break;
       case 'playersSelect':
         if (this._currentOutcome.selectedOutcome === 'nagashi') {
diff --git a/Tyr/src/app/services/formatters.ts b/Tyr/src/app/services/formatters.ts
index 90fbcec..38a2699 100644
--- a/Tyr/src/app/services/formatters.ts
+++ b/Tyr/src/app/services/formatters.ts
@@ -41,13 +41,12 @@ export function timerFormatter(timer: RTimerState): LTimerState {
   };
 }
 
-export function userInfoFormatter(user: RUserInfo): LUser {
+export function userInfoFormatter(users: RUserInfo[]): LUser {
+  const user = users[0];
   return {
     id: parseInt(user.id.toString(), 10),
-    displayName: user.display_name,
-    alias: user.alias,
+    displayName: user.title,
     tenhouId: user.tenhou_id,
-    ident: user.ident
   };
 }
 
@@ -120,7 +119,6 @@ export function gameConfigFormatter(config: RGameConfig): LGameConfig {
 export function currentGamesFormatter(games: RCurrentGames): LCurrentGame[] {
   const formatPlayer = (player): Player => ({
     id: parseInt(player.id, 10),
-    alias: player.alias,
     displayName: player.display_name,
     score: player.score,
     penalties: 0, // TODO?
diff --git a/Tyr/src/app/services/idb/cookiestorageImpl.ts b/Tyr/src/app/services/idb/cookiestorageImpl.ts
index 0aa3e6e..ca4b1b9 100644
--- a/Tyr/src/app/services/idb/cookiestorageImpl.ts
+++ b/Tyr/src/app/services/idb/cookiestorageImpl.ts
@@ -2,12 +2,10 @@ import { IDBImpl } from './interface';
 
 // Cookie driver
 export class IDBCookieImpl implements IDBImpl {
-  private keyPrefix: string;
   private cookieDomain: string;
   private meta: { [key: string]: any } = {};
 
-  constructor(keyPrefix: string, cookieDomain: string) {
-    this.keyPrefix = keyPrefix + '.';
+  constructor(cookieDomain: string) {
     this.cookieDomain = cookieDomain;
     this.meta = this.get('__meta');
     if (this.meta === null) {
@@ -19,14 +17,14 @@ export class IDBCookieImpl implements IDBImpl {
   public get(key: string): any|null {
     let result = new RegExp(
       '(?:^|; )' +
-      encodeURIComponent(this.keyPrefix + key) +
+      encodeURIComponent(key) +
       '=([^;]*)'
     ).exec(document.cookie);
 
     try {
       return result ? JSON.parse(result[1]) : null;
     } catch (e) {
-      return null;
+      return result[1];
     }
   }
 
@@ -35,7 +33,7 @@ export class IDBCookieImpl implements IDBImpl {
     date.setTime(date.getTime() + (365 * 24 * 60 * 60 * 1000));
     let expires = ';expires=' + date.toUTCString();
     let domain = this.cookieDomain ? ';domain=.' + this.cookieDomain : '';
-    document.cookie = this.keyPrefix + key + '=' + JSON.stringify(value) + expires + domain + '; path=/';
+    document.cookie = key + '=' + JSON.stringify(value) + expires + domain + '; path=/';
     if (key !== '__meta') {
       this.meta[key] = true;
       this.updateMeta();
@@ -50,7 +48,7 @@ export class IDBCookieImpl implements IDBImpl {
     let domain = this.cookieDomain ? ';domain=.' + this.cookieDomain : '';
 
     keys.forEach((key: string) => {
-      document.cookie = this.keyPrefix + key + '=' + expires + domain + '; path=/';
+      document.cookie = key + '=' + expires + domain + '; path=/';
       delete this.meta[key];
     });
     this.updateMeta();
diff --git a/Tyr/src/app/services/idb/index.ts b/Tyr/src/app/services/idb/index.ts
index f9b6c01..05bd491 100644
--- a/Tyr/src/app/services/idb/index.ts
+++ b/Tyr/src/app/services/idb/index.ts
@@ -23,7 +23,7 @@ export class IDB implements IDBImpl {
 
   constructor(private metrika: MetrikaService) {
     // Assume we always have at least cookies.
-    this.cookieEngine = new IDBCookieImpl(environment.keyPrefix, environment.cookieDomain);
+    this.cookieEngine = new IDBCookieImpl(environment.cookieDomain);
     this.activeStorages.push(this.cookieEngine);
 
     try { // check is local storage is sane
@@ -33,7 +33,7 @@ export class IDB implements IDBImpl {
         throw new Error();
       }
       localStorage.removeItem('testStorageItem');
-      this.storageEngine = new IDBStorageImpl(environment.keyPrefix);
+      this.storageEngine = new IDBStorageImpl();
       this.activeStorages.push(this.storageEngine);
 
       this.migrate();
diff --git a/Tyr/src/app/services/idb/localstorageImpl.ts b/Tyr/src/app/services/idb/localstorageImpl.ts
index 394b0d7..ac7222b 100644
--- a/Tyr/src/app/services/idb/localstorageImpl.ts
+++ b/Tyr/src/app/services/idb/localstorageImpl.ts
@@ -2,11 +2,9 @@ import { IDBImpl } from './interface';
 
 // LocalStorage driver
 export class IDBStorageImpl implements IDBImpl {
-  private prefix: string;
   private meta: { [key: string]: any } = {};
 
-  constructor(keyPrefix: string) {
-    this.prefix = keyPrefix + '.';
+  constructor() {
     this.meta = this.get('__meta');
     if (this.meta === null) {
       this.meta = {};
@@ -16,7 +14,7 @@ export class IDBStorageImpl implements IDBImpl {
 
   public get(key: string): any|null {
     try {
-      let v = localStorage.getItem(this.prefix + key);
+      let v = localStorage.getItem(key);
       if (v === null) { // tslint:disable-line no-null-keyword
         throw new Error();
       }
@@ -30,7 +28,7 @@ export class IDBStorageImpl implements IDBImpl {
     try {
       let v = JSON.stringify(value);
       this.meta[key] = true;
-      localStorage.setItem(this.prefix + key, v);
+      localStorage.setItem(key, v);
       if (key !== '__meta') {
         this.updateMeta();
       }
@@ -43,7 +41,7 @@ export class IDBStorageImpl implements IDBImpl {
   public delete(keys: string[]): void {
     for (let key of keys) {
       delete this.meta[key];
-      localStorage.removeItem(this.prefix + key);
+      localStorage.removeItem(key);
     }
     this.updateMeta();
   }
@@ -51,7 +49,7 @@ export class IDBStorageImpl implements IDBImpl {
   public clear(): void {
     for (let k in this.meta) {
       if (this.meta.hasOwnProperty(k)) {
-        localStorage.removeItem(this.prefix + k);
+        localStorage.removeItem(k);
       }
     }
     this.meta = {};
diff --git a/Tyr/src/app/services/riichiApi.ts b/Tyr/src/app/services/riichiApi.ts
index 1f14058..b0cc60c 100644
--- a/Tyr/src/app/services/riichiApi.ts
+++ b/Tyr/src/app/services/riichiApi.ts
@@ -50,6 +50,7 @@ import {
 import { AppState } from '../primitives/appstate';
 import config from '../config';
 import { environment } from '../../environments/environment';
+import { promise } from 'selenium-webdriver';
 
 type GenericResponse = {
   error?: { message: string, code: any },
@@ -69,75 +70,88 @@ export class RiichiApiService {
 
   // returns game hashcode
   startGame(playerIds: number[]) {
-    return this._jsonRpcRequest<string>('startGameT', playerIds);
+    return this._jsonRpcRequest<string>('startGameT', environment.apiUrl, playerIds);
   }
 
   getGameConfig() {
-    return this._jsonRpcRequest<RGameConfig>('getGameConfigT')
+    return this._jsonRpcRequest<RGameConfig>('getGameConfigT', environment.apiUrl)
       .then<LGameConfig>(gameConfigFormatter);
   }
 
   getTimerState() {
-    return this._jsonRpcRequest<RTimerState>('getTimerStateT')
+    return this._jsonRpcRequest<RTimerState>('getTimerStateT', environment.apiUrl)
       .then<LTimerState>(timerFormatter);
   }
 
   getLastResults() {
-    return this._jsonRpcRequest<RLastResults>('getLastResultsT')
+    return this._jsonRpcRequest<RLastResults>('getLastResultsT', environment.apiUrl)
       .then<LUserWithScore[]>(lastResultsFormatter);
   }
 
   getAllPlayers() {
-    return this._jsonRpcRequest<RAllPlayersInEvent>('getAllPlayersT')
+    return this._jsonRpcRequest<RAllPlayersInEvent>('getAllPlayersT', environment.apiUrl)
       .then<LUser[]>(userListFormatter);
   }
 
   getGameOverview(sessionHashcode: string) {
-    return this._jsonRpcRequest<RSessionOverview>('getGameOverview', sessionHashcode);
+    return this._jsonRpcRequest<RSessionOverview>('getGameOverview', environment.apiUrl, sessionHashcode);
   }
 
   getCurrentGames(): Promise<LCurrentGame[]> {
-    return this._jsonRpcRequest<RCurrentGames>('getCurrentGamesT')
+    return this._jsonRpcRequest<RCurrentGames>('getCurrentGamesT', environment.apiUrl)
       .then<LCurrentGame[]>(currentGamesFormatter);
   }
 
-  getUserInfo() {
-    return this._jsonRpcRequest<RUserInfo>('getPlayerT')
+  getUserInfo(personIds: number) {
+    return this._jsonRpcRequest<RUserInfo[]>('getPersonalInfo', environment.freyUrl, [personIds])
       .then<LUser>(userInfoFormatter);
   }
 
   confirmRegistration(pin: string) {
-    return this._jsonRpcRequest<string>('registerPlayer', pin);
+    return this._jsonRpcRequest<string>('registerPlayer', environment.apiUrl, pin);
   }
 
   getChangesOverview(state: AppState) {
     const gameHashcode: string = state.getHashcode();
     const roundData = formatRoundToRemote(state);
-    return this._jsonRpcRequest<RRoundPaymentsInfo>('addRound', gameHashcode, roundData, true);
+    return this._jsonRpcRequest<RRoundPaymentsInfo>('addRound', environment.apiUrl, gameHashcode, roundData, true);
   }
 
   getLastRound(sessionHashcode?: string) {
     if (!sessionHashcode) {
-      return this._jsonRpcRequest<RRoundPaymentsInfo>('getLastRoundT');
+      return this._jsonRpcRequest<RRoundPaymentsInfo>('getLastRoundT', environment.apiUrl);
     } else {
-      return this._jsonRpcRequest<RRoundPaymentsInfo>('getLastRoundByHash', sessionHashcode);
+      return this._jsonRpcRequest<RRoundPaymentsInfo>('getLastRoundByHash', environment.apiUrl, sessionHashcode);
     }
   }
 
   addRound(state: AppState) {
     const gameHashcode: string = state.getHashcode();
     const roundData = formatRoundToRemote(state);
-    return this._jsonRpcRequest<boolean>('addRound', gameHashcode, roundData, false);
+    return this._jsonRpcRequest<boolean>('addRound', environment.apiUrl, gameHashcode, roundData, false);
   }
 
   getTablesState() {
-    return this._jsonRpcRequest<RTablesState>('getTablesStateT')
+    return this._jsonRpcRequest<RTablesState>('getTablesStateT', environment.apiUrl)
       .then<Table[]>(tablesStateFormatter);
   }
 
+  getMyEvents() {
+    return Promise.resolve([
+      {
+        'id': 1,
+        'name': 'Spb 2019'
+      },
+      {
+        'id': 2,
+        'name': 'Msk 2020'
+      }
+    ]);
+  }
+
   /////////////////////////////////////////////////////////////////////////////////////
 
-  private _jsonRpcRequest<RET_TYPE>(methodName: string, ...params: any[]): Promise<RET_TYPE> {
+  private _jsonRpcRequest<RET_TYPE>(methodName: string, requestUrl: string, ...params: any[]): Promise<RET_TYPE> {
     const commonHeaders = new HttpHeaders({
       'Content-type': 'application/json',
       'X-Api-Version': config.apiVersion.map((v) => v.toString()).join('.'),
@@ -151,7 +165,7 @@ export class RiichiApiService {
     };
 
     return this.http
-      .post(environment.apiUrl, jsonRpcBody, { headers: commonHeaders })
+      .post(requestUrl, jsonRpcBody, { headers: commonHeaders })
       .toPromise()
       .then<RET_TYPE>((response: GenericResponse) => {
         if (response.error) {
diff --git a/Tyr/src/environments/environment.docker.ts b/Tyr/src/environments/environment.docker.ts
index c18037f..f7a858c 100644
--- a/Tyr/src/environments/environment.docker.ts
+++ b/Tyr/src/environments/environment.docker.ts
@@ -21,6 +21,8 @@
 export const environment = {
   production: false,
   apiUrl: 'http://localhost:4001',
+  freyUrl: 'http://localhost:4004',
+  rhedaUrl: 'http://localhost:4002/',
   guiFix: (src: string) => src,
   keyPrefix: 'tyr',
   cookieDomain: null, // when working on localhost this must be omitted!
diff --git a/Tyr/src/environments/environment.prod.ts b/Tyr/src/environments/environment.prod.ts
index c07bc2f..52b774e 100644
--- a/Tyr/src/environments/environment.prod.ts
+++ b/Tyr/src/environments/environment.prod.ts
@@ -48,6 +48,8 @@ switch (window.location.host) {
 export const environment = {
   production: true,
   apiUrl: url,
+  freyUrl: 'http://u.mjtop.net/',
+  rhedaUrl: 'http://gui.mjtop.net/',
   keyPrefix: 'tyr',
   cookieDomain: 'mjtop.net',
   guiFix: guiFix,
diff --git a/Tyr/src/environments/environment.ts b/Tyr/src/environments/environment.ts
index f0c95c2..1e31c69 100644
--- a/Tyr/src/environments/environment.ts
+++ b/Tyr/src/environments/environment.ts
@@ -26,6 +26,8 @@
 export const environment = {
   production: false,
   apiUrl: 'http://api.dev.mjtop.net/',
+  freyUrl: 'http://u.dev.mjtop.net/',
+  rhedaUrl: 'http://gui.dev.mjtop.net/',
   guiFix: (src: string) => src,
   keyPrefix: 'tyr',
   cookieDomain: 'mjtop.net',
diff --git a/Tyr/src/i18n/ru.po b/Tyr/src/i18n/ru.po
index 62d24f3..07ead78 100644
--- a/Tyr/src/i18n/ru.po
+++ b/Tyr/src/i18n/ru.po
@@ -528,3 +528,7 @@ msgstr "х4"
 
 #~ msgid "it's you"
 #~ msgstr "это вы"
+
+#: src/app/components/auxiliary-i18n/index.ts:133:12
+msgid "Hello unauthorized user!"
+msgstr "Привет, неавторизованный юзер!"

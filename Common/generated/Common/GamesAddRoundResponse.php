<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: proto/mimir.proto

namespace Common;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>common.GamesAddRoundResponse</code>
 */
class GamesAddRoundResponse extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>repeated .common.IntermediateResultOfSession scores = 1;</code>
     */
    private $scores;
    /**
     * current round number
     *
     * Generated from protobuf field <code>int32 round = 3;</code>
     */
    protected $round = 0;
    /**
     * Generated from protobuf field <code>int32 honba = 4;</code>
     */
    protected $honba = 0;
    /**
     * on the table from previous round
     *
     * Generated from protobuf field <code>int32 riichi_bets = 5;</code>
     */
    protected $riichi_bets = 0;
    /**
     * if game has been finished prematurely (e.g. by timeout)
     *
     * Generated from protobuf field <code>bool prematurely_finished = 6;</code>
     */
    protected $prematurely_finished = false;
    /**
     * True if round has just changed useful to determine if current
     * 4e or 4s is first one, no matter what honba count is. (Possible
     * situation: draw in 3s or 3e, so first 4e or 4s has honba).
     *
     * Generated from protobuf field <code>bool round_just_changed = 7;</code>
     */
    protected $round_just_changed = false;
    /**
     * Generated from protobuf field <code>bool is_finished = 8;</code>
     */
    protected $is_finished = false;
    /**
     * True if ending policy is "oneMoreHand" AND this hand was started.
     *
     * Generated from protobuf field <code>bool last_hand_started = 9;</code>
     */
    protected $last_hand_started = false;
    /**
     * Outcome of previously recorded round. Useful to determine if
     * certain rules should be applied in current case, e.g., agariyame
     * should not be applied on chombo or abortive draw.
     *
     * Generated from protobuf field <code>optional .common.RoundOutcome last_outcome = 10;</code>
     */
    protected $last_outcome = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type array<\Common\IntermediateResultOfSession>|\Google\Protobuf\Internal\RepeatedField $scores
     *     @type int $round
     *           current round number
     *     @type int $honba
     *     @type int $riichi_bets
     *           on the table from previous round
     *     @type bool $prematurely_finished
     *           if game has been finished prematurely (e.g. by timeout)
     *     @type bool $round_just_changed
     *           True if round has just changed useful to determine if current
     *           4e or 4s is first one, no matter what honba count is. (Possible
     *           situation: draw in 3s or 3e, so first 4e or 4s has honba).
     *     @type bool $is_finished
     *     @type bool $last_hand_started
     *           True if ending policy is "oneMoreHand" AND this hand was started.
     *     @type int $last_outcome
     *           Outcome of previously recorded round. Useful to determine if
     *           certain rules should be applied in current case, e.g., agariyame
     *           should not be applied on chombo or abortive draw.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Proto\Mimir::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>repeated .common.IntermediateResultOfSession scores = 1;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getScores()
    {
        return $this->scores;
    }

    /**
     * Generated from protobuf field <code>repeated .common.IntermediateResultOfSession scores = 1;</code>
     * @param array<\Common\IntermediateResultOfSession>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setScores($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Common\IntermediateResultOfSession::class);
        $this->scores = $arr;

        return $this;
    }

    /**
     * current round number
     *
     * Generated from protobuf field <code>int32 round = 3;</code>
     * @return int
     */
    public function getRound()
    {
        return $this->round;
    }

    /**
     * current round number
     *
     * Generated from protobuf field <code>int32 round = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setRound($var)
    {
        GPBUtil::checkInt32($var);
        $this->round = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>int32 honba = 4;</code>
     * @return int
     */
    public function getHonba()
    {
        return $this->honba;
    }

    /**
     * Generated from protobuf field <code>int32 honba = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setHonba($var)
    {
        GPBUtil::checkInt32($var);
        $this->honba = $var;

        return $this;
    }

    /**
     * on the table from previous round
     *
     * Generated from protobuf field <code>int32 riichi_bets = 5;</code>
     * @return int
     */
    public function getRiichiBets()
    {
        return $this->riichi_bets;
    }

    /**
     * on the table from previous round
     *
     * Generated from protobuf field <code>int32 riichi_bets = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setRiichiBets($var)
    {
        GPBUtil::checkInt32($var);
        $this->riichi_bets = $var;

        return $this;
    }

    /**
     * if game has been finished prematurely (e.g. by timeout)
     *
     * Generated from protobuf field <code>bool prematurely_finished = 6;</code>
     * @return bool
     */
    public function getPrematurelyFinished()
    {
        return $this->prematurely_finished;
    }

    /**
     * if game has been finished prematurely (e.g. by timeout)
     *
     * Generated from protobuf field <code>bool prematurely_finished = 6;</code>
     * @param bool $var
     * @return $this
     */
    public function setPrematurelyFinished($var)
    {
        GPBUtil::checkBool($var);
        $this->prematurely_finished = $var;

        return $this;
    }

    /**
     * True if round has just changed useful to determine if current
     * 4e or 4s is first one, no matter what honba count is. (Possible
     * situation: draw in 3s or 3e, so first 4e or 4s has honba).
     *
     * Generated from protobuf field <code>bool round_just_changed = 7;</code>
     * @return bool
     */
    public function getRoundJustChanged()
    {
        return $this->round_just_changed;
    }

    /**
     * True if round has just changed useful to determine if current
     * 4e or 4s is first one, no matter what honba count is. (Possible
     * situation: draw in 3s or 3e, so first 4e or 4s has honba).
     *
     * Generated from protobuf field <code>bool round_just_changed = 7;</code>
     * @param bool $var
     * @return $this
     */
    public function setRoundJustChanged($var)
    {
        GPBUtil::checkBool($var);
        $this->round_just_changed = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bool is_finished = 8;</code>
     * @return bool
     */
    public function getIsFinished()
    {
        return $this->is_finished;
    }

    /**
     * Generated from protobuf field <code>bool is_finished = 8;</code>
     * @param bool $var
     * @return $this
     */
    public function setIsFinished($var)
    {
        GPBUtil::checkBool($var);
        $this->is_finished = $var;

        return $this;
    }

    /**
     * True if ending policy is "oneMoreHand" AND this hand was started.
     *
     * Generated from protobuf field <code>bool last_hand_started = 9;</code>
     * @return bool
     */
    public function getLastHandStarted()
    {
        return $this->last_hand_started;
    }

    /**
     * True if ending policy is "oneMoreHand" AND this hand was started.
     *
     * Generated from protobuf field <code>bool last_hand_started = 9;</code>
     * @param bool $var
     * @return $this
     */
    public function setLastHandStarted($var)
    {
        GPBUtil::checkBool($var);
        $this->last_hand_started = $var;

        return $this;
    }

    /**
     * Outcome of previously recorded round. Useful to determine if
     * certain rules should be applied in current case, e.g., agariyame
     * should not be applied on chombo or abortive draw.
     *
     * Generated from protobuf field <code>optional .common.RoundOutcome last_outcome = 10;</code>
     * @return int
     */
    public function getLastOutcome()
    {
        return isset($this->last_outcome) ? $this->last_outcome : 0;
    }

    public function hasLastOutcome()
    {
        return isset($this->last_outcome);
    }

    public function clearLastOutcome()
    {
        unset($this->last_outcome);
    }

    /**
     * Outcome of previously recorded round. Useful to determine if
     * certain rules should be applied in current case, e.g., agariyame
     * should not be applied on chombo or abortive draw.
     *
     * Generated from protobuf field <code>optional .common.RoundOutcome last_outcome = 10;</code>
     * @param int $var
     * @return $this
     */
    public function setLastOutcome($var)
    {
        GPBUtil::checkEnum($var, \Common\RoundOutcome::class);
        $this->last_outcome = $var;

        return $this;
    }

}


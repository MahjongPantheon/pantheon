<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT! (protoc-gen-twirp_php 0.9.1)
# source: proto/mimir.proto

declare(strict_types=1);

namespace Common;

use Google\Protobuf\Internal\Message;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Twirp\Context;
use Twirp\Error;
use Twirp\ErrorCode;

/**
 * @internal MimirAbstractClient provides abstraction for JsonClient and Client (default).
 * Note that you MUST NOT use it directly! It is an internal implementation detail that is not
 * covered by backward compatibility promise. The only thing that will and should remain backward
 * compatible is the two clients.
 */
abstract class MimirAbstractClient
{
    /**
     * @var server
     */
    protected $addr;

    /**
     * @var ClientInterface
     */
    protected $httpClient;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    /**
     * @var string
     */
    protected $prefix;

    public function __construct(
        $addr,
        ClientInterface $httpClient = null,
        RequestFactoryInterface $requestFactory = null,
        StreamFactoryInterface $streamFactory = null,
        string $prefix = '/twirp'
    ) {
        if ($httpClient === null) {
            $httpClient = Psr18ClientDiscovery::find();
        }

        if ($requestFactory === null) {
            $requestFactory = Psr17FactoryDiscovery::findRequestFactory();
        }

        if ($streamFactory === null) {
            $streamFactory = Psr17FactoryDiscovery::findStreamFactory();
        }

        $this->addr = $this->urlBase($addr);
        $this->httpClient = $httpClient;
        $this->requestFactory = $requestFactory;
        $this->streamFactory = $streamFactory;
        $this->prefix = ltrim(rtrim($prefix, '/'), '/');
    }

    /**
     * {@inheritdoc}
     */
    public function GetRulesets(array $ctx, \Common\EventsGetRulesetsPayload $in): \Common\EventsGetRulesetsResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetRulesets');

        $out = new \Common\EventsGetRulesetsResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/GetRulesets';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/GetRulesets';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetEvents(array $ctx, \Common\EventsGetEventsPayload $in): \Common\EventsGetEventsResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetEvents');

        $out = new \Common\EventsGetEventsResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/GetEvents';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/GetEvents';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetEventsById(array $ctx, \Common\EventsGetEventsByIdPayload $in): \Common\EventsGetEventsByIdResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetEventsById');

        $out = new \Common\EventsGetEventsByIdResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/GetEventsById';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/GetEventsById';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetMyEvents(array $ctx, \Common\PlayersGetMyEventsPayload $in): \Common\PlayersGetMyEventsResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetMyEvents');

        $out = new \Common\PlayersGetMyEventsResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/GetMyEvents';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/GetMyEvents';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetGameConfig(array $ctx, \Common\GenericEventPayload $in): \Common\GameConfig
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetGameConfig');

        $out = new \Common\GameConfig();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/GetGameConfig';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/GetGameConfig';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetRatingTable(array $ctx, \Common\EventsGetRatingTablePayload $in): \Common\EventsGetRatingTableResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetRatingTable');

        $out = new \Common\EventsGetRatingTableResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/GetRatingTable';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/GetRatingTable';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetLastGames(array $ctx, \Common\EventsGetLastGamesPayload $in): \Common\EventsGetLastGamesResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetLastGames');

        $out = new \Common\EventsGetLastGamesResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/GetLastGames';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/GetLastGames';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetGame(array $ctx, \Common\GenericSessionPayload $in): \Common\EventsGetGameResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetGame');

        $out = new \Common\EventsGetGameResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/GetGame';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/GetGame';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetGamesSeries(array $ctx, \Common\GenericEventPayload $in): \Common\EventsGetGamesSeriesResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetGamesSeries');

        $out = new \Common\EventsGetGamesSeriesResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/GetGamesSeries';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/GetGamesSeries';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetCurrentSessions(array $ctx, \Common\PlayersGetCurrentSessionsPayload $in): \Common\PlayersGetCurrentSessionsResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetCurrentSessions');

        $out = new \Common\PlayersGetCurrentSessionsResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/GetCurrentSessions';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/GetCurrentSessions';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetAllRegisteredPlayers(array $ctx, \Common\EventsGetAllRegisteredPlayersPayload $in): \Common\EventsGetAllRegisteredPlayersResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetAllRegisteredPlayers');

        $out = new \Common\EventsGetAllRegisteredPlayersResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/GetAllRegisteredPlayers';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/GetAllRegisteredPlayers';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetTimerState(array $ctx, \Common\GenericEventPayload $in): \Common\EventsGetTimerStateResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetTimerState');

        $out = new \Common\EventsGetTimerStateResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/GetTimerState';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/GetTimerState';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetSessionOverview(array $ctx, \Common\GenericSessionPayload $in): \Common\GamesGetSessionOverviewResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetSessionOverview');

        $out = new \Common\GamesGetSessionOverviewResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/GetSessionOverview';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/GetSessionOverview';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetPlayerStats(array $ctx, \Common\PlayersGetPlayerStatsPayload $in): \Common\PlayersGetPlayerStatsResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetPlayerStats');

        $out = new \Common\PlayersGetPlayerStatsResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/GetPlayerStats';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/GetPlayerStats';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function AddRound(array $ctx, \Common\GamesAddRoundPayload $in): \Common\GamesAddRoundResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'AddRound');

        $out = new \Common\GamesAddRoundResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/AddRound';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/AddRound';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function PreviewRound(array $ctx, \Common\GamesPreviewRoundPayload $in): \Common\GamesPreviewRoundResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'PreviewRound');

        $out = new \Common\GamesPreviewRoundResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/PreviewRound';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/PreviewRound';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function AddOnlineReplay(array $ctx, \Common\GamesAddOnlineReplayPayload $in): \Common\GamesAddOnlineReplayResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'AddOnlineReplay');

        $out = new \Common\GamesAddOnlineReplayResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/AddOnlineReplay';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/AddOnlineReplay';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetLastResults(array $ctx, \Common\PlayersGetLastResultsPayload $in): \Common\PlayersGetLastResultsResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetLastResults');

        $out = new \Common\PlayersGetLastResultsResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/GetLastResults';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/GetLastResults';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetLastRound(array $ctx, \Common\PlayersGetLastRoundPayload $in): \Common\PlayersGetLastRoundResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetLastRound');

        $out = new \Common\PlayersGetLastRoundResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/GetLastRound';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/GetLastRound';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetAllRounds(array $ctx, \Common\GenericSessionPayload $in): \Common\PlayersGetAllRoundsResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetAllRounds');

        $out = new \Common\PlayersGetAllRoundsResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/GetAllRounds';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/GetAllRounds';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetLastRoundByHash(array $ctx, \Common\GenericSessionPayload $in): \Common\PlayersGetLastRoundByHashResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetLastRoundByHash');

        $out = new \Common\PlayersGetLastRoundByHashResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/GetLastRoundByHash';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/GetLastRoundByHash';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetEventForEdit(array $ctx, \Common\EventsGetEventForEditPayload $in): \Common\EventsGetEventForEditResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetEventForEdit');

        $out = new \Common\EventsGetEventForEditResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/GetEventForEdit';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/GetEventForEdit';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function RebuildScoring(array $ctx, \Common\GenericEventPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'RebuildScoring');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/RebuildScoring';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/RebuildScoring';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function CreateEvent(array $ctx, \Common\EventData $in): \Common\GenericEventPayload
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'CreateEvent');

        $out = new \Common\GenericEventPayload();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/CreateEvent';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/CreateEvent';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function UpdateEvent(array $ctx, \Common\EventsUpdateEventPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'UpdateEvent');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/UpdateEvent';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/UpdateEvent';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function FinishEvent(array $ctx, \Common\GenericEventPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'FinishEvent');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/FinishEvent';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/FinishEvent';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function ToggleListed(array $ctx, \Common\GenericEventPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'ToggleListed');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/ToggleListed';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/ToggleListed';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetTablesState(array $ctx, \Common\EventsGetTablesStatePayload $in): \Common\EventsGetTablesStateResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetTablesState');

        $out = new \Common\EventsGetTablesStateResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/GetTablesState';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/GetTablesState';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function StartTimer(array $ctx, \Common\GenericEventPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'StartTimer');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/StartTimer';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/StartTimer';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function RegisterPlayer(array $ctx, \Common\EventsRegisterPlayerPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'RegisterPlayer');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/RegisterPlayer';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/RegisterPlayer';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function UnregisterPlayer(array $ctx, \Common\EventsUnregisterPlayerPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'UnregisterPlayer');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/UnregisterPlayer';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/UnregisterPlayer';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function UpdatePlayerSeatingFlag(array $ctx, \Common\EventsUpdatePlayerSeatingFlagPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'UpdatePlayerSeatingFlag');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/UpdatePlayerSeatingFlag';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/UpdatePlayerSeatingFlag';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetAchievements(array $ctx, \Common\EventsGetAchievementsPayload $in): \Common\EventsGetAchievementsResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetAchievements');

        $out = new \Common\EventsGetAchievementsResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/GetAchievements';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/GetAchievements';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function ToggleHideResults(array $ctx, \Common\GenericEventPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'ToggleHideResults');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/ToggleHideResults';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/ToggleHideResults';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function ToggleHideAchievements(array $ctx, \Common\GenericEventPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'ToggleHideAchievements');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/ToggleHideAchievements';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/ToggleHideAchievements';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function UpdatePlayersLocalIds(array $ctx, \Common\EventsUpdatePlayersLocalIdsPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'UpdatePlayersLocalIds');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/UpdatePlayersLocalIds';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/UpdatePlayersLocalIds';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function UpdatePlayerReplacement(array $ctx, \Common\EventsUpdatePlayerReplacementPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'UpdatePlayerReplacement');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/UpdatePlayerReplacement';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/UpdatePlayerReplacement';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function UpdatePlayersTeams(array $ctx, \Common\EventsUpdatePlayersTeamsPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'UpdatePlayersTeams');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/UpdatePlayersTeams';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/UpdatePlayersTeams';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function StartGame(array $ctx, \Common\GamesStartGamePayload $in): \Common\GenericSessionPayload
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'StartGame');

        $out = new \Common\GenericSessionPayload();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/StartGame';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/StartGame';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function EndGame(array $ctx, \Common\GenericSessionPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'EndGame');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/EndGame';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/EndGame';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function CancelGame(array $ctx, \Common\GenericSessionPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'CancelGame');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/CancelGame';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/CancelGame';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function FinalizeSession(array $ctx, \Common\GenericEventPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'FinalizeSession');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/FinalizeSession';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/FinalizeSession';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function DropLastRound(array $ctx, \Common\GamesDropLastRoundPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'DropLastRound');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/DropLastRound';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/DropLastRound';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function DefinalizeGame(array $ctx, \Common\GenericSessionPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'DefinalizeGame');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/DefinalizeGame';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/DefinalizeGame';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function AddPenalty(array $ctx, \Common\GamesAddPenaltyPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'AddPenalty');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/AddPenalty';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/AddPenalty';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function AddPenaltyGame(array $ctx, \Common\GamesAddPenaltyGamePayload $in): \Common\GenericSessionPayload
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'AddPenaltyGame');

        $out = new \Common\GenericSessionPayload();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/AddPenaltyGame';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/AddPenaltyGame';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetPlayer(array $ctx, \Common\PlayersGetPlayerPayload $in): \Common\PlayersGetPlayerResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetPlayer');

        $out = new \Common\PlayersGetPlayerResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/GetPlayer';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/GetPlayer';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetCurrentSeating(array $ctx, \Common\GenericEventPayload $in): \Common\EventsGetCurrentSeatingResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetCurrentSeating');

        $out = new \Common\EventsGetCurrentSeatingResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/GetCurrentSeating';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/GetCurrentSeating';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function MakeShuffledSeating(array $ctx, \Common\SeatingMakeShuffledSeatingPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'MakeShuffledSeating');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/MakeShuffledSeating';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/MakeShuffledSeating';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function MakeSwissSeating(array $ctx, \Common\GenericEventPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'MakeSwissSeating');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/MakeSwissSeating';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/MakeSwissSeating';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function ResetSeating(array $ctx, \Common\GenericEventPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'ResetSeating');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/ResetSeating';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/ResetSeating';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GenerateSwissSeating(array $ctx, \Common\SeatingGenerateSwissSeatingPayload $in): \Common\SeatingGenerateSwissSeatingResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GenerateSwissSeating');

        $out = new \Common\SeatingGenerateSwissSeatingResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/GenerateSwissSeating';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/GenerateSwissSeating';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function MakeIntervalSeating(array $ctx, \Common\SeatingMakeIntervalSeatingPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'MakeIntervalSeating');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/MakeIntervalSeating';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/MakeIntervalSeating';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function MakePrescriptedSeating(array $ctx, \Common\SeatingMakePrescriptedSeatingPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'MakePrescriptedSeating');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/MakePrescriptedSeating';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/MakePrescriptedSeating';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetNextPrescriptedSeating(array $ctx, \Common\GenericEventPayload $in): \Common\SeatingGetNextPrescriptedSeatingResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetNextPrescriptedSeating');

        $out = new \Common\SeatingGetNextPrescriptedSeatingResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/GetNextPrescriptedSeating';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/GetNextPrescriptedSeating';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetPrescriptedEventConfig(array $ctx, \Common\GenericEventPayload $in): \Common\EventsGetPrescriptedEventConfigResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetPrescriptedEventConfig');

        $out = new \Common\EventsGetPrescriptedEventConfigResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/GetPrescriptedEventConfig';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/GetPrescriptedEventConfig';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function UpdatePrescriptedEventConfig(array $ctx, \Common\EventsUpdatePrescriptedEventConfigPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'UpdatePrescriptedEventConfig');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/UpdatePrescriptedEventConfig';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/UpdatePrescriptedEventConfig';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function InitStartingTimer(array $ctx, \Common\GenericEventPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'InitStartingTimer');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/InitStartingTimer';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/InitStartingTimer';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetStartingTimer(array $ctx, \Common\GenericEventPayload $in): \Common\EventsGetStartingTimerResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetStartingTimer');

        $out = new \Common\EventsGetStartingTimerResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/GetStartingTimer';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/GetStartingTimer';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function ClearStatCache(array $ctx, \Common\ClearStatCachePayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'ClearStatCache');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/ClearStatCache';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/ClearStatCache';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function ForceFinishGame(array $ctx, \Common\GenericSessionPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'ForceFinishGame');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/ForceFinishGame';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/ForceFinishGame';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function AddTypedOnlineReplay(array $ctx, \Common\TypedGamesAddOnlineReplayPayload $in): \Common\GamesAddOnlineReplayResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'AddTypedOnlineReplay');

        $out = new \Common\GamesAddOnlineReplayResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/AddTypedOnlineReplay';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/AddTypedOnlineReplay';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function NotifyPlayersSessionStartsSoon(array $ctx, \Common\GenericEventPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'NotifyPlayersSessionStartsSoon');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/NotifyPlayersSessionStartsSoon';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/NotifyPlayersSessionStartsSoon';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function CallReferee(array $ctx, \Common\CallRefereePayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'CallReferee');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/CallReferee';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/CallReferee';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function RecalcAchievements(array $ctx, \Common\GenericEventPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'RecalcAchievements');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/RecalcAchievements';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/RecalcAchievements';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function RecalcPlayerStats(array $ctx, \Common\GenericEventPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'RecalcPlayerStats');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/RecalcPlayerStats';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/RecalcPlayerStats';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function ListPenalties(array $ctx, \Common\GenericEventPayload $in): \Common\PenaltiesResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'ListPenalties');

        $out = new \Common\PenaltiesResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/ListPenalties';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/ListPenalties';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function CancelPenalty(array $ctx, \Common\CancelPenaltyPayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'CancelPenalty');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/CancelPenalty';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/CancelPenalty';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function AddExtraTime(array $ctx, \Common\AddExtraTimePayload $in): \Common\GenericSuccessResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'AddExtraTime');

        $out = new \Common\GenericSuccessResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/AddExtraTime';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/AddExtraTime';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function ListMyPenalties(array $ctx, \Common\GenericEventPayload $in): \Common\PenaltiesResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'ListMyPenalties');

        $out = new \Common\PenaltiesResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/ListMyPenalties';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/ListMyPenalties';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function ListChombo(array $ctx, \Common\GenericEventPayload $in): \Common\ChomboResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'ListChombo');

        $out = new \Common\ChomboResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/ListChombo';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/ListChombo';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * {@inheritdoc}
     */
    public function GetCurrentStateForPlayer(array $ctx, \Common\GetCurrentStatePayload $in): \Common\GetCurrentStateResponse
    {
        $ctx = Context::withPackageName($ctx, 'common');
        $ctx = Context::withServiceName($ctx, 'Mimir');
        $ctx = Context::withMethodName($ctx, 'GetCurrentStateForPlayer');

        $out = new \Common\GetCurrentStateResponse();

        $url = $this->addr;
        if (empty($this->prefix)) {
            $url = $url.'/common.Mimir/GetCurrentStateForPlayer';
        } else {
            $url = $url.'/'.$this->prefix.'/common.Mimir/GetCurrentStateForPlayer';
        }

        $this->doRequest($ctx, $url, $in, $out);

        return $out;
    }

    /**
     * Common code to make a request to the remote twirp service.
     */
    abstract protected function doRequest(array $ctx, string $url, Message $in, Message $out): void;

    /**
     * Makes an HTTP request and adds common headers.
     */
    protected function newRequest(array $ctx, string $url, string $reqBody, string $contentType): RequestInterface
    {
        $body = $this->streamFactory->createStream($reqBody);

        $req = $this->requestFactory->createRequest('POST', $url);

        $headers = Context::httpRequestHeaders($ctx);

        foreach ($headers as $key => $value) {
            $req = $req->withHeader($key, $value);
        }

        return $req
            ->withBody($body)
            ->withHeader('Accept', $contentType)
            ->withHeader('Content-Type', $contentType)
            ->withHeader('Twirp-Version', 'v8.1.0')
            ->withHeader('TwirPHP-Version', '0.9.1')
        ;
    }

    /**
     * Adds consistency to errors generated in the client.
     */
    protected function clientError(string $desc, \Throwable $e): TwirpError
    {
        return TwirpError::newError(ErrorCode::Internal, sprintf('%s: %s', $desc, $e->getMessage()), $e);
    }

    /**
     * Builds a twirp Error from a non-200 HTTP response.
     * If the response has a valid serialized Twirp error, then it's returned.
     * If not, the response status code is used to generate a similar twirp
     * error. {@see self::twirpErrorFromIntermediary} for more info on intermediary errors.
     */
    protected function errorFromResponse(ResponseInterface $resp): TwirpError
    {
        $statusCode = $resp->getStatusCode();
        $statusText = $resp->getReasonPhrase();

        if ($this->isHttpRedirect($statusCode)) {
            // Unexpected redirect: it must be an error from an intermediary.
            // Twirp clients don't follow redirects automatically, Twirp only handles
            // POST requests, redirects should only happen on GET and HEAD requests.
            $location = $resp->getHeaderLine('Location');
            $msg = sprintf(
                'unexpected HTTP status code %d "%s" received, Location="%s"',
                $statusCode,
                $statusText,
                $location
            );

            return $this->twirpErrorFromIntermediary($statusCode, $msg, $location);
        }

        $body = (string)$resp->getBody();

        $rawError = json_decode($body, true);
        if ($rawError === null) {
            $msg = sprintf('error from intermediary with HTTP status code %d "%s"', $statusCode, $statusText);

            return $this->twirpErrorFromIntermediary($statusCode, $msg, $body);
        }

        $rawError = $rawError + ['code' => '', 'msg' => '', 'meta' => []];

        if (ErrorCode::isValid($rawError['code']) === false) {
            $msg = 'invalid type returned from server error response: '.$rawError['code'];

            return TwirpError::newError(ErrorCode::Internal, $msg);
        }

        $error = TwirpError::newError($rawError['code'], $rawError['msg']);

        foreach ($rawError['meta'] as $key => $value) {
           $error->setMeta($key, $value);
        }

        return $error;
    }

    /**
     * Maps HTTP errors from non-twirp sources to twirp errors.
     * The mapping is similar to gRPC: https://github.com/grpc/grpc/blob/master/doc/http-grpc-status-mapping.md.
     * Returned twirp Errors have some additional metadata for inspection.
     */
    protected function twirpErrorFromIntermediary(int $status, string $msg, string $bodyOrLocation): TwirpError
    {
        if ($this->isHttpRedirect($status)) {
            $code = ErrorCode::Internal;
        } else {
            switch ($status) {
                case 400: // Bad Request
                    $code = ErrorCode::Internal;
                    break;
                case 401: // Unauthorized
                    $code = ErrorCode::Unauthenticated;
                    break;
                case 403: // Forbidden
                    $code = ErrorCode::PermissionDenied;
                    break;
                case 404: // Not Found
                    $code = ErrorCode::BadRoute;
                    break;
                case 429: // Too Many Requests
                    $code = ErrorCode::ResourceExhausted;
                    break;
                case 502: // Bad Gateway
                case 503: // Service Unavailable
                case 504: // Gateway Timeout
                    $code = ErrorCode::Unavailable;
                    break;
                default: // All other codes
                    $code = ErrorCode::Unknown;
                    break;
            }
        }

        $error = TwirpError::newError($code, $msg);
        $error->setMeta('http_error_from_intermediary', 'true');
        $error->setMeta('status_code', (string)$status);

        if ($this->isHttpRedirect($status)) {
            $error->setMeta('location', $bodyOrLocation);
        } else {
            $error->setMeta('body', $bodyOrLocation);
        }

        return $error;
    }

    protected function isHttpRedirect(int $status): bool
    {
        return $status >= 300 && $status <= 399;
    }

    protected function urlBase(string $addr): string
    {
        $scheme = parse_url($addr, PHP_URL_SCHEME);

        // If parse_url fails, return the addr unchanged.
        if ($scheme === false) {
            return $addr;
        }

        // If the addr does not specify a scheme, default to http.
        if (empty($scheme)) {
            $addr = 'http://'.ltrim($addr, ':/');
        }

        return $addr;
    }
}

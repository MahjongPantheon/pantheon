/*  Pantheon common files
 *  Copyright (C) 2016  o.klimenko aka ctizen
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

// protolint:disable REPEATED_FIELD_NAMES_PLURALIZED
syntax = "proto3";

package common;

// Frey specifics

message AccessRules {
  map<string, RuleValue> rules = 1;
}

message RuleValue {
  oneof kind {
    // Represents a double value.
    int32 number_value = 2;
    // Represents a string value.
    string string_value = 3;
    // Represents a boolean value.
    bool bool_value = 4;
  }
}

message EventAdmin {
  int32 rule_id = 1;
  int32 person_id = 2;
  string person_name = 3;
  bool has_avatar = 4;
  string last_update = 5;
}

message EventReferee {
  int32 rule_id = 1;
  int32 person_id = 2;
  string person_name = 3;
  bool has_avatar = 4;
  string last_update = 5;
}

message RuleListItem {
  string default = 1;
  string type = 2;
  string title = 3;
}

message EventRuleListItem {
  bool is_global = 1;
  int32 id = 2;
  RuleValue value = 3;
  string name = 4;
  string owner_title = 5;
  repeated string allowed_values = 6;
}

message RuleListItemEx {
  int32 id = 1;
  string type = 2;
  RuleValue value = 3;
  repeated string allowed_values = 4;
}

message RuleListItemExMap {
  map<string, RuleListItemEx> rules = 1;
}

message Person {
  int32 id = 1;
  string city = 2;
  string tenhou_id = 3;
  string title = 4;
  bool has_avatar = 5;
  string last_update = 6;
}

message PersonEx {
  int32 id = 1;
  string city = 2;
  string tenhou_id = 3;
  string title = 4;
  string country = 5;
  string email = 6;
  string phone = 7;
  repeated int32 groups = 8;
  bool has_avatar = 9;
  string last_update = 10;
  string ms_nickname = 11;
  int32 ms_account_id = 12;
  string telegram_id = 13;
  string notifications = 14;
}

message Group {
  int32 id = 1;
  string title = 2;
  string color = 3;
  string description = 4;
}

// Mimir specifics

enum EventType {
  EVENT_TYPE_UNSPECIFIED = 0;
  EVENT_TYPE_TOURNAMENT = 1;
  EVENT_TYPE_LOCAL = 2;
  EVENT_TYPE_ONLINE = 3;
}

enum TournamentGamesStatus {
  TOURNAMENT_GAMES_STATUS_UNSPECIFIED = 0; // for non-tournament events
  TOURNAMENT_GAMES_STATUS_SEATING_READY = 1;
  TOURNAMENT_GAMES_STATUS_STARTED = 2;
}

enum RoundOutcome {
  ROUND_OUTCOME_UNSPECIFIED = 0;
  ROUND_OUTCOME_RON = 1;
  ROUND_OUTCOME_TSUMO = 2;
  ROUND_OUTCOME_DRAW = 3;
  ROUND_OUTCOME_ABORT = 4;
  ROUND_OUTCOME_CHOMBO = 5;
  ROUND_OUTCOME_NAGASHI = 6;
  ROUND_OUTCOME_MULTIRON = 7;
}

enum SessionStatus {
  SESSION_STATUS_UNSPECIFIED = 0;
  SESSION_STATUS_INPROGRESS = 1;
  SESSION_STATUS_PREFINISHED = 2;
  SESSION_STATUS_FINISHED = 3;
  SESSION_STATUS_CANCELLED = 4;
  SESSION_STATUS_PLANNED = 5;
}

message Country {
  string code = 1;
  string name = 2;
}

message Event {
  int32 id = 1;
  string title = 2;
  string description = 3;
  bool finished = 4;
  bool is_listed = 5;
  bool is_rating_shown = 6;
  bool tournament_started = 7;
  EventType type = 8;
  bool is_prescripted = 9;
  bool is_team = 10;
  bool has_series = 11;
  bool with_chips = 12;
  int32 min_games_count = 13;
  bool achievements_shown = 15;
  bool with_yakitori = 16;
  PlatformType platform_id = 17;
}

message MyEvent {
  int32 id = 1;
  string title = 2;
  string description = 3;
  bool is_online = 4;
}

message GameConfig {
  string ruleset_title = 10;
  string event_title = 26;
  string event_description = 27;
  string event_stat_host = 28;
  bool use_timer = 29;
  bool use_penalty = 30;
  int32 game_duration = 34; // minutes
  string timezone = 35;
  bool is_online = 36;
  bool is_team = 37;
  bool auto_seating = 38;
  bool sync_start = 39;
  bool sync_end = 40;
  bool sort_by_games = 41;
  bool allow_player_append = 42;
  int32 series_length = 45;
  int32 min_games_count = 46;
  TournamentGamesStatus games_status = 47;
  bool hide_results = 48;
  bool hide_add_replay_button = 49;
  bool is_prescripted = 50;
  bool is_finished = 52;
  RulesetConfig ruleset_config = 53;
  int32 lobby_id = 54;
  bool allow_view_other_tables = 55;
}

message PlayerInRating {
  int32 id = 1;
  string title = 2;
  string tenhou_id = 3;
  float rating = 4;
  int32 chips = 5;
  bool winner_zone = 6;
  float avg_place = 7;
  float avg_score = 8;
  int32 games_played = 9;
  optional string team_name = 10;
  bool has_avatar = 11;
  string last_update = 12;
  float penalties_amount = 13;
  int32 penalties_count = 14;
}

message Player {
  int32 id = 1;
  string title = 2;
  string tenhou_id = 3;
  bool has_avatar = 4;
  string last_update = 5;
}

message FinalResultOfSession {
  int32 player_id = 1;
  int32 score = 2;
  float rating_delta = 3;
  int32 place = 4;
}

message Penalty {
  int32 who = 1;
  int32 amount = 2;
  optional string reason = 3;
  int32 assigned_by = 4;
  string created_at = 5;
  bool is_cancelled = 6;
  optional string cancellation_reason = 7;
  int32 id = 8;
}

message RonResult {
  int32 round_index = 1;
  int32 honba = 2;
  int32 winner_id = 3;
  int32 loser_id = 4;
  int32 pao_player_id = 5;
  int32 han = 6;
  int32 fu = 7;
  repeated int32 yaku = 8; // yaku ids
  repeated int32 riichi_bets = 9; // player ids
  int32 dora = 10;
  int32 uradora = 11;
  int32 kandora = 12;
  int32 kanuradora = 13;
  bool open_hand = 14;
}

message MultironWin {
  int32 winner_id = 1;
  int32 pao_player_id = 2;
  int32 han = 3;
  int32 fu = 4;
  repeated int32 yaku = 5; // yaku ids
  int32 dora = 6;
  int32 uradora = 7;
  int32 kandora = 8;
  int32 kanuradora = 9;
  bool open_hand = 10;
}

message MultironResult {
  int32 round_index = 1;
  int32 honba = 2;
  int32 loser_id = 3;
  int32 multi_ron = 4; // count of players who won
  repeated MultironWin wins = 5;
  repeated int32 riichi_bets = 6; // player ids
}

message TsumoResult {
  int32 round_index = 1;
  int32 honba = 2;
  int32 winner_id = 3;
  int32 pao_player_id = 4;
  int32 han = 5;
  int32 fu = 6;
  repeated int32 yaku = 7; // yaku ids
  repeated int32 riichi_bets = 8; // player ids
  int32 dora = 9;
  int32 uradora = 10;
  int32 kandora = 11;
  int32 kanuradora = 12;
  bool open_hand = 13;
}

message DrawResult {
  int32 round_index = 1;
  int32 honba = 2;
  repeated int32 riichi_bets = 3; // player ids
  repeated int32 tempai = 4; // player ids
}

message AbortResult {
  int32 round_index = 1;
  int32 honba = 2;
  repeated int32 riichi_bets = 3; // player ids
}

message ChomboResult {
  int32 round_index = 1;
  int32 honba = 2;
  int32 loser_id = 3;
}

message NagashiResult {
  int32 round_index = 1;
  int32 honba = 2;
  repeated int32 riichi_bets = 3; // player ids
  repeated int32 tempai = 4; // player ids
  repeated int32 nagashi = 5; // player ids
}

message Round {
  oneof outcome {
    RonResult ron = 1;
    TsumoResult tsumo = 2;
    MultironResult multiron = 3;
    DrawResult draw = 4;
    AbortResult abort = 5;
    ChomboResult chombo = 6;
    NagashiResult nagashi = 7;
  }
}

message GameResult {
  string session_hash = 1;
  optional string date = 2;
  string replay_link = 3;
  repeated int32 players = 4;
  repeated FinalResultOfSession final_results = 5;
  repeated Round rounds = 7;
}

message PlayerPlaceInSeries {
  string session_hash = 1;
  int32 place = 2;
}

message SeriesResult {
  Player player = 1;
  repeated PlayerPlaceInSeries best_series = 2;
  float best_series_scores = 3;
  int32 best_series_places = 4;
  string best_series_avg_place = 5; // formatted numeric string
  repeated PlayerPlaceInSeries current_series = 6;
  float current_series_scores = 7;
  int32 current_series_places = 8;
  string current_series_avg_place = 9; // formatted numeric string
}

message ReplacementPlayer {
  int32 id = 1;
  string title = 2;
  bool has_avatar = 3;
  string last_update = 4;
}

message PlayerInSession {
  int32 id = 1;
  string title = 2;
  int32 score = 3;
  optional ReplacementPlayer replaced_by = 4;
  float rating_delta = 5;
  bool has_avatar = 6;
  string last_update = 7;
  bool yakitori = 8;
}

message RegisteredPlayer {
  int32 id = 1;
  string title = 2;
  optional int32 local_id = 3;
  optional string team_name = 4;
  string tenhou_id = 5;
  bool ignore_seating = 6;
  optional ReplacementPlayer replaced_by = 7;
  bool has_avatar = 8;
  string last_update = 9;
}

message SessionHistoryResult {
  string session_hash = 1;
  int32 event_id = 2;
  int32 player_id = 3;
  int32 score = 4;
  float rating_delta = 5;
  int32 place = 6;
  string title = 7;
  bool has_avatar = 8;
  string last_update = 9;
}

message SessionHistoryResultTable {
  repeated SessionHistoryResult tables = 1;
}

message PlacesSummaryItem {
  int32 place = 1;
  int32 count = 2; // count of games finished on this particular place
}

message PlayerWinSummary {
  int32 ron = 1;
  int32 tsumo = 2;
  int32 chombo = 3;
  int32 feed = 4;
  int32 tsumofeed = 5;
  int32 wins_with_open = 6;
  int32 wins_with_riichi = 7;
  int32 wins_with_dama = 8;
  int32 unforced_feed_to_open = 9;
  int32 unforced_feed_to_riichi = 10;
  int32 unforced_feed_to_dama = 11;
  int32 draw = 12;
  int32 draw_tempai = 13;
  int32 points_won = 14;
  int32 points_lost_ron = 15;
  int32 points_lost_tsumo = 16;
}

message HandValueStat {
  int32 han_count = 1;
  int32 count = 2; // count of hands with this value
}

message YakuStat {
  int32 yaku_id = 1;
  int32 count = 2; // count of hands contained this yaku
}

message RiichiSummary {
  int32 riichi_won = 1;
  int32 riichi_lost = 2;
  int32 feed_under_riichi = 3;
}

message DoraSummary {
  int32 count = 1;
  float average = 2;
}

message IntermediateResultOfSession {
  int32 player_id = 1;
  int32 score = 2;
  int32 chombo_count = 4;
}

message PaymentLogItem {
  optional int32 from = 1;
  optional int32 to = 2;
  int32 amount = 3;
}

message PaymentLog {
  repeated PaymentLogItem direct = 1;
  repeated PaymentLogItem riichi = 2;
  repeated PaymentLogItem honba = 3;
}

message RoundState {
  string session_hash = 1;
  int32 dealer = 2; // player id
  int32 round_index = 3;
  int32 riichi = 4; // riichis on table
  int32 honba = 5; // honba on table
  repeated int32 riichi_ids = 6; // player ids
  repeated IntermediateResultOfSession scores = 7; // scores AFTER payments
  repeated IntermediateResultOfSession scores_delta = 8;
  PaymentLog payments = 9;
  Round round = 10;
  RoundOutcome outcome = 11;
}

message EventData {
  optional EventType type = 1; // required to add, not required for edit
  string title = 2;
  string description = 3;
  int32 duration = 4;
  string timezone = 6;
  int32 lobby_id = 7; // xxxx for common lobby, 1xxxx for tournament lobby
  int32 series_length = 8;
  int32 min_games = 9;
  bool is_team = 10;
  bool is_prescripted = 11;
  int32 autostart = 12; // time until game autostart
  RulesetConfig ruleset_config = 14;
  bool is_listed = 15;
  bool is_rating_shown = 16;
  bool achievements_shown = 17;
  bool allow_view_other_tables = 18;
  PlatformType platform_id = 19;
}

message TableState {
  SessionStatus status = 1;
  bool may_definalize = 2;
  string session_hash = 3;
  optional int32 table_index = 5;
  optional Round last_round = 6;
  int32 current_round_index = 7;
  repeated IntermediateResultOfSession scores = 8;
  repeated RegisteredPlayer players = 9;
  optional int32 extra_time = 10;
}

message Achievement {
  string achievement_id = 1;
  string achievement_data = 2; // JSON stringified data
}

message LocalIdMapping {
  int32 player_id = 1;
  int32 local_id = 2;
}

message TeamMapping {
  int32 player_id = 1;
  string team_name = 2;
}

message PlayerSeating {
  int32 order = 1; // order at the table
  int32 player_id = 2;
  int32 session_id = 3;
  int32 table_index = 4;
  float rating = 5;
  string player_title = 6;
  bool has_avatar = 7;
  string last_update = 8;
}

message PlayerSeatingSwiss {
  int32 player_id = 1;
  float rating = 2;
}

message TableItemSwiss {
  repeated PlayerSeatingSwiss players = 1; // should be 4 elements
}

message PrescriptedTable {
  repeated RegisteredPlayer players = 1; // should be 4 elements
}

message Chombo {
  int32 player_id = 1;
  float amount = 2;
}

message SessionState {
  int32 dealer = 1;
  int32 round_index = 2;
  int32 riichi_count = 3;
  int32 honba_count = 4;
  repeated IntermediateResultOfSession scores = 5;
  bool finished = 6;
  bool last_hand_started = 8;
  repeated Chombo chombo = 9;
}

message Uma {
  int32 place1 = 1;
  int32 place2 = 2;
  int32 place3 = 3;
  int32 place4 = 4;
}

message ComplexUma {
  Uma neg1 = 1;
  Uma neg3 = 2;
  Uma otherwise = 3;
}

enum UmaType {
  UMA_TYPE_UNSPECIFIED = 0;
  UMA_TYPE_UMA_SIMPLE = 1;
  UMA_TYPE_UMA_COMPLEX = 2;
}

enum EndingPolicy {
  ENDING_POLICY_EP_UNSPECIFIED = 0;
  ENDING_POLICY_EP_ONE_MORE_HAND = 1;
  ENDING_POLICY_EP_END_AFTER_HAND = 2;
}

enum PlatformType {
  PLATFORM_TYPE_UNSPECIFIED = 0;
  PLATFORM_TYPE_TENHOUNET = 1;
  PLATFORM_TYPE_MAHJONGSOUL = 2;
}

message RulesetConfig {
  ComplexUma complex_uma = 1;
  EndingPolicy ending_policy = 2;
  Uma uma = 3;
  UmaType uma_type = 4;
  bool doubleron_honba_atamahane = 5;
  bool doubleron_riichi_atamahane = 6;
  bool equalize_uma = 7;
  bool extra_chombo_payments = 8;
  bool play_additional_rounds = 9;
  bool riichi_goes_to_winner = 10;
  bool tonpuusen = 11;
  bool with_abortives = 12;
  bool with_atamahane = 13;
  bool with_buttobi = 14;
  bool with_kazoe = 15;
  bool with_kiriage_mangan = 16;
  bool with_kuitan = 17;
  bool with_leading_dealer_game_over = 18;
  bool with_multi_yakumans = 19;
  bool with_nagashi_mangan = 20;
  bool with_winning_dealer_honba_skipped = 21;
  int32 chips_value = 22;
  int32 chombo_amount = 23;
  int32 game_expiration_time = 24;
  int32 goal_points = 25;
  int32 max_penalty = 26;
  int32 min_penalty = 27;
  int32 oka = 28;
  int32 penalty_step = 29;
  int32 replacement_player_fixed_points = 30;
  int32 replacement_player_override_uma = 31;
  int32 start_points = 32;
  int32 start_rating = 33;
  repeated int32 allowed_yaku = 34;
  repeated int32 yaku_with_pao = 35;
  bool with_yakitori = 36;
  int32 yakitori_penalty = 37;
  bool chombo_ends_game = 38;
  int32 honba_value = 39;
}

// Generics

message GenericSuccessResponse {
  bool success = 1;
}

message GenericEventPayload {
  int32 event_id = 1;
}

message GenericSessionPayload {
  string session_hash = 1;
}

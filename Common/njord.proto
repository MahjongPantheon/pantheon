syntax = "proto3";

package Common;

message N_Player {
  int32 id = 1;
  string title = 2;
  int32 rating = 3;
}

enum N_RoundStatus {
  NOT_STARTED = 0;
  SEEDING = 1;
  PLAYING = 2;
  ENDED = 3;
}

enum N_TileValue {
  NIL = 0x00; // not used

  // 0x[1-3][1-9] is common pattern. Lower octet contains tile value, higher octet contains certain suit.

  PIN_1 = 0x11;
  PIN_2 = 0x12;
  PIN_3 = 0x13;
  PIN_4 = 0x14;
  PIN_5 = 0x15;
  PIN_6 = 0x16;
  PIN_7 = 0x17;
  PIN_8 = 0x18;
  PIN_9 = 0x19;

  SOU_1 = 0x21;
  SOU_2 = 0x22;
  SOU_3 = 0x23;
  SOU_4 = 0x24;
  SOU_5 = 0x25;
  SOU_6 = 0x26;
  SOU_7 = 0x27;
  SOU_8 = 0x28;
  SOU_9 = 0x29;

  MAN_1 = 0x31;
  MAN_2 = 0x32;
  MAN_3 = 0x33;
  MAN_4 = 0x34;
  MAN_5 = 0x35;
  MAN_6 = 0x36;
  MAN_7 = 0x37;
  MAN_8 = 0x38;
  MAN_9 = 0x39;

  HAKU = 0x41;
  HATSU = 0x42;
  CHUN = 0x43;
  TON = 0x44;
  NAN = 0x45;
  SHA = 0x46;
  PEI = 0x47;
}

message N_Tile {
  N_TileValue value = 1;
  bool isAka = 2;
  bool isTsumogiri = 3;
  bool isClaimed = 4;
}

message N_Discard {
  repeated N_Tile tiles = 1;
  int32 riichi = 2; // contains index of player turn when they declared riichi
}

enum N_SetKind {
  PON = 0;
  CHI = 1;
  ANKAN = 2;
  SHOMINKAN = 3;
  DAIMINKAN = 4;
}

enum N_ClaimedFrom {
  KAMICHA = 0;
  TOIMEN = 1;
  SHIMOCHA = 2;
}

message N_OpenSet {
  N_SetKind kind = 1;
  repeated N_Tile tiles = 2;
  N_ClaimedFrom from = 3;
}

message N_ClosedPart {
  repeated N_Tile closedPart = 1;
}

message N_Hand {
  optional N_ClosedPart closedPart = 1; // null for opponent hands
  repeated N_OpenSet openedPart = 2;
  int32 closedPartLength = 3;
}

enum N_MoveState {
  WAITING = 0;
  WAITING_FOR_DISCARD = 1;
  WAITING_FOR_CLAIM = 2;
}

message N_Move {
  N_MoveState moveState = 11;
  N_Tile lastDiscard = 12;
  int32 lastDiscardFrom = 13; // player index at the table
}

message N_CurrentRound {
  repeated N_Discard discards = 1;
  int32 tilesInWallCount = 2;
  repeated N_TileValue doraIndicators = 3;
  repeated bool currentRiichi = 4; // e-s-w-n
  N_Move moveState = 5;
  int32 diceValue = 6;
  // Filtered fields, existing only on server
  // Some of the data _can_ get to clients, but this should be filtered carefully
  repeated N_Hand hands = 7;
}

message N_GameState {
  repeated N_Player players = 1; // e-s-w-n
  repeated int32 currentScores = 2; // e-s-w-n
  int32 currentRound = 3;
  int32 currentRenchan = 4;
  N_RoundStatus roundStatus = 5;
  int32 riichiOnTable = 6; // riichi from previous rounds
}

message N_TableState {
  N_GameState game = 1;
  N_CurrentRound currentRound = 2;
}

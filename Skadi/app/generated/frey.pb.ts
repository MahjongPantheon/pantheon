// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: frey.proto
/* eslint-disable */

import type { ByteSource } from "protoscript";
import { BinaryReader, BinaryWriter } from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import * as atoms from "./atoms.pb";

//========================================//
//                 Types                  //
//========================================//

export interface Auth_RequestRegistration_Payload {
  email: string;
  title: string;
  password: string;
}

export interface Auth_RequestRegistration_Response {
  approvalCode: string;
}

export interface Auth_ApproveRegistration_Payload {
  approvalCode: string;
}

export interface Auth_ApproveRegistration_Response {
  personId: number;
}

export interface Auth_Authorize_Payload {
  email: string;
  password: string;
}

export interface Auth_Authorize_Response {
  personId: number;
  authToken: string;
}

export interface Auth_QuickAuthorize_Payload {
  personId: number;
  authToken: string;
}

export interface Auth_QuickAuthorize_Response {
  authSuccess: boolean;
}

export interface Auth_Me_Payload {
  personId: number;
  authToken: string;
}

export interface Auth_Me_Response {
  personId: number;
  country: string;
  city: string;
  email: string;
  phone: string;
  tenhouId: string;
  title: string;
  groups: number[];
}

export interface Auth_ChangePassword_Payload {
  email: string;
  password: string;
  newPassword: string;
}

export interface Auth_ChangePassword_Response {
  authToken: string;
}

export interface Auth_RequestResetPassword_Payload {
  email: string;
}

export interface Auth_RequestResetPassword_Response {
  resetToken: string;
}

export interface Auth_ApproveResetPassword_Payload {
  email: string;
  resetToken: string;
}

export interface Auth_ApproveResetPassword_Response {
  newTmpPassword: string;
}

export interface Access_GetAccessRules_Payload {
  personId: number;
  eventId: number;
}

export interface Access_GetAccessRules_Response {
  rules: atoms.AccessRules;
}

export interface Access_GetRuleValue_Payload {
  personId: number;
  eventId: number;
  ruleName: string;
}

export interface Access_GetRuleValue_Response {
  value: atoms.RuleValue;
}

export interface Access_GetEventAdmins_Payload {
  eventId: number;
}

export interface Access_GetEventAdmins_Response {
  admins: atoms.EventAdmin[];
}

export interface Access_GetSuperadminFlag_Payload {
  personId: number;
}

export interface Access_GetSuperadminFlag_Response {
  isAdmin: boolean;
}

export interface Access_GetOwnedEventIds_Payload {
  personId: number;
}

export interface Access_GetOwnedEventIds_Response {
  eventIds: number[];
}

export interface Access_GetRulesList_Payload {}

export interface Access_GetRulesList_Response {
  items: atoms.RuleListItem[];
}

export interface Access_GetAllEventRules_Payload {
  eventId: number;
}

export interface Access_GetAllEventRules_Response {
  personRules: atoms.EventRuleListItem[];
  groupRules: atoms.EventRuleListItem[];
}

export interface Access_GetPersonAccess_Payload {
  personId: number;
  eventId: number;
}

export interface Access_GetPersonAccess_Response {
  rules: atoms.AccessRules;
}

export interface Access_GetGroupAccess_Payload {
  groupId: number;
  eventId: number;
}

export interface Access_GetGroupAccess_Response {
  rules: atoms.AccessRules;
}

export interface Access_GetAllPersonAccess_Payload {
  personId: number;
}

export interface Access_GetAllPersonAccess_Response {
  rulesByEvent: Record<
    string,
    Access_GetAllPersonAccess_Response.RulesByEvent["value"] | undefined
  >;
}

export declare namespace Access_GetAllPersonAccess_Response {
  interface RulesByEvent {
    key: number;
    value: atoms.RuleListItemExMap;
  }
}

export interface Access_GetAllGroupAccess_Payload {
  groupId: number;
}

export interface Access_GetAllGroupAccess_Response {
  rulesByEvent: Record<
    string,
    Access_GetAllGroupAccess_Response.RulesByEvent["value"] | undefined
  >;
}

export declare namespace Access_GetAllGroupAccess_Response {
  interface RulesByEvent {
    key: number;
    value: atoms.RuleListItemExMap;
  }
}

export interface Access_AddRuleForPerson_Payload {
  ruleName: string;
  ruleValue: atoms.RuleValue;
  ruleType: string;
  personId: number;
  eventId: number;
}

export interface Access_AddRuleForPerson_Response {
  ruleId: number;
}

export interface Access_AddRuleForGroup_Payload {
  ruleName: string;
  ruleValue: atoms.RuleValue;
  ruleType: string;
  groupId: number;
  eventId: number;
}

export interface Access_AddRuleForGroup_Response {
  ruleId: number;
}

export interface Access_UpdateRuleForPerson_Payload {
  ruleId: number;
  ruleValue: atoms.RuleValue;
  ruleType: string;
}

export interface Access_UpdateRuleForGroup_Payload {
  ruleId: number;
  ruleValue: atoms.RuleValue;
  ruleType: string;
}

export interface Access_DeleteRuleForPerson_Payload {
  ruleId: number;
}

export interface Access_DeleteRuleForGroup_Payload {
  ruleId: number;
}

export interface Access_ClearAccessCache_Payload {
  personId: number;
  eventId: number;
}

export interface Access_AddSystemWideRuleForPerson_Payload {
  ruleName: string;
  ruleValue: atoms.RuleValue;
  ruleType: string;
  personId: number;
}

export interface Access_AddSystemWideRuleForPerson_Response {
  ruleId: number;
}

export interface Access_AddSystemWideRuleForGroup_Payload {
  ruleName: string;
  ruleValue: atoms.RuleValue;
  ruleType: string;
  groupId: number;
}

export interface Access_AddSystemWideRuleForGroup_Response {
  ruleId: number;
}

export interface Persons_CreateAccount_Payload {
  email: string;
  password: string;
  title: string;
  city: string;
  phone: string;
  tenhouId: string;
}

export interface Persons_CreateAccount_Response {
  personId: number;
}

export interface Persons_CreateGroup_Payload {
  title: string;
  description: string;
  color: string;
}

export interface Persons_CreateGroup_Response {
  groupId: number;
}

export interface Persons_UpdateGroup_Payload {
  groupId: number;
  title: string;
  description: string;
  color: string;
}

export interface Persons_DeleteGroup_Payload {
  groupId: number;
}

export interface Persons_AddPersonToGroup_Payload {
  personId: number;
  groupId: number;
}

export interface Persons_RemovePersonFromGroup_Payload {
  personId: number;
  groupId: number;
}

export interface Persons_GetPersonsOfGroup_Payload {
  groupId: number;
}

export interface Persons_GetPersonsOfGroup_Response {
  persons: atoms.Person[];
}

export interface Persons_GetGroupsOfPerson_Payload {
  personId: number;
}

export interface Persons_GetGroupsOfPerson_Response {
  groups: atoms.Group[];
}

export interface Persons_UpdatePersonalInfo_Payload {
  id: number;
  title: string;
  country: string;
  city: string;
  email: string;
  phone: string;
  tenhouId: string;
}

export interface Persons_GetPersonalInfo_Payload {
  ids: number[];
}

export interface Persons_GetPersonalInfo_Response {
  persons: atoms.PersonEx[];
}

export interface Persons_FindByTenhouIds_Payload {
  ids: string[];
}

export interface Persons_FindByTenhouIds_Response {
  persons: atoms.PersonEx[];
}

export interface Persons_FindByTitle_Payload {
  query: string;
}

export interface Persons_FindByTitle_Response {
  persons: atoms.Person[];
}

export interface Persons_GetGroups_Payload {
  ids: number[];
}

export interface Persons_GetGroups_Response {
  groups: atoms.Group[];
}

//========================================//
//          Frey Protobuf Client          //
//========================================//

export async function RequestRegistration(
  auth_RequestRegistration_Payload: Auth_RequestRegistration_Payload,
  config?: ClientConfiguration
): Promise<Auth_RequestRegistration_Response> {
  const response = await PBrequest(
    "/Common.Frey/RequestRegistration",
    Auth_RequestRegistration_Payload.encode(auth_RequestRegistration_Payload),
    config
  );
  return Auth_RequestRegistration_Response.decode(response);
}

export async function ApproveRegistration(
  auth_ApproveRegistration_Payload: Auth_ApproveRegistration_Payload,
  config?: ClientConfiguration
): Promise<Auth_ApproveRegistration_Response> {
  const response = await PBrequest(
    "/Common.Frey/ApproveRegistration",
    Auth_ApproveRegistration_Payload.encode(auth_ApproveRegistration_Payload),
    config
  );
  return Auth_ApproveRegistration_Response.decode(response);
}

export async function Authorize(
  auth_Authorize_Payload: Auth_Authorize_Payload,
  config?: ClientConfiguration
): Promise<Auth_Authorize_Response> {
  const response = await PBrequest(
    "/Common.Frey/Authorize",
    Auth_Authorize_Payload.encode(auth_Authorize_Payload),
    config
  );
  return Auth_Authorize_Response.decode(response);
}

export async function QuickAuthorize(
  auth_QuickAuthorize_Payload: Auth_QuickAuthorize_Payload,
  config?: ClientConfiguration
): Promise<Auth_QuickAuthorize_Response> {
  const response = await PBrequest(
    "/Common.Frey/QuickAuthorize",
    Auth_QuickAuthorize_Payload.encode(auth_QuickAuthorize_Payload),
    config
  );
  return Auth_QuickAuthorize_Response.decode(response);
}

export async function Me(
  auth_Me_Payload: Auth_Me_Payload,
  config?: ClientConfiguration
): Promise<Auth_Me_Response> {
  const response = await PBrequest(
    "/Common.Frey/Me",
    Auth_Me_Payload.encode(auth_Me_Payload),
    config
  );
  return Auth_Me_Response.decode(response);
}

export async function ChangePassword(
  auth_ChangePassword_Payload: Auth_ChangePassword_Payload,
  config?: ClientConfiguration
): Promise<Auth_ChangePassword_Response> {
  const response = await PBrequest(
    "/Common.Frey/ChangePassword",
    Auth_ChangePassword_Payload.encode(auth_ChangePassword_Payload),
    config
  );
  return Auth_ChangePassword_Response.decode(response);
}

export async function RequestResetPassword(
  auth_RequestResetPassword_Payload: Auth_RequestResetPassword_Payload,
  config?: ClientConfiguration
): Promise<Auth_RequestResetPassword_Response> {
  const response = await PBrequest(
    "/Common.Frey/RequestResetPassword",
    Auth_RequestResetPassword_Payload.encode(auth_RequestResetPassword_Payload),
    config
  );
  return Auth_RequestResetPassword_Response.decode(response);
}

export async function ApproveResetPassword(
  auth_ApproveResetPassword_Payload: Auth_ApproveResetPassword_Payload,
  config?: ClientConfiguration
): Promise<Auth_ApproveResetPassword_Response> {
  const response = await PBrequest(
    "/Common.Frey/ApproveResetPassword",
    Auth_ApproveResetPassword_Payload.encode(auth_ApproveResetPassword_Payload),
    config
  );
  return Auth_ApproveResetPassword_Response.decode(response);
}

export async function GetAccessRules(
  access_GetAccessRules_Payload: Access_GetAccessRules_Payload,
  config?: ClientConfiguration
): Promise<Access_GetAccessRules_Response> {
  const response = await PBrequest(
    "/Common.Frey/GetAccessRules",
    Access_GetAccessRules_Payload.encode(access_GetAccessRules_Payload),
    config
  );
  return Access_GetAccessRules_Response.decode(response);
}

export async function GetRuleValue(
  access_GetRuleValue_Payload: Access_GetRuleValue_Payload,
  config?: ClientConfiguration
): Promise<Access_GetRuleValue_Response> {
  const response = await PBrequest(
    "/Common.Frey/GetRuleValue",
    Access_GetRuleValue_Payload.encode(access_GetRuleValue_Payload),
    config
  );
  return Access_GetRuleValue_Response.decode(response);
}

export async function UpdatePersonalInfo(
  persons_UpdatePersonalInfo_Payload: Persons_UpdatePersonalInfo_Payload,
  config?: ClientConfiguration
): Promise<atoms.Generic_Success_Response> {
  const response = await PBrequest(
    "/Common.Frey/UpdatePersonalInfo",
    Persons_UpdatePersonalInfo_Payload.encode(
      persons_UpdatePersonalInfo_Payload
    ),
    config
  );
  return atoms.Generic_Success_Response.decode(response);
}

export async function GetPersonalInfo(
  persons_GetPersonalInfo_Payload: Persons_GetPersonalInfo_Payload,
  config?: ClientConfiguration
): Promise<Persons_GetPersonalInfo_Response> {
  const response = await PBrequest(
    "/Common.Frey/GetPersonalInfo",
    Persons_GetPersonalInfo_Payload.encode(persons_GetPersonalInfo_Payload),
    config
  );
  return Persons_GetPersonalInfo_Response.decode(response);
}

export async function FindByTenhouIds(
  persons_FindByTenhouIds_Payload: Persons_FindByTenhouIds_Payload,
  config?: ClientConfiguration
): Promise<Persons_FindByTenhouIds_Response> {
  const response = await PBrequest(
    "/Common.Frey/FindByTenhouIds",
    Persons_FindByTenhouIds_Payload.encode(persons_FindByTenhouIds_Payload),
    config
  );
  return Persons_FindByTenhouIds_Response.decode(response);
}

export async function FindByTitle(
  persons_FindByTitle_Payload: Persons_FindByTitle_Payload,
  config?: ClientConfiguration
): Promise<Persons_FindByTitle_Response> {
  const response = await PBrequest(
    "/Common.Frey/FindByTitle",
    Persons_FindByTitle_Payload.encode(persons_FindByTitle_Payload),
    config
  );
  return Persons_FindByTitle_Response.decode(response);
}

export async function GetGroups(
  persons_GetGroups_Payload: Persons_GetGroups_Payload,
  config?: ClientConfiguration
): Promise<Persons_GetGroups_Response> {
  const response = await PBrequest(
    "/Common.Frey/GetGroups",
    Persons_GetGroups_Payload.encode(persons_GetGroups_Payload),
    config
  );
  return Persons_GetGroups_Response.decode(response);
}

export async function GetEventAdmins(
  access_GetEventAdmins_Payload: Access_GetEventAdmins_Payload,
  config?: ClientConfiguration
): Promise<Access_GetEventAdmins_Response> {
  const response = await PBrequest(
    "/Common.Frey/GetEventAdmins",
    Access_GetEventAdmins_Payload.encode(access_GetEventAdmins_Payload),
    config
  );
  return Access_GetEventAdmins_Response.decode(response);
}

/**
 * admin
 */
export async function GetSuperadminFlag(
  access_GetSuperadminFlag_Payload: Access_GetSuperadminFlag_Payload,
  config?: ClientConfiguration
): Promise<Access_GetSuperadminFlag_Response> {
  const response = await PBrequest(
    "/Common.Frey/GetSuperadminFlag",
    Access_GetSuperadminFlag_Payload.encode(access_GetSuperadminFlag_Payload),
    config
  );
  return Access_GetSuperadminFlag_Response.decode(response);
}

export async function GetOwnedEventIds(
  access_GetOwnedEventIds_Payload: Access_GetOwnedEventIds_Payload,
  config?: ClientConfiguration
): Promise<Access_GetOwnedEventIds_Response> {
  const response = await PBrequest(
    "/Common.Frey/GetOwnedEventIds",
    Access_GetOwnedEventIds_Payload.encode(access_GetOwnedEventIds_Payload),
    config
  );
  return Access_GetOwnedEventIds_Response.decode(response);
}

export async function GetRulesList(
  access_GetRulesList_Payload: Access_GetRulesList_Payload,
  config?: ClientConfiguration
): Promise<Access_GetRulesList_Response> {
  const response = await PBrequest(
    "/Common.Frey/GetRulesList",
    Access_GetRulesList_Payload.encode(access_GetRulesList_Payload),
    config
  );
  return Access_GetRulesList_Response.decode(response);
}

export async function GetAllEventRules(
  access_GetAllEventRules_Payload: Access_GetAllEventRules_Payload,
  config?: ClientConfiguration
): Promise<Access_GetAllEventRules_Response> {
  const response = await PBrequest(
    "/Common.Frey/GetAllEventRules",
    Access_GetAllEventRules_Payload.encode(access_GetAllEventRules_Payload),
    config
  );
  return Access_GetAllEventRules_Response.decode(response);
}

export async function GetPersonAccess(
  access_GetPersonAccess_Payload: Access_GetPersonAccess_Payload,
  config?: ClientConfiguration
): Promise<Access_GetPersonAccess_Response> {
  const response = await PBrequest(
    "/Common.Frey/GetPersonAccess",
    Access_GetPersonAccess_Payload.encode(access_GetPersonAccess_Payload),
    config
  );
  return Access_GetPersonAccess_Response.decode(response);
}

export async function GetGroupAccess(
  access_GetGroupAccess_Payload: Access_GetGroupAccess_Payload,
  config?: ClientConfiguration
): Promise<Access_GetGroupAccess_Response> {
  const response = await PBrequest(
    "/Common.Frey/GetGroupAccess",
    Access_GetGroupAccess_Payload.encode(access_GetGroupAccess_Payload),
    config
  );
  return Access_GetGroupAccess_Response.decode(response);
}

export async function GetAllPersonAccess(
  access_GetAllPersonAccess_Payload: Access_GetAllPersonAccess_Payload,
  config?: ClientConfiguration
): Promise<Access_GetAllPersonAccess_Response> {
  const response = await PBrequest(
    "/Common.Frey/GetAllPersonAccess",
    Access_GetAllPersonAccess_Payload.encode(access_GetAllPersonAccess_Payload),
    config
  );
  return Access_GetAllPersonAccess_Response.decode(response);
}

export async function GetAllGroupAccess(
  access_GetAllGroupAccess_Payload: Access_GetAllGroupAccess_Payload,
  config?: ClientConfiguration
): Promise<Access_GetAllGroupAccess_Response> {
  const response = await PBrequest(
    "/Common.Frey/GetAllGroupAccess",
    Access_GetAllGroupAccess_Payload.encode(access_GetAllGroupAccess_Payload),
    config
  );
  return Access_GetAllGroupAccess_Response.decode(response);
}

export async function AddRuleForPerson(
  access_AddRuleForPerson_Payload: Access_AddRuleForPerson_Payload,
  config?: ClientConfiguration
): Promise<Access_AddRuleForPerson_Response> {
  const response = await PBrequest(
    "/Common.Frey/AddRuleForPerson",
    Access_AddRuleForPerson_Payload.encode(access_AddRuleForPerson_Payload),
    config
  );
  return Access_AddRuleForPerson_Response.decode(response);
}

export async function AddRuleForGroup(
  access_AddRuleForGroup_Payload: Access_AddRuleForGroup_Payload,
  config?: ClientConfiguration
): Promise<Access_AddRuleForGroup_Response> {
  const response = await PBrequest(
    "/Common.Frey/AddRuleForGroup",
    Access_AddRuleForGroup_Payload.encode(access_AddRuleForGroup_Payload),
    config
  );
  return Access_AddRuleForGroup_Response.decode(response);
}

export async function UpdateRuleForPerson(
  access_UpdateRuleForPerson_Payload: Access_UpdateRuleForPerson_Payload,
  config?: ClientConfiguration
): Promise<atoms.Generic_Success_Response> {
  const response = await PBrequest(
    "/Common.Frey/UpdateRuleForPerson",
    Access_UpdateRuleForPerson_Payload.encode(
      access_UpdateRuleForPerson_Payload
    ),
    config
  );
  return atoms.Generic_Success_Response.decode(response);
}

export async function UpdateRuleForGroup(
  access_UpdateRuleForGroup_Payload: Access_UpdateRuleForGroup_Payload,
  config?: ClientConfiguration
): Promise<atoms.Generic_Success_Response> {
  const response = await PBrequest(
    "/Common.Frey/UpdateRuleForGroup",
    Access_UpdateRuleForGroup_Payload.encode(access_UpdateRuleForGroup_Payload),
    config
  );
  return atoms.Generic_Success_Response.decode(response);
}

export async function DeleteRuleForPerson(
  access_DeleteRuleForPerson_Payload: Access_DeleteRuleForPerson_Payload,
  config?: ClientConfiguration
): Promise<atoms.Generic_Success_Response> {
  const response = await PBrequest(
    "/Common.Frey/DeleteRuleForPerson",
    Access_DeleteRuleForPerson_Payload.encode(
      access_DeleteRuleForPerson_Payload
    ),
    config
  );
  return atoms.Generic_Success_Response.decode(response);
}

export async function DeleteRuleForGroup(
  access_DeleteRuleForGroup_Payload: Access_DeleteRuleForGroup_Payload,
  config?: ClientConfiguration
): Promise<atoms.Generic_Success_Response> {
  const response = await PBrequest(
    "/Common.Frey/DeleteRuleForGroup",
    Access_DeleteRuleForGroup_Payload.encode(access_DeleteRuleForGroup_Payload),
    config
  );
  return atoms.Generic_Success_Response.decode(response);
}

export async function ClearAccessCache(
  access_ClearAccessCache_Payload: Access_ClearAccessCache_Payload,
  config?: ClientConfiguration
): Promise<atoms.Generic_Success_Response> {
  const response = await PBrequest(
    "/Common.Frey/ClearAccessCache",
    Access_ClearAccessCache_Payload.encode(access_ClearAccessCache_Payload),
    config
  );
  return atoms.Generic_Success_Response.decode(response);
}

export async function CreateAccount(
  persons_CreateAccount_Payload: Persons_CreateAccount_Payload,
  config?: ClientConfiguration
): Promise<Persons_CreateAccount_Response> {
  const response = await PBrequest(
    "/Common.Frey/CreateAccount",
    Persons_CreateAccount_Payload.encode(persons_CreateAccount_Payload),
    config
  );
  return Persons_CreateAccount_Response.decode(response);
}

export async function CreateGroup(
  persons_CreateGroup_Payload: Persons_CreateGroup_Payload,
  config?: ClientConfiguration
): Promise<Persons_CreateGroup_Response> {
  const response = await PBrequest(
    "/Common.Frey/CreateGroup",
    Persons_CreateGroup_Payload.encode(persons_CreateGroup_Payload),
    config
  );
  return Persons_CreateGroup_Response.decode(response);
}

export async function UpdateGroup(
  persons_UpdateGroup_Payload: Persons_UpdateGroup_Payload,
  config?: ClientConfiguration
): Promise<atoms.Generic_Success_Response> {
  const response = await PBrequest(
    "/Common.Frey/UpdateGroup",
    Persons_UpdateGroup_Payload.encode(persons_UpdateGroup_Payload),
    config
  );
  return atoms.Generic_Success_Response.decode(response);
}

export async function DeleteGroup(
  persons_DeleteGroup_Payload: Persons_DeleteGroup_Payload,
  config?: ClientConfiguration
): Promise<atoms.Generic_Success_Response> {
  const response = await PBrequest(
    "/Common.Frey/DeleteGroup",
    Persons_DeleteGroup_Payload.encode(persons_DeleteGroup_Payload),
    config
  );
  return atoms.Generic_Success_Response.decode(response);
}

export async function AddPersonToGroup(
  persons_AddPersonToGroup_Payload: Persons_AddPersonToGroup_Payload,
  config?: ClientConfiguration
): Promise<atoms.Generic_Success_Response> {
  const response = await PBrequest(
    "/Common.Frey/AddPersonToGroup",
    Persons_AddPersonToGroup_Payload.encode(persons_AddPersonToGroup_Payload),
    config
  );
  return atoms.Generic_Success_Response.decode(response);
}

export async function RemovePersonFromGroup(
  persons_RemovePersonFromGroup_Payload: Persons_RemovePersonFromGroup_Payload,
  config?: ClientConfiguration
): Promise<atoms.Generic_Success_Response> {
  const response = await PBrequest(
    "/Common.Frey/RemovePersonFromGroup",
    Persons_RemovePersonFromGroup_Payload.encode(
      persons_RemovePersonFromGroup_Payload
    ),
    config
  );
  return atoms.Generic_Success_Response.decode(response);
}

export async function GetPersonsOfGroup(
  persons_GetPersonsOfGroup_Payload: Persons_GetPersonsOfGroup_Payload,
  config?: ClientConfiguration
): Promise<Persons_GetPersonsOfGroup_Response> {
  const response = await PBrequest(
    "/Common.Frey/GetPersonsOfGroup",
    Persons_GetPersonsOfGroup_Payload.encode(persons_GetPersonsOfGroup_Payload),
    config
  );
  return Persons_GetPersonsOfGroup_Response.decode(response);
}

export async function GetGroupsOfPerson(
  persons_GetGroupsOfPerson_Payload: Persons_GetGroupsOfPerson_Payload,
  config?: ClientConfiguration
): Promise<Persons_GetGroupsOfPerson_Response> {
  const response = await PBrequest(
    "/Common.Frey/GetGroupsOfPerson",
    Persons_GetGroupsOfPerson_Payload.encode(persons_GetGroupsOfPerson_Payload),
    config
  );
  return Persons_GetGroupsOfPerson_Response.decode(response);
}

/**
 * superadmin: this should be covered with some bootstrap authenthication, TODO
 */
export async function AddSystemWideRuleForPerson(
  access_AddSystemWideRuleForPerson_Payload: Access_AddSystemWideRuleForPerson_Payload,
  config?: ClientConfiguration
): Promise<Access_AddSystemWideRuleForPerson_Response> {
  const response = await PBrequest(
    "/Common.Frey/AddSystemWideRuleForPerson",
    Access_AddSystemWideRuleForPerson_Payload.encode(
      access_AddSystemWideRuleForPerson_Payload
    ),
    config
  );
  return Access_AddSystemWideRuleForPerson_Response.decode(response);
}

export async function AddSystemWideRuleForGroup(
  access_AddSystemWideRuleForGroup_Payload: Access_AddSystemWideRuleForGroup_Payload,
  config?: ClientConfiguration
): Promise<Access_AddSystemWideRuleForGroup_Response> {
  const response = await PBrequest(
    "/Common.Frey/AddSystemWideRuleForGroup",
    Access_AddSystemWideRuleForGroup_Payload.encode(
      access_AddSystemWideRuleForGroup_Payload
    ),
    config
  );
  return Access_AddSystemWideRuleForGroup_Response.decode(response);
}

//========================================//
//            Frey JSON Client            //
//========================================//

export async function RequestRegistrationJSON(
  auth_RequestRegistration_Payload: Auth_RequestRegistration_Payload,
  config?: ClientConfiguration
): Promise<Auth_RequestRegistration_Response> {
  const response = await JSONrequest(
    "/Common.Frey/RequestRegistration",
    Auth_RequestRegistration_PayloadJSON.encode(
      auth_RequestRegistration_Payload
    ),
    config
  );
  return Auth_RequestRegistration_ResponseJSON.decode(response);
}

export async function ApproveRegistrationJSON(
  auth_ApproveRegistration_Payload: Auth_ApproveRegistration_Payload,
  config?: ClientConfiguration
): Promise<Auth_ApproveRegistration_Response> {
  const response = await JSONrequest(
    "/Common.Frey/ApproveRegistration",
    Auth_ApproveRegistration_PayloadJSON.encode(
      auth_ApproveRegistration_Payload
    ),
    config
  );
  return Auth_ApproveRegistration_ResponseJSON.decode(response);
}

export async function AuthorizeJSON(
  auth_Authorize_Payload: Auth_Authorize_Payload,
  config?: ClientConfiguration
): Promise<Auth_Authorize_Response> {
  const response = await JSONrequest(
    "/Common.Frey/Authorize",
    Auth_Authorize_PayloadJSON.encode(auth_Authorize_Payload),
    config
  );
  return Auth_Authorize_ResponseJSON.decode(response);
}

export async function QuickAuthorizeJSON(
  auth_QuickAuthorize_Payload: Auth_QuickAuthorize_Payload,
  config?: ClientConfiguration
): Promise<Auth_QuickAuthorize_Response> {
  const response = await JSONrequest(
    "/Common.Frey/QuickAuthorize",
    Auth_QuickAuthorize_PayloadJSON.encode(auth_QuickAuthorize_Payload),
    config
  );
  return Auth_QuickAuthorize_ResponseJSON.decode(response);
}

export async function MeJSON(
  auth_Me_Payload: Auth_Me_Payload,
  config?: ClientConfiguration
): Promise<Auth_Me_Response> {
  const response = await JSONrequest(
    "/Common.Frey/Me",
    Auth_Me_PayloadJSON.encode(auth_Me_Payload),
    config
  );
  return Auth_Me_ResponseJSON.decode(response);
}

export async function ChangePasswordJSON(
  auth_ChangePassword_Payload: Auth_ChangePassword_Payload,
  config?: ClientConfiguration
): Promise<Auth_ChangePassword_Response> {
  const response = await JSONrequest(
    "/Common.Frey/ChangePassword",
    Auth_ChangePassword_PayloadJSON.encode(auth_ChangePassword_Payload),
    config
  );
  return Auth_ChangePassword_ResponseJSON.decode(response);
}

export async function RequestResetPasswordJSON(
  auth_RequestResetPassword_Payload: Auth_RequestResetPassword_Payload,
  config?: ClientConfiguration
): Promise<Auth_RequestResetPassword_Response> {
  const response = await JSONrequest(
    "/Common.Frey/RequestResetPassword",
    Auth_RequestResetPassword_PayloadJSON.encode(
      auth_RequestResetPassword_Payload
    ),
    config
  );
  return Auth_RequestResetPassword_ResponseJSON.decode(response);
}

export async function ApproveResetPasswordJSON(
  auth_ApproveResetPassword_Payload: Auth_ApproveResetPassword_Payload,
  config?: ClientConfiguration
): Promise<Auth_ApproveResetPassword_Response> {
  const response = await JSONrequest(
    "/Common.Frey/ApproveResetPassword",
    Auth_ApproveResetPassword_PayloadJSON.encode(
      auth_ApproveResetPassword_Payload
    ),
    config
  );
  return Auth_ApproveResetPassword_ResponseJSON.decode(response);
}

export async function GetAccessRulesJSON(
  access_GetAccessRules_Payload: Access_GetAccessRules_Payload,
  config?: ClientConfiguration
): Promise<Access_GetAccessRules_Response> {
  const response = await JSONrequest(
    "/Common.Frey/GetAccessRules",
    Access_GetAccessRules_PayloadJSON.encode(access_GetAccessRules_Payload),
    config
  );
  return Access_GetAccessRules_ResponseJSON.decode(response);
}

export async function GetRuleValueJSON(
  access_GetRuleValue_Payload: Access_GetRuleValue_Payload,
  config?: ClientConfiguration
): Promise<Access_GetRuleValue_Response> {
  const response = await JSONrequest(
    "/Common.Frey/GetRuleValue",
    Access_GetRuleValue_PayloadJSON.encode(access_GetRuleValue_Payload),
    config
  );
  return Access_GetRuleValue_ResponseJSON.decode(response);
}

export async function UpdatePersonalInfoJSON(
  persons_UpdatePersonalInfo_Payload: Persons_UpdatePersonalInfo_Payload,
  config?: ClientConfiguration
): Promise<atoms.Generic_Success_Response> {
  const response = await JSONrequest(
    "/Common.Frey/UpdatePersonalInfo",
    Persons_UpdatePersonalInfo_PayloadJSON.encode(
      persons_UpdatePersonalInfo_Payload
    ),
    config
  );
  return atoms.Generic_Success_ResponseJSON.decode(response);
}

export async function GetPersonalInfoJSON(
  persons_GetPersonalInfo_Payload: Persons_GetPersonalInfo_Payload,
  config?: ClientConfiguration
): Promise<Persons_GetPersonalInfo_Response> {
  const response = await JSONrequest(
    "/Common.Frey/GetPersonalInfo",
    Persons_GetPersonalInfo_PayloadJSON.encode(persons_GetPersonalInfo_Payload),
    config
  );
  return Persons_GetPersonalInfo_ResponseJSON.decode(response);
}

export async function FindByTenhouIdsJSON(
  persons_FindByTenhouIds_Payload: Persons_FindByTenhouIds_Payload,
  config?: ClientConfiguration
): Promise<Persons_FindByTenhouIds_Response> {
  const response = await JSONrequest(
    "/Common.Frey/FindByTenhouIds",
    Persons_FindByTenhouIds_PayloadJSON.encode(persons_FindByTenhouIds_Payload),
    config
  );
  return Persons_FindByTenhouIds_ResponseJSON.decode(response);
}

export async function FindByTitleJSON(
  persons_FindByTitle_Payload: Persons_FindByTitle_Payload,
  config?: ClientConfiguration
): Promise<Persons_FindByTitle_Response> {
  const response = await JSONrequest(
    "/Common.Frey/FindByTitle",
    Persons_FindByTitle_PayloadJSON.encode(persons_FindByTitle_Payload),
    config
  );
  return Persons_FindByTitle_ResponseJSON.decode(response);
}

export async function GetGroupsJSON(
  persons_GetGroups_Payload: Persons_GetGroups_Payload,
  config?: ClientConfiguration
): Promise<Persons_GetGroups_Response> {
  const response = await JSONrequest(
    "/Common.Frey/GetGroups",
    Persons_GetGroups_PayloadJSON.encode(persons_GetGroups_Payload),
    config
  );
  return Persons_GetGroups_ResponseJSON.decode(response);
}

export async function GetEventAdminsJSON(
  access_GetEventAdmins_Payload: Access_GetEventAdmins_Payload,
  config?: ClientConfiguration
): Promise<Access_GetEventAdmins_Response> {
  const response = await JSONrequest(
    "/Common.Frey/GetEventAdmins",
    Access_GetEventAdmins_PayloadJSON.encode(access_GetEventAdmins_Payload),
    config
  );
  return Access_GetEventAdmins_ResponseJSON.decode(response);
}

/**
 * admin
 */
export async function GetSuperadminFlagJSON(
  access_GetSuperadminFlag_Payload: Access_GetSuperadminFlag_Payload,
  config?: ClientConfiguration
): Promise<Access_GetSuperadminFlag_Response> {
  const response = await JSONrequest(
    "/Common.Frey/GetSuperadminFlag",
    Access_GetSuperadminFlag_PayloadJSON.encode(
      access_GetSuperadminFlag_Payload
    ),
    config
  );
  return Access_GetSuperadminFlag_ResponseJSON.decode(response);
}

export async function GetOwnedEventIdsJSON(
  access_GetOwnedEventIds_Payload: Access_GetOwnedEventIds_Payload,
  config?: ClientConfiguration
): Promise<Access_GetOwnedEventIds_Response> {
  const response = await JSONrequest(
    "/Common.Frey/GetOwnedEventIds",
    Access_GetOwnedEventIds_PayloadJSON.encode(access_GetOwnedEventIds_Payload),
    config
  );
  return Access_GetOwnedEventIds_ResponseJSON.decode(response);
}

export async function GetRulesListJSON(
  access_GetRulesList_Payload: Access_GetRulesList_Payload,
  config?: ClientConfiguration
): Promise<Access_GetRulesList_Response> {
  const response = await JSONrequest(
    "/Common.Frey/GetRulesList",
    Access_GetRulesList_PayloadJSON.encode(access_GetRulesList_Payload),
    config
  );
  return Access_GetRulesList_ResponseJSON.decode(response);
}

export async function GetAllEventRulesJSON(
  access_GetAllEventRules_Payload: Access_GetAllEventRules_Payload,
  config?: ClientConfiguration
): Promise<Access_GetAllEventRules_Response> {
  const response = await JSONrequest(
    "/Common.Frey/GetAllEventRules",
    Access_GetAllEventRules_PayloadJSON.encode(access_GetAllEventRules_Payload),
    config
  );
  return Access_GetAllEventRules_ResponseJSON.decode(response);
}

export async function GetPersonAccessJSON(
  access_GetPersonAccess_Payload: Access_GetPersonAccess_Payload,
  config?: ClientConfiguration
): Promise<Access_GetPersonAccess_Response> {
  const response = await JSONrequest(
    "/Common.Frey/GetPersonAccess",
    Access_GetPersonAccess_PayloadJSON.encode(access_GetPersonAccess_Payload),
    config
  );
  return Access_GetPersonAccess_ResponseJSON.decode(response);
}

export async function GetGroupAccessJSON(
  access_GetGroupAccess_Payload: Access_GetGroupAccess_Payload,
  config?: ClientConfiguration
): Promise<Access_GetGroupAccess_Response> {
  const response = await JSONrequest(
    "/Common.Frey/GetGroupAccess",
    Access_GetGroupAccess_PayloadJSON.encode(access_GetGroupAccess_Payload),
    config
  );
  return Access_GetGroupAccess_ResponseJSON.decode(response);
}

export async function GetAllPersonAccessJSON(
  access_GetAllPersonAccess_Payload: Access_GetAllPersonAccess_Payload,
  config?: ClientConfiguration
): Promise<Access_GetAllPersonAccess_Response> {
  const response = await JSONrequest(
    "/Common.Frey/GetAllPersonAccess",
    Access_GetAllPersonAccess_PayloadJSON.encode(
      access_GetAllPersonAccess_Payload
    ),
    config
  );
  return Access_GetAllPersonAccess_ResponseJSON.decode(response);
}

export async function GetAllGroupAccessJSON(
  access_GetAllGroupAccess_Payload: Access_GetAllGroupAccess_Payload,
  config?: ClientConfiguration
): Promise<Access_GetAllGroupAccess_Response> {
  const response = await JSONrequest(
    "/Common.Frey/GetAllGroupAccess",
    Access_GetAllGroupAccess_PayloadJSON.encode(
      access_GetAllGroupAccess_Payload
    ),
    config
  );
  return Access_GetAllGroupAccess_ResponseJSON.decode(response);
}

export async function AddRuleForPersonJSON(
  access_AddRuleForPerson_Payload: Access_AddRuleForPerson_Payload,
  config?: ClientConfiguration
): Promise<Access_AddRuleForPerson_Response> {
  const response = await JSONrequest(
    "/Common.Frey/AddRuleForPerson",
    Access_AddRuleForPerson_PayloadJSON.encode(access_AddRuleForPerson_Payload),
    config
  );
  return Access_AddRuleForPerson_ResponseJSON.decode(response);
}

export async function AddRuleForGroupJSON(
  access_AddRuleForGroup_Payload: Access_AddRuleForGroup_Payload,
  config?: ClientConfiguration
): Promise<Access_AddRuleForGroup_Response> {
  const response = await JSONrequest(
    "/Common.Frey/AddRuleForGroup",
    Access_AddRuleForGroup_PayloadJSON.encode(access_AddRuleForGroup_Payload),
    config
  );
  return Access_AddRuleForGroup_ResponseJSON.decode(response);
}

export async function UpdateRuleForPersonJSON(
  access_UpdateRuleForPerson_Payload: Access_UpdateRuleForPerson_Payload,
  config?: ClientConfiguration
): Promise<atoms.Generic_Success_Response> {
  const response = await JSONrequest(
    "/Common.Frey/UpdateRuleForPerson",
    Access_UpdateRuleForPerson_PayloadJSON.encode(
      access_UpdateRuleForPerson_Payload
    ),
    config
  );
  return atoms.Generic_Success_ResponseJSON.decode(response);
}

export async function UpdateRuleForGroupJSON(
  access_UpdateRuleForGroup_Payload: Access_UpdateRuleForGroup_Payload,
  config?: ClientConfiguration
): Promise<atoms.Generic_Success_Response> {
  const response = await JSONrequest(
    "/Common.Frey/UpdateRuleForGroup",
    Access_UpdateRuleForGroup_PayloadJSON.encode(
      access_UpdateRuleForGroup_Payload
    ),
    config
  );
  return atoms.Generic_Success_ResponseJSON.decode(response);
}

export async function DeleteRuleForPersonJSON(
  access_DeleteRuleForPerson_Payload: Access_DeleteRuleForPerson_Payload,
  config?: ClientConfiguration
): Promise<atoms.Generic_Success_Response> {
  const response = await JSONrequest(
    "/Common.Frey/DeleteRuleForPerson",
    Access_DeleteRuleForPerson_PayloadJSON.encode(
      access_DeleteRuleForPerson_Payload
    ),
    config
  );
  return atoms.Generic_Success_ResponseJSON.decode(response);
}

export async function DeleteRuleForGroupJSON(
  access_DeleteRuleForGroup_Payload: Access_DeleteRuleForGroup_Payload,
  config?: ClientConfiguration
): Promise<atoms.Generic_Success_Response> {
  const response = await JSONrequest(
    "/Common.Frey/DeleteRuleForGroup",
    Access_DeleteRuleForGroup_PayloadJSON.encode(
      access_DeleteRuleForGroup_Payload
    ),
    config
  );
  return atoms.Generic_Success_ResponseJSON.decode(response);
}

export async function ClearAccessCacheJSON(
  access_ClearAccessCache_Payload: Access_ClearAccessCache_Payload,
  config?: ClientConfiguration
): Promise<atoms.Generic_Success_Response> {
  const response = await JSONrequest(
    "/Common.Frey/ClearAccessCache",
    Access_ClearAccessCache_PayloadJSON.encode(access_ClearAccessCache_Payload),
    config
  );
  return atoms.Generic_Success_ResponseJSON.decode(response);
}

export async function CreateAccountJSON(
  persons_CreateAccount_Payload: Persons_CreateAccount_Payload,
  config?: ClientConfiguration
): Promise<Persons_CreateAccount_Response> {
  const response = await JSONrequest(
    "/Common.Frey/CreateAccount",
    Persons_CreateAccount_PayloadJSON.encode(persons_CreateAccount_Payload),
    config
  );
  return Persons_CreateAccount_ResponseJSON.decode(response);
}

export async function CreateGroupJSON(
  persons_CreateGroup_Payload: Persons_CreateGroup_Payload,
  config?: ClientConfiguration
): Promise<Persons_CreateGroup_Response> {
  const response = await JSONrequest(
    "/Common.Frey/CreateGroup",
    Persons_CreateGroup_PayloadJSON.encode(persons_CreateGroup_Payload),
    config
  );
  return Persons_CreateGroup_ResponseJSON.decode(response);
}

export async function UpdateGroupJSON(
  persons_UpdateGroup_Payload: Persons_UpdateGroup_Payload,
  config?: ClientConfiguration
): Promise<atoms.Generic_Success_Response> {
  const response = await JSONrequest(
    "/Common.Frey/UpdateGroup",
    Persons_UpdateGroup_PayloadJSON.encode(persons_UpdateGroup_Payload),
    config
  );
  return atoms.Generic_Success_ResponseJSON.decode(response);
}

export async function DeleteGroupJSON(
  persons_DeleteGroup_Payload: Persons_DeleteGroup_Payload,
  config?: ClientConfiguration
): Promise<atoms.Generic_Success_Response> {
  const response = await JSONrequest(
    "/Common.Frey/DeleteGroup",
    Persons_DeleteGroup_PayloadJSON.encode(persons_DeleteGroup_Payload),
    config
  );
  return atoms.Generic_Success_ResponseJSON.decode(response);
}

export async function AddPersonToGroupJSON(
  persons_AddPersonToGroup_Payload: Persons_AddPersonToGroup_Payload,
  config?: ClientConfiguration
): Promise<atoms.Generic_Success_Response> {
  const response = await JSONrequest(
    "/Common.Frey/AddPersonToGroup",
    Persons_AddPersonToGroup_PayloadJSON.encode(
      persons_AddPersonToGroup_Payload
    ),
    config
  );
  return atoms.Generic_Success_ResponseJSON.decode(response);
}

export async function RemovePersonFromGroupJSON(
  persons_RemovePersonFromGroup_Payload: Persons_RemovePersonFromGroup_Payload,
  config?: ClientConfiguration
): Promise<atoms.Generic_Success_Response> {
  const response = await JSONrequest(
    "/Common.Frey/RemovePersonFromGroup",
    Persons_RemovePersonFromGroup_PayloadJSON.encode(
      persons_RemovePersonFromGroup_Payload
    ),
    config
  );
  return atoms.Generic_Success_ResponseJSON.decode(response);
}

export async function GetPersonsOfGroupJSON(
  persons_GetPersonsOfGroup_Payload: Persons_GetPersonsOfGroup_Payload,
  config?: ClientConfiguration
): Promise<Persons_GetPersonsOfGroup_Response> {
  const response = await JSONrequest(
    "/Common.Frey/GetPersonsOfGroup",
    Persons_GetPersonsOfGroup_PayloadJSON.encode(
      persons_GetPersonsOfGroup_Payload
    ),
    config
  );
  return Persons_GetPersonsOfGroup_ResponseJSON.decode(response);
}

export async function GetGroupsOfPersonJSON(
  persons_GetGroupsOfPerson_Payload: Persons_GetGroupsOfPerson_Payload,
  config?: ClientConfiguration
): Promise<Persons_GetGroupsOfPerson_Response> {
  const response = await JSONrequest(
    "/Common.Frey/GetGroupsOfPerson",
    Persons_GetGroupsOfPerson_PayloadJSON.encode(
      persons_GetGroupsOfPerson_Payload
    ),
    config
  );
  return Persons_GetGroupsOfPerson_ResponseJSON.decode(response);
}

/**
 * superadmin: this should be covered with some bootstrap authenthication, TODO
 */
export async function AddSystemWideRuleForPersonJSON(
  access_AddSystemWideRuleForPerson_Payload: Access_AddSystemWideRuleForPerson_Payload,
  config?: ClientConfiguration
): Promise<Access_AddSystemWideRuleForPerson_Response> {
  const response = await JSONrequest(
    "/Common.Frey/AddSystemWideRuleForPerson",
    Access_AddSystemWideRuleForPerson_PayloadJSON.encode(
      access_AddSystemWideRuleForPerson_Payload
    ),
    config
  );
  return Access_AddSystemWideRuleForPerson_ResponseJSON.decode(response);
}

export async function AddSystemWideRuleForGroupJSON(
  access_AddSystemWideRuleForGroup_Payload: Access_AddSystemWideRuleForGroup_Payload,
  config?: ClientConfiguration
): Promise<Access_AddSystemWideRuleForGroup_Response> {
  const response = await JSONrequest(
    "/Common.Frey/AddSystemWideRuleForGroup",
    Access_AddSystemWideRuleForGroup_PayloadJSON.encode(
      access_AddSystemWideRuleForGroup_Payload
    ),
    config
  );
  return Access_AddSystemWideRuleForGroup_ResponseJSON.decode(response);
}

//========================================//
//                  Frey                  //
//========================================//

export interface Frey<Context = unknown> {
  RequestRegistration: (
    auth_RequestRegistration_Payload: Auth_RequestRegistration_Payload,
    context: Context
  ) =>
    | Promise<Auth_RequestRegistration_Response>
    | Auth_RequestRegistration_Response;
  ApproveRegistration: (
    auth_ApproveRegistration_Payload: Auth_ApproveRegistration_Payload,
    context: Context
  ) =>
    | Promise<Auth_ApproveRegistration_Response>
    | Auth_ApproveRegistration_Response;
  Authorize: (
    auth_Authorize_Payload: Auth_Authorize_Payload,
    context: Context
  ) => Promise<Auth_Authorize_Response> | Auth_Authorize_Response;
  QuickAuthorize: (
    auth_QuickAuthorize_Payload: Auth_QuickAuthorize_Payload,
    context: Context
  ) => Promise<Auth_QuickAuthorize_Response> | Auth_QuickAuthorize_Response;
  Me: (
    auth_Me_Payload: Auth_Me_Payload,
    context: Context
  ) => Promise<Auth_Me_Response> | Auth_Me_Response;
  ChangePassword: (
    auth_ChangePassword_Payload: Auth_ChangePassword_Payload,
    context: Context
  ) => Promise<Auth_ChangePassword_Response> | Auth_ChangePassword_Response;
  RequestResetPassword: (
    auth_RequestResetPassword_Payload: Auth_RequestResetPassword_Payload,
    context: Context
  ) =>
    | Promise<Auth_RequestResetPassword_Response>
    | Auth_RequestResetPassword_Response;
  ApproveResetPassword: (
    auth_ApproveResetPassword_Payload: Auth_ApproveResetPassword_Payload,
    context: Context
  ) =>
    | Promise<Auth_ApproveResetPassword_Response>
    | Auth_ApproveResetPassword_Response;
  GetAccessRules: (
    access_GetAccessRules_Payload: Access_GetAccessRules_Payload,
    context: Context
  ) => Promise<Access_GetAccessRules_Response> | Access_GetAccessRules_Response;
  GetRuleValue: (
    access_GetRuleValue_Payload: Access_GetRuleValue_Payload,
    context: Context
  ) => Promise<Access_GetRuleValue_Response> | Access_GetRuleValue_Response;
  UpdatePersonalInfo: (
    persons_UpdatePersonalInfo_Payload: Persons_UpdatePersonalInfo_Payload,
    context: Context
  ) => Promise<atoms.Generic_Success_Response> | atoms.Generic_Success_Response;
  GetPersonalInfo: (
    persons_GetPersonalInfo_Payload: Persons_GetPersonalInfo_Payload,
    context: Context
  ) =>
    | Promise<Persons_GetPersonalInfo_Response>
    | Persons_GetPersonalInfo_Response;
  FindByTenhouIds: (
    persons_FindByTenhouIds_Payload: Persons_FindByTenhouIds_Payload,
    context: Context
  ) =>
    | Promise<Persons_FindByTenhouIds_Response>
    | Persons_FindByTenhouIds_Response;
  FindByTitle: (
    persons_FindByTitle_Payload: Persons_FindByTitle_Payload,
    context: Context
  ) => Promise<Persons_FindByTitle_Response> | Persons_FindByTitle_Response;
  GetGroups: (
    persons_GetGroups_Payload: Persons_GetGroups_Payload,
    context: Context
  ) => Promise<Persons_GetGroups_Response> | Persons_GetGroups_Response;
  GetEventAdmins: (
    access_GetEventAdmins_Payload: Access_GetEventAdmins_Payload,
    context: Context
  ) => Promise<Access_GetEventAdmins_Response> | Access_GetEventAdmins_Response;
  /**
   * admin
   */
  GetSuperadminFlag: (
    access_GetSuperadminFlag_Payload: Access_GetSuperadminFlag_Payload,
    context: Context
  ) =>
    | Promise<Access_GetSuperadminFlag_Response>
    | Access_GetSuperadminFlag_Response;
  GetOwnedEventIds: (
    access_GetOwnedEventIds_Payload: Access_GetOwnedEventIds_Payload,
    context: Context
  ) =>
    | Promise<Access_GetOwnedEventIds_Response>
    | Access_GetOwnedEventIds_Response;
  GetRulesList: (
    access_GetRulesList_Payload: Access_GetRulesList_Payload,
    context: Context
  ) => Promise<Access_GetRulesList_Response> | Access_GetRulesList_Response;
  GetAllEventRules: (
    access_GetAllEventRules_Payload: Access_GetAllEventRules_Payload,
    context: Context
  ) =>
    | Promise<Access_GetAllEventRules_Response>
    | Access_GetAllEventRules_Response;
  GetPersonAccess: (
    access_GetPersonAccess_Payload: Access_GetPersonAccess_Payload,
    context: Context
  ) =>
    | Promise<Access_GetPersonAccess_Response>
    | Access_GetPersonAccess_Response;
  GetGroupAccess: (
    access_GetGroupAccess_Payload: Access_GetGroupAccess_Payload,
    context: Context
  ) => Promise<Access_GetGroupAccess_Response> | Access_GetGroupAccess_Response;
  GetAllPersonAccess: (
    access_GetAllPersonAccess_Payload: Access_GetAllPersonAccess_Payload,
    context: Context
  ) =>
    | Promise<Access_GetAllPersonAccess_Response>
    | Access_GetAllPersonAccess_Response;
  GetAllGroupAccess: (
    access_GetAllGroupAccess_Payload: Access_GetAllGroupAccess_Payload,
    context: Context
  ) =>
    | Promise<Access_GetAllGroupAccess_Response>
    | Access_GetAllGroupAccess_Response;
  AddRuleForPerson: (
    access_AddRuleForPerson_Payload: Access_AddRuleForPerson_Payload,
    context: Context
  ) =>
    | Promise<Access_AddRuleForPerson_Response>
    | Access_AddRuleForPerson_Response;
  AddRuleForGroup: (
    access_AddRuleForGroup_Payload: Access_AddRuleForGroup_Payload,
    context: Context
  ) =>
    | Promise<Access_AddRuleForGroup_Response>
    | Access_AddRuleForGroup_Response;
  UpdateRuleForPerson: (
    access_UpdateRuleForPerson_Payload: Access_UpdateRuleForPerson_Payload,
    context: Context
  ) => Promise<atoms.Generic_Success_Response> | atoms.Generic_Success_Response;
  UpdateRuleForGroup: (
    access_UpdateRuleForGroup_Payload: Access_UpdateRuleForGroup_Payload,
    context: Context
  ) => Promise<atoms.Generic_Success_Response> | atoms.Generic_Success_Response;
  DeleteRuleForPerson: (
    access_DeleteRuleForPerson_Payload: Access_DeleteRuleForPerson_Payload,
    context: Context
  ) => Promise<atoms.Generic_Success_Response> | atoms.Generic_Success_Response;
  DeleteRuleForGroup: (
    access_DeleteRuleForGroup_Payload: Access_DeleteRuleForGroup_Payload,
    context: Context
  ) => Promise<atoms.Generic_Success_Response> | atoms.Generic_Success_Response;
  ClearAccessCache: (
    access_ClearAccessCache_Payload: Access_ClearAccessCache_Payload,
    context: Context
  ) => Promise<atoms.Generic_Success_Response> | atoms.Generic_Success_Response;
  CreateAccount: (
    persons_CreateAccount_Payload: Persons_CreateAccount_Payload,
    context: Context
  ) => Promise<Persons_CreateAccount_Response> | Persons_CreateAccount_Response;
  CreateGroup: (
    persons_CreateGroup_Payload: Persons_CreateGroup_Payload,
    context: Context
  ) => Promise<Persons_CreateGroup_Response> | Persons_CreateGroup_Response;
  UpdateGroup: (
    persons_UpdateGroup_Payload: Persons_UpdateGroup_Payload,
    context: Context
  ) => Promise<atoms.Generic_Success_Response> | atoms.Generic_Success_Response;
  DeleteGroup: (
    persons_DeleteGroup_Payload: Persons_DeleteGroup_Payload,
    context: Context
  ) => Promise<atoms.Generic_Success_Response> | atoms.Generic_Success_Response;
  AddPersonToGroup: (
    persons_AddPersonToGroup_Payload: Persons_AddPersonToGroup_Payload,
    context: Context
  ) => Promise<atoms.Generic_Success_Response> | atoms.Generic_Success_Response;
  RemovePersonFromGroup: (
    persons_RemovePersonFromGroup_Payload: Persons_RemovePersonFromGroup_Payload,
    context: Context
  ) => Promise<atoms.Generic_Success_Response> | atoms.Generic_Success_Response;
  GetPersonsOfGroup: (
    persons_GetPersonsOfGroup_Payload: Persons_GetPersonsOfGroup_Payload,
    context: Context
  ) =>
    | Promise<Persons_GetPersonsOfGroup_Response>
    | Persons_GetPersonsOfGroup_Response;
  GetGroupsOfPerson: (
    persons_GetGroupsOfPerson_Payload: Persons_GetGroupsOfPerson_Payload,
    context: Context
  ) =>
    | Promise<Persons_GetGroupsOfPerson_Response>
    | Persons_GetGroupsOfPerson_Response;
  /**
   * superadmin: this should be covered with some bootstrap authenthication, TODO
   */
  AddSystemWideRuleForPerson: (
    access_AddSystemWideRuleForPerson_Payload: Access_AddSystemWideRuleForPerson_Payload,
    context: Context
  ) =>
    | Promise<Access_AddSystemWideRuleForPerson_Response>
    | Access_AddSystemWideRuleForPerson_Response;
  AddSystemWideRuleForGroup: (
    access_AddSystemWideRuleForGroup_Payload: Access_AddSystemWideRuleForGroup_Payload,
    context: Context
  ) =>
    | Promise<Access_AddSystemWideRuleForGroup_Response>
    | Access_AddSystemWideRuleForGroup_Response;
}

export function createFrey<Context>(service: Frey<Context>) {
  return {
    name: "Common.Frey",
    methods: {
      RequestRegistration: {
        name: "RequestRegistration",
        handler: service.RequestRegistration,
        input: {
          protobuf: Auth_RequestRegistration_Payload,
          json: Auth_RequestRegistration_PayloadJSON,
        },
        output: {
          protobuf: Auth_RequestRegistration_Response,
          json: Auth_RequestRegistration_ResponseJSON,
        },
      },
      ApproveRegistration: {
        name: "ApproveRegistration",
        handler: service.ApproveRegistration,
        input: {
          protobuf: Auth_ApproveRegistration_Payload,
          json: Auth_ApproveRegistration_PayloadJSON,
        },
        output: {
          protobuf: Auth_ApproveRegistration_Response,
          json: Auth_ApproveRegistration_ResponseJSON,
        },
      },
      Authorize: {
        name: "Authorize",
        handler: service.Authorize,
        input: {
          protobuf: Auth_Authorize_Payload,
          json: Auth_Authorize_PayloadJSON,
        },
        output: {
          protobuf: Auth_Authorize_Response,
          json: Auth_Authorize_ResponseJSON,
        },
      },
      QuickAuthorize: {
        name: "QuickAuthorize",
        handler: service.QuickAuthorize,
        input: {
          protobuf: Auth_QuickAuthorize_Payload,
          json: Auth_QuickAuthorize_PayloadJSON,
        },
        output: {
          protobuf: Auth_QuickAuthorize_Response,
          json: Auth_QuickAuthorize_ResponseJSON,
        },
      },
      Me: {
        name: "Me",
        handler: service.Me,
        input: { protobuf: Auth_Me_Payload, json: Auth_Me_PayloadJSON },
        output: { protobuf: Auth_Me_Response, json: Auth_Me_ResponseJSON },
      },
      ChangePassword: {
        name: "ChangePassword",
        handler: service.ChangePassword,
        input: {
          protobuf: Auth_ChangePassword_Payload,
          json: Auth_ChangePassword_PayloadJSON,
        },
        output: {
          protobuf: Auth_ChangePassword_Response,
          json: Auth_ChangePassword_ResponseJSON,
        },
      },
      RequestResetPassword: {
        name: "RequestResetPassword",
        handler: service.RequestResetPassword,
        input: {
          protobuf: Auth_RequestResetPassword_Payload,
          json: Auth_RequestResetPassword_PayloadJSON,
        },
        output: {
          protobuf: Auth_RequestResetPassword_Response,
          json: Auth_RequestResetPassword_ResponseJSON,
        },
      },
      ApproveResetPassword: {
        name: "ApproveResetPassword",
        handler: service.ApproveResetPassword,
        input: {
          protobuf: Auth_ApproveResetPassword_Payload,
          json: Auth_ApproveResetPassword_PayloadJSON,
        },
        output: {
          protobuf: Auth_ApproveResetPassword_Response,
          json: Auth_ApproveResetPassword_ResponseJSON,
        },
      },
      GetAccessRules: {
        name: "GetAccessRules",
        handler: service.GetAccessRules,
        input: {
          protobuf: Access_GetAccessRules_Payload,
          json: Access_GetAccessRules_PayloadJSON,
        },
        output: {
          protobuf: Access_GetAccessRules_Response,
          json: Access_GetAccessRules_ResponseJSON,
        },
      },
      GetRuleValue: {
        name: "GetRuleValue",
        handler: service.GetRuleValue,
        input: {
          protobuf: Access_GetRuleValue_Payload,
          json: Access_GetRuleValue_PayloadJSON,
        },
        output: {
          protobuf: Access_GetRuleValue_Response,
          json: Access_GetRuleValue_ResponseJSON,
        },
      },
      UpdatePersonalInfo: {
        name: "UpdatePersonalInfo",
        handler: service.UpdatePersonalInfo,
        input: {
          protobuf: Persons_UpdatePersonalInfo_Payload,
          json: Persons_UpdatePersonalInfo_PayloadJSON,
        },
        output: {
          protobuf: atoms.Generic_Success_Response,
          json: atoms.Generic_Success_ResponseJSON,
        },
      },
      GetPersonalInfo: {
        name: "GetPersonalInfo",
        handler: service.GetPersonalInfo,
        input: {
          protobuf: Persons_GetPersonalInfo_Payload,
          json: Persons_GetPersonalInfo_PayloadJSON,
        },
        output: {
          protobuf: Persons_GetPersonalInfo_Response,
          json: Persons_GetPersonalInfo_ResponseJSON,
        },
      },
      FindByTenhouIds: {
        name: "FindByTenhouIds",
        handler: service.FindByTenhouIds,
        input: {
          protobuf: Persons_FindByTenhouIds_Payload,
          json: Persons_FindByTenhouIds_PayloadJSON,
        },
        output: {
          protobuf: Persons_FindByTenhouIds_Response,
          json: Persons_FindByTenhouIds_ResponseJSON,
        },
      },
      FindByTitle: {
        name: "FindByTitle",
        handler: service.FindByTitle,
        input: {
          protobuf: Persons_FindByTitle_Payload,
          json: Persons_FindByTitle_PayloadJSON,
        },
        output: {
          protobuf: Persons_FindByTitle_Response,
          json: Persons_FindByTitle_ResponseJSON,
        },
      },
      GetGroups: {
        name: "GetGroups",
        handler: service.GetGroups,
        input: {
          protobuf: Persons_GetGroups_Payload,
          json: Persons_GetGroups_PayloadJSON,
        },
        output: {
          protobuf: Persons_GetGroups_Response,
          json: Persons_GetGroups_ResponseJSON,
        },
      },
      GetEventAdmins: {
        name: "GetEventAdmins",
        handler: service.GetEventAdmins,
        input: {
          protobuf: Access_GetEventAdmins_Payload,
          json: Access_GetEventAdmins_PayloadJSON,
        },
        output: {
          protobuf: Access_GetEventAdmins_Response,
          json: Access_GetEventAdmins_ResponseJSON,
        },
      },
      GetSuperadminFlag: {
        name: "GetSuperadminFlag",
        handler: service.GetSuperadminFlag,
        input: {
          protobuf: Access_GetSuperadminFlag_Payload,
          json: Access_GetSuperadminFlag_PayloadJSON,
        },
        output: {
          protobuf: Access_GetSuperadminFlag_Response,
          json: Access_GetSuperadminFlag_ResponseJSON,
        },
      },
      GetOwnedEventIds: {
        name: "GetOwnedEventIds",
        handler: service.GetOwnedEventIds,
        input: {
          protobuf: Access_GetOwnedEventIds_Payload,
          json: Access_GetOwnedEventIds_PayloadJSON,
        },
        output: {
          protobuf: Access_GetOwnedEventIds_Response,
          json: Access_GetOwnedEventIds_ResponseJSON,
        },
      },
      GetRulesList: {
        name: "GetRulesList",
        handler: service.GetRulesList,
        input: {
          protobuf: Access_GetRulesList_Payload,
          json: Access_GetRulesList_PayloadJSON,
        },
        output: {
          protobuf: Access_GetRulesList_Response,
          json: Access_GetRulesList_ResponseJSON,
        },
      },
      GetAllEventRules: {
        name: "GetAllEventRules",
        handler: service.GetAllEventRules,
        input: {
          protobuf: Access_GetAllEventRules_Payload,
          json: Access_GetAllEventRules_PayloadJSON,
        },
        output: {
          protobuf: Access_GetAllEventRules_Response,
          json: Access_GetAllEventRules_ResponseJSON,
        },
      },
      GetPersonAccess: {
        name: "GetPersonAccess",
        handler: service.GetPersonAccess,
        input: {
          protobuf: Access_GetPersonAccess_Payload,
          json: Access_GetPersonAccess_PayloadJSON,
        },
        output: {
          protobuf: Access_GetPersonAccess_Response,
          json: Access_GetPersonAccess_ResponseJSON,
        },
      },
      GetGroupAccess: {
        name: "GetGroupAccess",
        handler: service.GetGroupAccess,
        input: {
          protobuf: Access_GetGroupAccess_Payload,
          json: Access_GetGroupAccess_PayloadJSON,
        },
        output: {
          protobuf: Access_GetGroupAccess_Response,
          json: Access_GetGroupAccess_ResponseJSON,
        },
      },
      GetAllPersonAccess: {
        name: "GetAllPersonAccess",
        handler: service.GetAllPersonAccess,
        input: {
          protobuf: Access_GetAllPersonAccess_Payload,
          json: Access_GetAllPersonAccess_PayloadJSON,
        },
        output: {
          protobuf: Access_GetAllPersonAccess_Response,
          json: Access_GetAllPersonAccess_ResponseJSON,
        },
      },
      GetAllGroupAccess: {
        name: "GetAllGroupAccess",
        handler: service.GetAllGroupAccess,
        input: {
          protobuf: Access_GetAllGroupAccess_Payload,
          json: Access_GetAllGroupAccess_PayloadJSON,
        },
        output: {
          protobuf: Access_GetAllGroupAccess_Response,
          json: Access_GetAllGroupAccess_ResponseJSON,
        },
      },
      AddRuleForPerson: {
        name: "AddRuleForPerson",
        handler: service.AddRuleForPerson,
        input: {
          protobuf: Access_AddRuleForPerson_Payload,
          json: Access_AddRuleForPerson_PayloadJSON,
        },
        output: {
          protobuf: Access_AddRuleForPerson_Response,
          json: Access_AddRuleForPerson_ResponseJSON,
        },
      },
      AddRuleForGroup: {
        name: "AddRuleForGroup",
        handler: service.AddRuleForGroup,
        input: {
          protobuf: Access_AddRuleForGroup_Payload,
          json: Access_AddRuleForGroup_PayloadJSON,
        },
        output: {
          protobuf: Access_AddRuleForGroup_Response,
          json: Access_AddRuleForGroup_ResponseJSON,
        },
      },
      UpdateRuleForPerson: {
        name: "UpdateRuleForPerson",
        handler: service.UpdateRuleForPerson,
        input: {
          protobuf: Access_UpdateRuleForPerson_Payload,
          json: Access_UpdateRuleForPerson_PayloadJSON,
        },
        output: {
          protobuf: atoms.Generic_Success_Response,
          json: atoms.Generic_Success_ResponseJSON,
        },
      },
      UpdateRuleForGroup: {
        name: "UpdateRuleForGroup",
        handler: service.UpdateRuleForGroup,
        input: {
          protobuf: Access_UpdateRuleForGroup_Payload,
          json: Access_UpdateRuleForGroup_PayloadJSON,
        },
        output: {
          protobuf: atoms.Generic_Success_Response,
          json: atoms.Generic_Success_ResponseJSON,
        },
      },
      DeleteRuleForPerson: {
        name: "DeleteRuleForPerson",
        handler: service.DeleteRuleForPerson,
        input: {
          protobuf: Access_DeleteRuleForPerson_Payload,
          json: Access_DeleteRuleForPerson_PayloadJSON,
        },
        output: {
          protobuf: atoms.Generic_Success_Response,
          json: atoms.Generic_Success_ResponseJSON,
        },
      },
      DeleteRuleForGroup: {
        name: "DeleteRuleForGroup",
        handler: service.DeleteRuleForGroup,
        input: {
          protobuf: Access_DeleteRuleForGroup_Payload,
          json: Access_DeleteRuleForGroup_PayloadJSON,
        },
        output: {
          protobuf: atoms.Generic_Success_Response,
          json: atoms.Generic_Success_ResponseJSON,
        },
      },
      ClearAccessCache: {
        name: "ClearAccessCache",
        handler: service.ClearAccessCache,
        input: {
          protobuf: Access_ClearAccessCache_Payload,
          json: Access_ClearAccessCache_PayloadJSON,
        },
        output: {
          protobuf: atoms.Generic_Success_Response,
          json: atoms.Generic_Success_ResponseJSON,
        },
      },
      CreateAccount: {
        name: "CreateAccount",
        handler: service.CreateAccount,
        input: {
          protobuf: Persons_CreateAccount_Payload,
          json: Persons_CreateAccount_PayloadJSON,
        },
        output: {
          protobuf: Persons_CreateAccount_Response,
          json: Persons_CreateAccount_ResponseJSON,
        },
      },
      CreateGroup: {
        name: "CreateGroup",
        handler: service.CreateGroup,
        input: {
          protobuf: Persons_CreateGroup_Payload,
          json: Persons_CreateGroup_PayloadJSON,
        },
        output: {
          protobuf: Persons_CreateGroup_Response,
          json: Persons_CreateGroup_ResponseJSON,
        },
      },
      UpdateGroup: {
        name: "UpdateGroup",
        handler: service.UpdateGroup,
        input: {
          protobuf: Persons_UpdateGroup_Payload,
          json: Persons_UpdateGroup_PayloadJSON,
        },
        output: {
          protobuf: atoms.Generic_Success_Response,
          json: atoms.Generic_Success_ResponseJSON,
        },
      },
      DeleteGroup: {
        name: "DeleteGroup",
        handler: service.DeleteGroup,
        input: {
          protobuf: Persons_DeleteGroup_Payload,
          json: Persons_DeleteGroup_PayloadJSON,
        },
        output: {
          protobuf: atoms.Generic_Success_Response,
          json: atoms.Generic_Success_ResponseJSON,
        },
      },
      AddPersonToGroup: {
        name: "AddPersonToGroup",
        handler: service.AddPersonToGroup,
        input: {
          protobuf: Persons_AddPersonToGroup_Payload,
          json: Persons_AddPersonToGroup_PayloadJSON,
        },
        output: {
          protobuf: atoms.Generic_Success_Response,
          json: atoms.Generic_Success_ResponseJSON,
        },
      },
      RemovePersonFromGroup: {
        name: "RemovePersonFromGroup",
        handler: service.RemovePersonFromGroup,
        input: {
          protobuf: Persons_RemovePersonFromGroup_Payload,
          json: Persons_RemovePersonFromGroup_PayloadJSON,
        },
        output: {
          protobuf: atoms.Generic_Success_Response,
          json: atoms.Generic_Success_ResponseJSON,
        },
      },
      GetPersonsOfGroup: {
        name: "GetPersonsOfGroup",
        handler: service.GetPersonsOfGroup,
        input: {
          protobuf: Persons_GetPersonsOfGroup_Payload,
          json: Persons_GetPersonsOfGroup_PayloadJSON,
        },
        output: {
          protobuf: Persons_GetPersonsOfGroup_Response,
          json: Persons_GetPersonsOfGroup_ResponseJSON,
        },
      },
      GetGroupsOfPerson: {
        name: "GetGroupsOfPerson",
        handler: service.GetGroupsOfPerson,
        input: {
          protobuf: Persons_GetGroupsOfPerson_Payload,
          json: Persons_GetGroupsOfPerson_PayloadJSON,
        },
        output: {
          protobuf: Persons_GetGroupsOfPerson_Response,
          json: Persons_GetGroupsOfPerson_ResponseJSON,
        },
      },
      AddSystemWideRuleForPerson: {
        name: "AddSystemWideRuleForPerson",
        handler: service.AddSystemWideRuleForPerson,
        input: {
          protobuf: Access_AddSystemWideRuleForPerson_Payload,
          json: Access_AddSystemWideRuleForPerson_PayloadJSON,
        },
        output: {
          protobuf: Access_AddSystemWideRuleForPerson_Response,
          json: Access_AddSystemWideRuleForPerson_ResponseJSON,
        },
      },
      AddSystemWideRuleForGroup: {
        name: "AddSystemWideRuleForGroup",
        handler: service.AddSystemWideRuleForGroup,
        input: {
          protobuf: Access_AddSystemWideRuleForGroup_Payload,
          json: Access_AddSystemWideRuleForGroup_PayloadJSON,
        },
        output: {
          protobuf: Access_AddSystemWideRuleForGroup_Response,
          json: Access_AddSystemWideRuleForGroup_ResponseJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Auth_RequestRegistration_Payload = {
  /**
   * Serializes Auth_RequestRegistration_Payload to protobuf.
   */
  encode: function (
    msg: Partial<Auth_RequestRegistration_Payload>
  ): Uint8Array {
    return Auth_RequestRegistration_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Auth_RequestRegistration_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Auth_RequestRegistration_Payload {
    return Auth_RequestRegistration_Payload._readMessage(
      Auth_RequestRegistration_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Auth_RequestRegistration_Payload with all fields set to their default value.
   */
  initialize: function (): Auth_RequestRegistration_Payload {
    return {
      email: "",
      title: "",
      password: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_RequestRegistration_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.email) {
      writer.writeString(1, msg.email);
    }
    if (msg.title) {
      writer.writeString(2, msg.title);
    }
    if (msg.password) {
      writer.writeString(3, msg.password);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Auth_RequestRegistration_Payload,
    reader: BinaryReader
  ): Auth_RequestRegistration_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.email = reader.readString();
          break;
        }
        case 2: {
          msg.title = reader.readString();
          break;
        }
        case 3: {
          msg.password = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Auth_RequestRegistration_Response = {
  /**
   * Serializes Auth_RequestRegistration_Response to protobuf.
   */
  encode: function (
    msg: Partial<Auth_RequestRegistration_Response>
  ): Uint8Array {
    return Auth_RequestRegistration_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Auth_RequestRegistration_Response from protobuf.
   */
  decode: function (bytes: ByteSource): Auth_RequestRegistration_Response {
    return Auth_RequestRegistration_Response._readMessage(
      Auth_RequestRegistration_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Auth_RequestRegistration_Response with all fields set to their default value.
   */
  initialize: function (): Auth_RequestRegistration_Response {
    return {
      approvalCode: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_RequestRegistration_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.approvalCode) {
      writer.writeString(1, msg.approvalCode);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Auth_RequestRegistration_Response,
    reader: BinaryReader
  ): Auth_RequestRegistration_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.approvalCode = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Auth_ApproveRegistration_Payload = {
  /**
   * Serializes Auth_ApproveRegistration_Payload to protobuf.
   */
  encode: function (
    msg: Partial<Auth_ApproveRegistration_Payload>
  ): Uint8Array {
    return Auth_ApproveRegistration_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Auth_ApproveRegistration_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Auth_ApproveRegistration_Payload {
    return Auth_ApproveRegistration_Payload._readMessage(
      Auth_ApproveRegistration_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Auth_ApproveRegistration_Payload with all fields set to their default value.
   */
  initialize: function (): Auth_ApproveRegistration_Payload {
    return {
      approvalCode: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_ApproveRegistration_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.approvalCode) {
      writer.writeString(1, msg.approvalCode);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Auth_ApproveRegistration_Payload,
    reader: BinaryReader
  ): Auth_ApproveRegistration_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.approvalCode = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Auth_ApproveRegistration_Response = {
  /**
   * Serializes Auth_ApproveRegistration_Response to protobuf.
   */
  encode: function (
    msg: Partial<Auth_ApproveRegistration_Response>
  ): Uint8Array {
    return Auth_ApproveRegistration_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Auth_ApproveRegistration_Response from protobuf.
   */
  decode: function (bytes: ByteSource): Auth_ApproveRegistration_Response {
    return Auth_ApproveRegistration_Response._readMessage(
      Auth_ApproveRegistration_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Auth_ApproveRegistration_Response with all fields set to their default value.
   */
  initialize: function (): Auth_ApproveRegistration_Response {
    return {
      personId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_ApproveRegistration_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Auth_ApproveRegistration_Response,
    reader: BinaryReader
  ): Auth_ApproveRegistration_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Auth_Authorize_Payload = {
  /**
   * Serializes Auth_Authorize_Payload to protobuf.
   */
  encode: function (msg: Partial<Auth_Authorize_Payload>): Uint8Array {
    return Auth_Authorize_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Auth_Authorize_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Auth_Authorize_Payload {
    return Auth_Authorize_Payload._readMessage(
      Auth_Authorize_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Auth_Authorize_Payload with all fields set to their default value.
   */
  initialize: function (): Auth_Authorize_Payload {
    return {
      email: "",
      password: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_Authorize_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.email) {
      writer.writeString(1, msg.email);
    }
    if (msg.password) {
      writer.writeString(2, msg.password);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Auth_Authorize_Payload,
    reader: BinaryReader
  ): Auth_Authorize_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.email = reader.readString();
          break;
        }
        case 2: {
          msg.password = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Auth_Authorize_Response = {
  /**
   * Serializes Auth_Authorize_Response to protobuf.
   */
  encode: function (msg: Partial<Auth_Authorize_Response>): Uint8Array {
    return Auth_Authorize_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Auth_Authorize_Response from protobuf.
   */
  decode: function (bytes: ByteSource): Auth_Authorize_Response {
    return Auth_Authorize_Response._readMessage(
      Auth_Authorize_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Auth_Authorize_Response with all fields set to their default value.
   */
  initialize: function (): Auth_Authorize_Response {
    return {
      personId: 0,
      authToken: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_Authorize_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    if (msg.authToken) {
      writer.writeString(2, msg.authToken);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Auth_Authorize_Response,
    reader: BinaryReader
  ): Auth_Authorize_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        case 2: {
          msg.authToken = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Auth_QuickAuthorize_Payload = {
  /**
   * Serializes Auth_QuickAuthorize_Payload to protobuf.
   */
  encode: function (msg: Partial<Auth_QuickAuthorize_Payload>): Uint8Array {
    return Auth_QuickAuthorize_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Auth_QuickAuthorize_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Auth_QuickAuthorize_Payload {
    return Auth_QuickAuthorize_Payload._readMessage(
      Auth_QuickAuthorize_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Auth_QuickAuthorize_Payload with all fields set to their default value.
   */
  initialize: function (): Auth_QuickAuthorize_Payload {
    return {
      personId: 0,
      authToken: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_QuickAuthorize_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    if (msg.authToken) {
      writer.writeString(2, msg.authToken);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Auth_QuickAuthorize_Payload,
    reader: BinaryReader
  ): Auth_QuickAuthorize_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        case 2: {
          msg.authToken = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Auth_QuickAuthorize_Response = {
  /**
   * Serializes Auth_QuickAuthorize_Response to protobuf.
   */
  encode: function (msg: Partial<Auth_QuickAuthorize_Response>): Uint8Array {
    return Auth_QuickAuthorize_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Auth_QuickAuthorize_Response from protobuf.
   */
  decode: function (bytes: ByteSource): Auth_QuickAuthorize_Response {
    return Auth_QuickAuthorize_Response._readMessage(
      Auth_QuickAuthorize_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Auth_QuickAuthorize_Response with all fields set to their default value.
   */
  initialize: function (): Auth_QuickAuthorize_Response {
    return {
      authSuccess: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_QuickAuthorize_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.authSuccess) {
      writer.writeBool(1, msg.authSuccess);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Auth_QuickAuthorize_Response,
    reader: BinaryReader
  ): Auth_QuickAuthorize_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.authSuccess = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Auth_Me_Payload = {
  /**
   * Serializes Auth_Me_Payload to protobuf.
   */
  encode: function (msg: Partial<Auth_Me_Payload>): Uint8Array {
    return Auth_Me_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Auth_Me_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Auth_Me_Payload {
    return Auth_Me_Payload._readMessage(
      Auth_Me_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Auth_Me_Payload with all fields set to their default value.
   */
  initialize: function (): Auth_Me_Payload {
    return {
      personId: 0,
      authToken: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_Me_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    if (msg.authToken) {
      writer.writeString(2, msg.authToken);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Auth_Me_Payload,
    reader: BinaryReader
  ): Auth_Me_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        case 2: {
          msg.authToken = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Auth_Me_Response = {
  /**
   * Serializes Auth_Me_Response to protobuf.
   */
  encode: function (msg: Partial<Auth_Me_Response>): Uint8Array {
    return Auth_Me_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Auth_Me_Response from protobuf.
   */
  decode: function (bytes: ByteSource): Auth_Me_Response {
    return Auth_Me_Response._readMessage(
      Auth_Me_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Auth_Me_Response with all fields set to their default value.
   */
  initialize: function (): Auth_Me_Response {
    return {
      personId: 0,
      country: "",
      city: "",
      email: "",
      phone: "",
      tenhouId: "",
      title: "",
      groups: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_Me_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    if (msg.country) {
      writer.writeString(2, msg.country);
    }
    if (msg.city) {
      writer.writeString(3, msg.city);
    }
    if (msg.email) {
      writer.writeString(4, msg.email);
    }
    if (msg.phone) {
      writer.writeString(5, msg.phone);
    }
    if (msg.tenhouId) {
      writer.writeString(6, msg.tenhouId);
    }
    if (msg.title) {
      writer.writeString(7, msg.title);
    }
    if (msg.groups?.length) {
      writer.writePackedInt32(8, msg.groups);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Auth_Me_Response,
    reader: BinaryReader
  ): Auth_Me_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        case 2: {
          msg.country = reader.readString();
          break;
        }
        case 3: {
          msg.city = reader.readString();
          break;
        }
        case 4: {
          msg.email = reader.readString();
          break;
        }
        case 5: {
          msg.phone = reader.readString();
          break;
        }
        case 6: {
          msg.tenhouId = reader.readString();
          break;
        }
        case 7: {
          msg.title = reader.readString();
          break;
        }
        case 8: {
          if (reader.isDelimited()) {
            msg.groups.push(...reader.readPackedInt32());
          } else {
            msg.groups.push(reader.readInt32());
          }
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Auth_ChangePassword_Payload = {
  /**
   * Serializes Auth_ChangePassword_Payload to protobuf.
   */
  encode: function (msg: Partial<Auth_ChangePassword_Payload>): Uint8Array {
    return Auth_ChangePassword_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Auth_ChangePassword_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Auth_ChangePassword_Payload {
    return Auth_ChangePassword_Payload._readMessage(
      Auth_ChangePassword_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Auth_ChangePassword_Payload with all fields set to their default value.
   */
  initialize: function (): Auth_ChangePassword_Payload {
    return {
      email: "",
      password: "",
      newPassword: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_ChangePassword_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.email) {
      writer.writeString(1, msg.email);
    }
    if (msg.password) {
      writer.writeString(2, msg.password);
    }
    if (msg.newPassword) {
      writer.writeString(3, msg.newPassword);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Auth_ChangePassword_Payload,
    reader: BinaryReader
  ): Auth_ChangePassword_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.email = reader.readString();
          break;
        }
        case 2: {
          msg.password = reader.readString();
          break;
        }
        case 3: {
          msg.newPassword = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Auth_ChangePassword_Response = {
  /**
   * Serializes Auth_ChangePassword_Response to protobuf.
   */
  encode: function (msg: Partial<Auth_ChangePassword_Response>): Uint8Array {
    return Auth_ChangePassword_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Auth_ChangePassword_Response from protobuf.
   */
  decode: function (bytes: ByteSource): Auth_ChangePassword_Response {
    return Auth_ChangePassword_Response._readMessage(
      Auth_ChangePassword_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Auth_ChangePassword_Response with all fields set to their default value.
   */
  initialize: function (): Auth_ChangePassword_Response {
    return {
      authToken: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_ChangePassword_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.authToken) {
      writer.writeString(1, msg.authToken);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Auth_ChangePassword_Response,
    reader: BinaryReader
  ): Auth_ChangePassword_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.authToken = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Auth_RequestResetPassword_Payload = {
  /**
   * Serializes Auth_RequestResetPassword_Payload to protobuf.
   */
  encode: function (
    msg: Partial<Auth_RequestResetPassword_Payload>
  ): Uint8Array {
    return Auth_RequestResetPassword_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Auth_RequestResetPassword_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Auth_RequestResetPassword_Payload {
    return Auth_RequestResetPassword_Payload._readMessage(
      Auth_RequestResetPassword_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Auth_RequestResetPassword_Payload with all fields set to their default value.
   */
  initialize: function (): Auth_RequestResetPassword_Payload {
    return {
      email: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_RequestResetPassword_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.email) {
      writer.writeString(1, msg.email);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Auth_RequestResetPassword_Payload,
    reader: BinaryReader
  ): Auth_RequestResetPassword_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.email = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Auth_RequestResetPassword_Response = {
  /**
   * Serializes Auth_RequestResetPassword_Response to protobuf.
   */
  encode: function (
    msg: Partial<Auth_RequestResetPassword_Response>
  ): Uint8Array {
    return Auth_RequestResetPassword_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Auth_RequestResetPassword_Response from protobuf.
   */
  decode: function (bytes: ByteSource): Auth_RequestResetPassword_Response {
    return Auth_RequestResetPassword_Response._readMessage(
      Auth_RequestResetPassword_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Auth_RequestResetPassword_Response with all fields set to their default value.
   */
  initialize: function (): Auth_RequestResetPassword_Response {
    return {
      resetToken: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_RequestResetPassword_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.resetToken) {
      writer.writeString(1, msg.resetToken);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Auth_RequestResetPassword_Response,
    reader: BinaryReader
  ): Auth_RequestResetPassword_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.resetToken = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Auth_ApproveResetPassword_Payload = {
  /**
   * Serializes Auth_ApproveResetPassword_Payload to protobuf.
   */
  encode: function (
    msg: Partial<Auth_ApproveResetPassword_Payload>
  ): Uint8Array {
    return Auth_ApproveResetPassword_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Auth_ApproveResetPassword_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Auth_ApproveResetPassword_Payload {
    return Auth_ApproveResetPassword_Payload._readMessage(
      Auth_ApproveResetPassword_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Auth_ApproveResetPassword_Payload with all fields set to their default value.
   */
  initialize: function (): Auth_ApproveResetPassword_Payload {
    return {
      email: "",
      resetToken: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_ApproveResetPassword_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.email) {
      writer.writeString(1, msg.email);
    }
    if (msg.resetToken) {
      writer.writeString(2, msg.resetToken);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Auth_ApproveResetPassword_Payload,
    reader: BinaryReader
  ): Auth_ApproveResetPassword_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.email = reader.readString();
          break;
        }
        case 2: {
          msg.resetToken = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Auth_ApproveResetPassword_Response = {
  /**
   * Serializes Auth_ApproveResetPassword_Response to protobuf.
   */
  encode: function (
    msg: Partial<Auth_ApproveResetPassword_Response>
  ): Uint8Array {
    return Auth_ApproveResetPassword_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Auth_ApproveResetPassword_Response from protobuf.
   */
  decode: function (bytes: ByteSource): Auth_ApproveResetPassword_Response {
    return Auth_ApproveResetPassword_Response._readMessage(
      Auth_ApproveResetPassword_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Auth_ApproveResetPassword_Response with all fields set to their default value.
   */
  initialize: function (): Auth_ApproveResetPassword_Response {
    return {
      newTmpPassword: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_ApproveResetPassword_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.newTmpPassword) {
      writer.writeString(1, msg.newTmpPassword);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Auth_ApproveResetPassword_Response,
    reader: BinaryReader
  ): Auth_ApproveResetPassword_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.newTmpPassword = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_GetAccessRules_Payload = {
  /**
   * Serializes Access_GetAccessRules_Payload to protobuf.
   */
  encode: function (msg: Partial<Access_GetAccessRules_Payload>): Uint8Array {
    return Access_GetAccessRules_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_GetAccessRules_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Access_GetAccessRules_Payload {
    return Access_GetAccessRules_Payload._readMessage(
      Access_GetAccessRules_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_GetAccessRules_Payload with all fields set to their default value.
   */
  initialize: function (): Access_GetAccessRules_Payload {
    return {
      personId: 0,
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetAccessRules_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    if (msg.eventId) {
      writer.writeInt32(2, msg.eventId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetAccessRules_Payload,
    reader: BinaryReader
  ): Access_GetAccessRules_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        case 2: {
          msg.eventId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_GetAccessRules_Response = {
  /**
   * Serializes Access_GetAccessRules_Response to protobuf.
   */
  encode: function (msg: Partial<Access_GetAccessRules_Response>): Uint8Array {
    return Access_GetAccessRules_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_GetAccessRules_Response from protobuf.
   */
  decode: function (bytes: ByteSource): Access_GetAccessRules_Response {
    return Access_GetAccessRules_Response._readMessage(
      Access_GetAccessRules_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_GetAccessRules_Response with all fields set to their default value.
   */
  initialize: function (): Access_GetAccessRules_Response {
    return {
      rules: atoms.AccessRules.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetAccessRules_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.rules) {
      writer.writeMessage(1, msg.rules, atoms.AccessRules._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetAccessRules_Response,
    reader: BinaryReader
  ): Access_GetAccessRules_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.rules, atoms.AccessRules._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_GetRuleValue_Payload = {
  /**
   * Serializes Access_GetRuleValue_Payload to protobuf.
   */
  encode: function (msg: Partial<Access_GetRuleValue_Payload>): Uint8Array {
    return Access_GetRuleValue_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_GetRuleValue_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Access_GetRuleValue_Payload {
    return Access_GetRuleValue_Payload._readMessage(
      Access_GetRuleValue_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_GetRuleValue_Payload with all fields set to their default value.
   */
  initialize: function (): Access_GetRuleValue_Payload {
    return {
      personId: 0,
      eventId: 0,
      ruleName: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetRuleValue_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    if (msg.eventId) {
      writer.writeInt32(2, msg.eventId);
    }
    if (msg.ruleName) {
      writer.writeString(3, msg.ruleName);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetRuleValue_Payload,
    reader: BinaryReader
  ): Access_GetRuleValue_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        case 2: {
          msg.eventId = reader.readInt32();
          break;
        }
        case 3: {
          msg.ruleName = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_GetRuleValue_Response = {
  /**
   * Serializes Access_GetRuleValue_Response to protobuf.
   */
  encode: function (msg: Partial<Access_GetRuleValue_Response>): Uint8Array {
    return Access_GetRuleValue_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_GetRuleValue_Response from protobuf.
   */
  decode: function (bytes: ByteSource): Access_GetRuleValue_Response {
    return Access_GetRuleValue_Response._readMessage(
      Access_GetRuleValue_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_GetRuleValue_Response with all fields set to their default value.
   */
  initialize: function (): Access_GetRuleValue_Response {
    return {
      value: atoms.RuleValue.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetRuleValue_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.value) {
      writer.writeMessage(1, msg.value, atoms.RuleValue._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetRuleValue_Response,
    reader: BinaryReader
  ): Access_GetRuleValue_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.value, atoms.RuleValue._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_GetEventAdmins_Payload = {
  /**
   * Serializes Access_GetEventAdmins_Payload to protobuf.
   */
  encode: function (msg: Partial<Access_GetEventAdmins_Payload>): Uint8Array {
    return Access_GetEventAdmins_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_GetEventAdmins_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Access_GetEventAdmins_Payload {
    return Access_GetEventAdmins_Payload._readMessage(
      Access_GetEventAdmins_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_GetEventAdmins_Payload with all fields set to their default value.
   */
  initialize: function (): Access_GetEventAdmins_Payload {
    return {
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetEventAdmins_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.eventId) {
      writer.writeInt32(1, msg.eventId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetEventAdmins_Payload,
    reader: BinaryReader
  ): Access_GetEventAdmins_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.eventId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_GetEventAdmins_Response = {
  /**
   * Serializes Access_GetEventAdmins_Response to protobuf.
   */
  encode: function (msg: Partial<Access_GetEventAdmins_Response>): Uint8Array {
    return Access_GetEventAdmins_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_GetEventAdmins_Response from protobuf.
   */
  decode: function (bytes: ByteSource): Access_GetEventAdmins_Response {
    return Access_GetEventAdmins_Response._readMessage(
      Access_GetEventAdmins_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_GetEventAdmins_Response with all fields set to their default value.
   */
  initialize: function (): Access_GetEventAdmins_Response {
    return {
      admins: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetEventAdmins_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.admins?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.admins as any,
        atoms.EventAdmin._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetEventAdmins_Response,
    reader: BinaryReader
  ): Access_GetEventAdmins_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = atoms.EventAdmin.initialize();
          reader.readMessage(m, atoms.EventAdmin._readMessage);
          msg.admins.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_GetSuperadminFlag_Payload = {
  /**
   * Serializes Access_GetSuperadminFlag_Payload to protobuf.
   */
  encode: function (
    msg: Partial<Access_GetSuperadminFlag_Payload>
  ): Uint8Array {
    return Access_GetSuperadminFlag_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_GetSuperadminFlag_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Access_GetSuperadminFlag_Payload {
    return Access_GetSuperadminFlag_Payload._readMessage(
      Access_GetSuperadminFlag_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_GetSuperadminFlag_Payload with all fields set to their default value.
   */
  initialize: function (): Access_GetSuperadminFlag_Payload {
    return {
      personId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetSuperadminFlag_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetSuperadminFlag_Payload,
    reader: BinaryReader
  ): Access_GetSuperadminFlag_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_GetSuperadminFlag_Response = {
  /**
   * Serializes Access_GetSuperadminFlag_Response to protobuf.
   */
  encode: function (
    msg: Partial<Access_GetSuperadminFlag_Response>
  ): Uint8Array {
    return Access_GetSuperadminFlag_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_GetSuperadminFlag_Response from protobuf.
   */
  decode: function (bytes: ByteSource): Access_GetSuperadminFlag_Response {
    return Access_GetSuperadminFlag_Response._readMessage(
      Access_GetSuperadminFlag_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_GetSuperadminFlag_Response with all fields set to their default value.
   */
  initialize: function (): Access_GetSuperadminFlag_Response {
    return {
      isAdmin: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetSuperadminFlag_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.isAdmin) {
      writer.writeBool(1, msg.isAdmin);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetSuperadminFlag_Response,
    reader: BinaryReader
  ): Access_GetSuperadminFlag_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.isAdmin = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_GetOwnedEventIds_Payload = {
  /**
   * Serializes Access_GetOwnedEventIds_Payload to protobuf.
   */
  encode: function (msg: Partial<Access_GetOwnedEventIds_Payload>): Uint8Array {
    return Access_GetOwnedEventIds_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_GetOwnedEventIds_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Access_GetOwnedEventIds_Payload {
    return Access_GetOwnedEventIds_Payload._readMessage(
      Access_GetOwnedEventIds_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_GetOwnedEventIds_Payload with all fields set to their default value.
   */
  initialize: function (): Access_GetOwnedEventIds_Payload {
    return {
      personId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetOwnedEventIds_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetOwnedEventIds_Payload,
    reader: BinaryReader
  ): Access_GetOwnedEventIds_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_GetOwnedEventIds_Response = {
  /**
   * Serializes Access_GetOwnedEventIds_Response to protobuf.
   */
  encode: function (
    msg: Partial<Access_GetOwnedEventIds_Response>
  ): Uint8Array {
    return Access_GetOwnedEventIds_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_GetOwnedEventIds_Response from protobuf.
   */
  decode: function (bytes: ByteSource): Access_GetOwnedEventIds_Response {
    return Access_GetOwnedEventIds_Response._readMessage(
      Access_GetOwnedEventIds_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_GetOwnedEventIds_Response with all fields set to their default value.
   */
  initialize: function (): Access_GetOwnedEventIds_Response {
    return {
      eventIds: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetOwnedEventIds_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.eventIds?.length) {
      writer.writePackedInt32(1, msg.eventIds);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetOwnedEventIds_Response,
    reader: BinaryReader
  ): Access_GetOwnedEventIds_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          if (reader.isDelimited()) {
            msg.eventIds.push(...reader.readPackedInt32());
          } else {
            msg.eventIds.push(reader.readInt32());
          }
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_GetRulesList_Payload = {
  /**
   * Serializes Access_GetRulesList_Payload to protobuf.
   */
  encode: function (_msg?: Partial<Access_GetRulesList_Payload>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes Access_GetRulesList_Payload from protobuf.
   */
  decode: function (_bytes?: ByteSource): Access_GetRulesList_Payload {
    return {};
  },

  /**
   * Initializes Access_GetRulesList_Payload with all fields set to their default value.
   */
  initialize: function (): Access_GetRulesList_Payload {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<Access_GetRulesList_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: Access_GetRulesList_Payload,
    _reader: BinaryReader
  ): Access_GetRulesList_Payload {
    return _msg;
  },
};

export const Access_GetRulesList_Response = {
  /**
   * Serializes Access_GetRulesList_Response to protobuf.
   */
  encode: function (msg: Partial<Access_GetRulesList_Response>): Uint8Array {
    return Access_GetRulesList_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_GetRulesList_Response from protobuf.
   */
  decode: function (bytes: ByteSource): Access_GetRulesList_Response {
    return Access_GetRulesList_Response._readMessage(
      Access_GetRulesList_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_GetRulesList_Response with all fields set to their default value.
   */
  initialize: function (): Access_GetRulesList_Response {
    return {
      items: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetRulesList_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.items?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.items as any,
        atoms.RuleListItem._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetRulesList_Response,
    reader: BinaryReader
  ): Access_GetRulesList_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = atoms.RuleListItem.initialize();
          reader.readMessage(m, atoms.RuleListItem._readMessage);
          msg.items.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_GetAllEventRules_Payload = {
  /**
   * Serializes Access_GetAllEventRules_Payload to protobuf.
   */
  encode: function (msg: Partial<Access_GetAllEventRules_Payload>): Uint8Array {
    return Access_GetAllEventRules_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_GetAllEventRules_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Access_GetAllEventRules_Payload {
    return Access_GetAllEventRules_Payload._readMessage(
      Access_GetAllEventRules_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_GetAllEventRules_Payload with all fields set to their default value.
   */
  initialize: function (): Access_GetAllEventRules_Payload {
    return {
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetAllEventRules_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.eventId) {
      writer.writeInt32(1, msg.eventId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetAllEventRules_Payload,
    reader: BinaryReader
  ): Access_GetAllEventRules_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.eventId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_GetAllEventRules_Response = {
  /**
   * Serializes Access_GetAllEventRules_Response to protobuf.
   */
  encode: function (
    msg: Partial<Access_GetAllEventRules_Response>
  ): Uint8Array {
    return Access_GetAllEventRules_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_GetAllEventRules_Response from protobuf.
   */
  decode: function (bytes: ByteSource): Access_GetAllEventRules_Response {
    return Access_GetAllEventRules_Response._readMessage(
      Access_GetAllEventRules_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_GetAllEventRules_Response with all fields set to their default value.
   */
  initialize: function (): Access_GetAllEventRules_Response {
    return {
      personRules: [],
      groupRules: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetAllEventRules_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.personRules?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.personRules as any,
        atoms.EventRuleListItem._writeMessage
      );
    }
    if (msg.groupRules?.length) {
      writer.writeRepeatedMessage(
        2,
        msg.groupRules as any,
        atoms.EventRuleListItem._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetAllEventRules_Response,
    reader: BinaryReader
  ): Access_GetAllEventRules_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = atoms.EventRuleListItem.initialize();
          reader.readMessage(m, atoms.EventRuleListItem._readMessage);
          msg.personRules.push(m);
          break;
        }
        case 2: {
          const m = atoms.EventRuleListItem.initialize();
          reader.readMessage(m, atoms.EventRuleListItem._readMessage);
          msg.groupRules.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_GetPersonAccess_Payload = {
  /**
   * Serializes Access_GetPersonAccess_Payload to protobuf.
   */
  encode: function (msg: Partial<Access_GetPersonAccess_Payload>): Uint8Array {
    return Access_GetPersonAccess_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_GetPersonAccess_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Access_GetPersonAccess_Payload {
    return Access_GetPersonAccess_Payload._readMessage(
      Access_GetPersonAccess_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_GetPersonAccess_Payload with all fields set to their default value.
   */
  initialize: function (): Access_GetPersonAccess_Payload {
    return {
      personId: 0,
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetPersonAccess_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    if (msg.eventId) {
      writer.writeInt32(2, msg.eventId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetPersonAccess_Payload,
    reader: BinaryReader
  ): Access_GetPersonAccess_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        case 2: {
          msg.eventId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_GetPersonAccess_Response = {
  /**
   * Serializes Access_GetPersonAccess_Response to protobuf.
   */
  encode: function (msg: Partial<Access_GetPersonAccess_Response>): Uint8Array {
    return Access_GetPersonAccess_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_GetPersonAccess_Response from protobuf.
   */
  decode: function (bytes: ByteSource): Access_GetPersonAccess_Response {
    return Access_GetPersonAccess_Response._readMessage(
      Access_GetPersonAccess_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_GetPersonAccess_Response with all fields set to their default value.
   */
  initialize: function (): Access_GetPersonAccess_Response {
    return {
      rules: atoms.AccessRules.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetPersonAccess_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.rules) {
      writer.writeMessage(1, msg.rules, atoms.AccessRules._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetPersonAccess_Response,
    reader: BinaryReader
  ): Access_GetPersonAccess_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.rules, atoms.AccessRules._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_GetGroupAccess_Payload = {
  /**
   * Serializes Access_GetGroupAccess_Payload to protobuf.
   */
  encode: function (msg: Partial<Access_GetGroupAccess_Payload>): Uint8Array {
    return Access_GetGroupAccess_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_GetGroupAccess_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Access_GetGroupAccess_Payload {
    return Access_GetGroupAccess_Payload._readMessage(
      Access_GetGroupAccess_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_GetGroupAccess_Payload with all fields set to their default value.
   */
  initialize: function (): Access_GetGroupAccess_Payload {
    return {
      groupId: 0,
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetGroupAccess_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.groupId) {
      writer.writeInt32(1, msg.groupId);
    }
    if (msg.eventId) {
      writer.writeInt32(2, msg.eventId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetGroupAccess_Payload,
    reader: BinaryReader
  ): Access_GetGroupAccess_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.groupId = reader.readInt32();
          break;
        }
        case 2: {
          msg.eventId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_GetGroupAccess_Response = {
  /**
   * Serializes Access_GetGroupAccess_Response to protobuf.
   */
  encode: function (msg: Partial<Access_GetGroupAccess_Response>): Uint8Array {
    return Access_GetGroupAccess_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_GetGroupAccess_Response from protobuf.
   */
  decode: function (bytes: ByteSource): Access_GetGroupAccess_Response {
    return Access_GetGroupAccess_Response._readMessage(
      Access_GetGroupAccess_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_GetGroupAccess_Response with all fields set to their default value.
   */
  initialize: function (): Access_GetGroupAccess_Response {
    return {
      rules: atoms.AccessRules.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetGroupAccess_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.rules) {
      writer.writeMessage(1, msg.rules, atoms.AccessRules._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetGroupAccess_Response,
    reader: BinaryReader
  ): Access_GetGroupAccess_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.rules, atoms.AccessRules._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_GetAllPersonAccess_Payload = {
  /**
   * Serializes Access_GetAllPersonAccess_Payload to protobuf.
   */
  encode: function (
    msg: Partial<Access_GetAllPersonAccess_Payload>
  ): Uint8Array {
    return Access_GetAllPersonAccess_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_GetAllPersonAccess_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Access_GetAllPersonAccess_Payload {
    return Access_GetAllPersonAccess_Payload._readMessage(
      Access_GetAllPersonAccess_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_GetAllPersonAccess_Payload with all fields set to their default value.
   */
  initialize: function (): Access_GetAllPersonAccess_Payload {
    return {
      personId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetAllPersonAccess_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetAllPersonAccess_Payload,
    reader: BinaryReader
  ): Access_GetAllPersonAccess_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_GetAllPersonAccess_Response = {
  /**
   * Serializes Access_GetAllPersonAccess_Response to protobuf.
   */
  encode: function (
    msg: Partial<Access_GetAllPersonAccess_Response>
  ): Uint8Array {
    return Access_GetAllPersonAccess_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_GetAllPersonAccess_Response from protobuf.
   */
  decode: function (bytes: ByteSource): Access_GetAllPersonAccess_Response {
    return Access_GetAllPersonAccess_Response._readMessage(
      Access_GetAllPersonAccess_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_GetAllPersonAccess_Response with all fields set to their default value.
   */
  initialize: function (): Access_GetAllPersonAccess_Response {
    return {
      rulesByEvent: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetAllPersonAccess_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.rulesByEvent) {
      writer.writeRepeatedMessage(
        1,
        Object.entries(msg.rulesByEvent).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        Access_GetAllPersonAccess_Response.RulesByEvent._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetAllPersonAccess_Response,
    reader: BinaryReader
  ): Access_GetAllPersonAccess_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const map = {} as Access_GetAllPersonAccess_Response.RulesByEvent;
          reader.readMessage(
            map,
            Access_GetAllPersonAccess_Response.RulesByEvent._readMessage
          );
          msg.rulesByEvent[map.key.toString()] = map.value;
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  RulesByEvent: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<Access_GetAllPersonAccess_Response.RulesByEvent>,
      writer: BinaryWriter
    ): BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(
          2,
          msg.value,
          atoms.RuleListItemExMap._writeMessage
        );
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: Access_GetAllPersonAccess_Response.RulesByEvent,
      reader: BinaryReader
    ): Access_GetAllPersonAccess_Response.RulesByEvent {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = atoms.RuleListItemExMap.initialize();
            reader.readMessage(msg.value, atoms.RuleListItemExMap._readMessage);
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },
};

export const Access_GetAllGroupAccess_Payload = {
  /**
   * Serializes Access_GetAllGroupAccess_Payload to protobuf.
   */
  encode: function (
    msg: Partial<Access_GetAllGroupAccess_Payload>
  ): Uint8Array {
    return Access_GetAllGroupAccess_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_GetAllGroupAccess_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Access_GetAllGroupAccess_Payload {
    return Access_GetAllGroupAccess_Payload._readMessage(
      Access_GetAllGroupAccess_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_GetAllGroupAccess_Payload with all fields set to their default value.
   */
  initialize: function (): Access_GetAllGroupAccess_Payload {
    return {
      groupId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetAllGroupAccess_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.groupId) {
      writer.writeInt32(1, msg.groupId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetAllGroupAccess_Payload,
    reader: BinaryReader
  ): Access_GetAllGroupAccess_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.groupId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_GetAllGroupAccess_Response = {
  /**
   * Serializes Access_GetAllGroupAccess_Response to protobuf.
   */
  encode: function (
    msg: Partial<Access_GetAllGroupAccess_Response>
  ): Uint8Array {
    return Access_GetAllGroupAccess_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_GetAllGroupAccess_Response from protobuf.
   */
  decode: function (bytes: ByteSource): Access_GetAllGroupAccess_Response {
    return Access_GetAllGroupAccess_Response._readMessage(
      Access_GetAllGroupAccess_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_GetAllGroupAccess_Response with all fields set to their default value.
   */
  initialize: function (): Access_GetAllGroupAccess_Response {
    return {
      rulesByEvent: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetAllGroupAccess_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.rulesByEvent) {
      writer.writeRepeatedMessage(
        1,
        Object.entries(msg.rulesByEvent).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        Access_GetAllGroupAccess_Response.RulesByEvent._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetAllGroupAccess_Response,
    reader: BinaryReader
  ): Access_GetAllGroupAccess_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const map = {} as Access_GetAllGroupAccess_Response.RulesByEvent;
          reader.readMessage(
            map,
            Access_GetAllGroupAccess_Response.RulesByEvent._readMessage
          );
          msg.rulesByEvent[map.key.toString()] = map.value;
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  RulesByEvent: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<Access_GetAllGroupAccess_Response.RulesByEvent>,
      writer: BinaryWriter
    ): BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(
          2,
          msg.value,
          atoms.RuleListItemExMap._writeMessage
        );
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: Access_GetAllGroupAccess_Response.RulesByEvent,
      reader: BinaryReader
    ): Access_GetAllGroupAccess_Response.RulesByEvent {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = atoms.RuleListItemExMap.initialize();
            reader.readMessage(msg.value, atoms.RuleListItemExMap._readMessage);
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },
};

export const Access_AddRuleForPerson_Payload = {
  /**
   * Serializes Access_AddRuleForPerson_Payload to protobuf.
   */
  encode: function (msg: Partial<Access_AddRuleForPerson_Payload>): Uint8Array {
    return Access_AddRuleForPerson_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_AddRuleForPerson_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Access_AddRuleForPerson_Payload {
    return Access_AddRuleForPerson_Payload._readMessage(
      Access_AddRuleForPerson_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_AddRuleForPerson_Payload with all fields set to their default value.
   */
  initialize: function (): Access_AddRuleForPerson_Payload {
    return {
      ruleName: "",
      ruleValue: atoms.RuleValue.initialize(),
      ruleType: "",
      personId: 0,
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_AddRuleForPerson_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.ruleName) {
      writer.writeString(1, msg.ruleName);
    }
    if (msg.ruleValue) {
      writer.writeMessage(2, msg.ruleValue, atoms.RuleValue._writeMessage);
    }
    if (msg.ruleType) {
      writer.writeString(3, msg.ruleType);
    }
    if (msg.personId) {
      writer.writeInt32(4, msg.personId);
    }
    if (msg.eventId) {
      writer.writeInt32(5, msg.eventId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_AddRuleForPerson_Payload,
    reader: BinaryReader
  ): Access_AddRuleForPerson_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ruleName = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.ruleValue, atoms.RuleValue._readMessage);
          break;
        }
        case 3: {
          msg.ruleType = reader.readString();
          break;
        }
        case 4: {
          msg.personId = reader.readInt32();
          break;
        }
        case 5: {
          msg.eventId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_AddRuleForPerson_Response = {
  /**
   * Serializes Access_AddRuleForPerson_Response to protobuf.
   */
  encode: function (
    msg: Partial<Access_AddRuleForPerson_Response>
  ): Uint8Array {
    return Access_AddRuleForPerson_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_AddRuleForPerson_Response from protobuf.
   */
  decode: function (bytes: ByteSource): Access_AddRuleForPerson_Response {
    return Access_AddRuleForPerson_Response._readMessage(
      Access_AddRuleForPerson_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_AddRuleForPerson_Response with all fields set to their default value.
   */
  initialize: function (): Access_AddRuleForPerson_Response {
    return {
      ruleId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_AddRuleForPerson_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.ruleId) {
      writer.writeInt32(1, msg.ruleId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_AddRuleForPerson_Response,
    reader: BinaryReader
  ): Access_AddRuleForPerson_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ruleId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_AddRuleForGroup_Payload = {
  /**
   * Serializes Access_AddRuleForGroup_Payload to protobuf.
   */
  encode: function (msg: Partial<Access_AddRuleForGroup_Payload>): Uint8Array {
    return Access_AddRuleForGroup_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_AddRuleForGroup_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Access_AddRuleForGroup_Payload {
    return Access_AddRuleForGroup_Payload._readMessage(
      Access_AddRuleForGroup_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_AddRuleForGroup_Payload with all fields set to their default value.
   */
  initialize: function (): Access_AddRuleForGroup_Payload {
    return {
      ruleName: "",
      ruleValue: atoms.RuleValue.initialize(),
      ruleType: "",
      groupId: 0,
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_AddRuleForGroup_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.ruleName) {
      writer.writeString(1, msg.ruleName);
    }
    if (msg.ruleValue) {
      writer.writeMessage(2, msg.ruleValue, atoms.RuleValue._writeMessage);
    }
    if (msg.ruleType) {
      writer.writeString(3, msg.ruleType);
    }
    if (msg.groupId) {
      writer.writeInt32(4, msg.groupId);
    }
    if (msg.eventId) {
      writer.writeInt32(5, msg.eventId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_AddRuleForGroup_Payload,
    reader: BinaryReader
  ): Access_AddRuleForGroup_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ruleName = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.ruleValue, atoms.RuleValue._readMessage);
          break;
        }
        case 3: {
          msg.ruleType = reader.readString();
          break;
        }
        case 4: {
          msg.groupId = reader.readInt32();
          break;
        }
        case 5: {
          msg.eventId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_AddRuleForGroup_Response = {
  /**
   * Serializes Access_AddRuleForGroup_Response to protobuf.
   */
  encode: function (msg: Partial<Access_AddRuleForGroup_Response>): Uint8Array {
    return Access_AddRuleForGroup_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_AddRuleForGroup_Response from protobuf.
   */
  decode: function (bytes: ByteSource): Access_AddRuleForGroup_Response {
    return Access_AddRuleForGroup_Response._readMessage(
      Access_AddRuleForGroup_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_AddRuleForGroup_Response with all fields set to their default value.
   */
  initialize: function (): Access_AddRuleForGroup_Response {
    return {
      ruleId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_AddRuleForGroup_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.ruleId) {
      writer.writeInt32(1, msg.ruleId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_AddRuleForGroup_Response,
    reader: BinaryReader
  ): Access_AddRuleForGroup_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ruleId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_UpdateRuleForPerson_Payload = {
  /**
   * Serializes Access_UpdateRuleForPerson_Payload to protobuf.
   */
  encode: function (
    msg: Partial<Access_UpdateRuleForPerson_Payload>
  ): Uint8Array {
    return Access_UpdateRuleForPerson_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_UpdateRuleForPerson_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Access_UpdateRuleForPerson_Payload {
    return Access_UpdateRuleForPerson_Payload._readMessage(
      Access_UpdateRuleForPerson_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_UpdateRuleForPerson_Payload with all fields set to their default value.
   */
  initialize: function (): Access_UpdateRuleForPerson_Payload {
    return {
      ruleId: 0,
      ruleValue: atoms.RuleValue.initialize(),
      ruleType: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_UpdateRuleForPerson_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.ruleId) {
      writer.writeInt32(1, msg.ruleId);
    }
    if (msg.ruleValue) {
      writer.writeMessage(2, msg.ruleValue, atoms.RuleValue._writeMessage);
    }
    if (msg.ruleType) {
      writer.writeString(3, msg.ruleType);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_UpdateRuleForPerson_Payload,
    reader: BinaryReader
  ): Access_UpdateRuleForPerson_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ruleId = reader.readInt32();
          break;
        }
        case 2: {
          reader.readMessage(msg.ruleValue, atoms.RuleValue._readMessage);
          break;
        }
        case 3: {
          msg.ruleType = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_UpdateRuleForGroup_Payload = {
  /**
   * Serializes Access_UpdateRuleForGroup_Payload to protobuf.
   */
  encode: function (
    msg: Partial<Access_UpdateRuleForGroup_Payload>
  ): Uint8Array {
    return Access_UpdateRuleForGroup_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_UpdateRuleForGroup_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Access_UpdateRuleForGroup_Payload {
    return Access_UpdateRuleForGroup_Payload._readMessage(
      Access_UpdateRuleForGroup_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_UpdateRuleForGroup_Payload with all fields set to their default value.
   */
  initialize: function (): Access_UpdateRuleForGroup_Payload {
    return {
      ruleId: 0,
      ruleValue: atoms.RuleValue.initialize(),
      ruleType: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_UpdateRuleForGroup_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.ruleId) {
      writer.writeInt32(1, msg.ruleId);
    }
    if (msg.ruleValue) {
      writer.writeMessage(2, msg.ruleValue, atoms.RuleValue._writeMessage);
    }
    if (msg.ruleType) {
      writer.writeString(3, msg.ruleType);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_UpdateRuleForGroup_Payload,
    reader: BinaryReader
  ): Access_UpdateRuleForGroup_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ruleId = reader.readInt32();
          break;
        }
        case 2: {
          reader.readMessage(msg.ruleValue, atoms.RuleValue._readMessage);
          break;
        }
        case 3: {
          msg.ruleType = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_DeleteRuleForPerson_Payload = {
  /**
   * Serializes Access_DeleteRuleForPerson_Payload to protobuf.
   */
  encode: function (
    msg: Partial<Access_DeleteRuleForPerson_Payload>
  ): Uint8Array {
    return Access_DeleteRuleForPerson_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_DeleteRuleForPerson_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Access_DeleteRuleForPerson_Payload {
    return Access_DeleteRuleForPerson_Payload._readMessage(
      Access_DeleteRuleForPerson_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_DeleteRuleForPerson_Payload with all fields set to their default value.
   */
  initialize: function (): Access_DeleteRuleForPerson_Payload {
    return {
      ruleId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_DeleteRuleForPerson_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.ruleId) {
      writer.writeInt32(1, msg.ruleId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_DeleteRuleForPerson_Payload,
    reader: BinaryReader
  ): Access_DeleteRuleForPerson_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ruleId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_DeleteRuleForGroup_Payload = {
  /**
   * Serializes Access_DeleteRuleForGroup_Payload to protobuf.
   */
  encode: function (
    msg: Partial<Access_DeleteRuleForGroup_Payload>
  ): Uint8Array {
    return Access_DeleteRuleForGroup_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_DeleteRuleForGroup_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Access_DeleteRuleForGroup_Payload {
    return Access_DeleteRuleForGroup_Payload._readMessage(
      Access_DeleteRuleForGroup_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_DeleteRuleForGroup_Payload with all fields set to their default value.
   */
  initialize: function (): Access_DeleteRuleForGroup_Payload {
    return {
      ruleId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_DeleteRuleForGroup_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.ruleId) {
      writer.writeInt32(1, msg.ruleId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_DeleteRuleForGroup_Payload,
    reader: BinaryReader
  ): Access_DeleteRuleForGroup_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ruleId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_ClearAccessCache_Payload = {
  /**
   * Serializes Access_ClearAccessCache_Payload to protobuf.
   */
  encode: function (msg: Partial<Access_ClearAccessCache_Payload>): Uint8Array {
    return Access_ClearAccessCache_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_ClearAccessCache_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Access_ClearAccessCache_Payload {
    return Access_ClearAccessCache_Payload._readMessage(
      Access_ClearAccessCache_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_ClearAccessCache_Payload with all fields set to their default value.
   */
  initialize: function (): Access_ClearAccessCache_Payload {
    return {
      personId: 0,
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_ClearAccessCache_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    if (msg.eventId) {
      writer.writeInt32(2, msg.eventId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_ClearAccessCache_Payload,
    reader: BinaryReader
  ): Access_ClearAccessCache_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        case 2: {
          msg.eventId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_AddSystemWideRuleForPerson_Payload = {
  /**
   * Serializes Access_AddSystemWideRuleForPerson_Payload to protobuf.
   */
  encode: function (
    msg: Partial<Access_AddSystemWideRuleForPerson_Payload>
  ): Uint8Array {
    return Access_AddSystemWideRuleForPerson_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_AddSystemWideRuleForPerson_Payload from protobuf.
   */
  decode: function (
    bytes: ByteSource
  ): Access_AddSystemWideRuleForPerson_Payload {
    return Access_AddSystemWideRuleForPerson_Payload._readMessage(
      Access_AddSystemWideRuleForPerson_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_AddSystemWideRuleForPerson_Payload with all fields set to their default value.
   */
  initialize: function (): Access_AddSystemWideRuleForPerson_Payload {
    return {
      ruleName: "",
      ruleValue: atoms.RuleValue.initialize(),
      ruleType: "",
      personId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_AddSystemWideRuleForPerson_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.ruleName) {
      writer.writeString(1, msg.ruleName);
    }
    if (msg.ruleValue) {
      writer.writeMessage(2, msg.ruleValue, atoms.RuleValue._writeMessage);
    }
    if (msg.ruleType) {
      writer.writeString(3, msg.ruleType);
    }
    if (msg.personId) {
      writer.writeInt32(4, msg.personId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_AddSystemWideRuleForPerson_Payload,
    reader: BinaryReader
  ): Access_AddSystemWideRuleForPerson_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ruleName = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.ruleValue, atoms.RuleValue._readMessage);
          break;
        }
        case 3: {
          msg.ruleType = reader.readString();
          break;
        }
        case 4: {
          msg.personId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_AddSystemWideRuleForPerson_Response = {
  /**
   * Serializes Access_AddSystemWideRuleForPerson_Response to protobuf.
   */
  encode: function (
    msg: Partial<Access_AddSystemWideRuleForPerson_Response>
  ): Uint8Array {
    return Access_AddSystemWideRuleForPerson_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_AddSystemWideRuleForPerson_Response from protobuf.
   */
  decode: function (
    bytes: ByteSource
  ): Access_AddSystemWideRuleForPerson_Response {
    return Access_AddSystemWideRuleForPerson_Response._readMessage(
      Access_AddSystemWideRuleForPerson_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_AddSystemWideRuleForPerson_Response with all fields set to their default value.
   */
  initialize: function (): Access_AddSystemWideRuleForPerson_Response {
    return {
      ruleId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_AddSystemWideRuleForPerson_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.ruleId) {
      writer.writeInt32(1, msg.ruleId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_AddSystemWideRuleForPerson_Response,
    reader: BinaryReader
  ): Access_AddSystemWideRuleForPerson_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ruleId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_AddSystemWideRuleForGroup_Payload = {
  /**
   * Serializes Access_AddSystemWideRuleForGroup_Payload to protobuf.
   */
  encode: function (
    msg: Partial<Access_AddSystemWideRuleForGroup_Payload>
  ): Uint8Array {
    return Access_AddSystemWideRuleForGroup_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_AddSystemWideRuleForGroup_Payload from protobuf.
   */
  decode: function (
    bytes: ByteSource
  ): Access_AddSystemWideRuleForGroup_Payload {
    return Access_AddSystemWideRuleForGroup_Payload._readMessage(
      Access_AddSystemWideRuleForGroup_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_AddSystemWideRuleForGroup_Payload with all fields set to their default value.
   */
  initialize: function (): Access_AddSystemWideRuleForGroup_Payload {
    return {
      ruleName: "",
      ruleValue: atoms.RuleValue.initialize(),
      ruleType: "",
      groupId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_AddSystemWideRuleForGroup_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.ruleName) {
      writer.writeString(1, msg.ruleName);
    }
    if (msg.ruleValue) {
      writer.writeMessage(2, msg.ruleValue, atoms.RuleValue._writeMessage);
    }
    if (msg.ruleType) {
      writer.writeString(3, msg.ruleType);
    }
    if (msg.groupId) {
      writer.writeInt32(4, msg.groupId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_AddSystemWideRuleForGroup_Payload,
    reader: BinaryReader
  ): Access_AddSystemWideRuleForGroup_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ruleName = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.ruleValue, atoms.RuleValue._readMessage);
          break;
        }
        case 3: {
          msg.ruleType = reader.readString();
          break;
        }
        case 4: {
          msg.groupId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Access_AddSystemWideRuleForGroup_Response = {
  /**
   * Serializes Access_AddSystemWideRuleForGroup_Response to protobuf.
   */
  encode: function (
    msg: Partial<Access_AddSystemWideRuleForGroup_Response>
  ): Uint8Array {
    return Access_AddSystemWideRuleForGroup_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Access_AddSystemWideRuleForGroup_Response from protobuf.
   */
  decode: function (
    bytes: ByteSource
  ): Access_AddSystemWideRuleForGroup_Response {
    return Access_AddSystemWideRuleForGroup_Response._readMessage(
      Access_AddSystemWideRuleForGroup_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Access_AddSystemWideRuleForGroup_Response with all fields set to their default value.
   */
  initialize: function (): Access_AddSystemWideRuleForGroup_Response {
    return {
      ruleId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_AddSystemWideRuleForGroup_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.ruleId) {
      writer.writeInt32(1, msg.ruleId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_AddSystemWideRuleForGroup_Response,
    reader: BinaryReader
  ): Access_AddSystemWideRuleForGroup_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ruleId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Persons_CreateAccount_Payload = {
  /**
   * Serializes Persons_CreateAccount_Payload to protobuf.
   */
  encode: function (msg: Partial<Persons_CreateAccount_Payload>): Uint8Array {
    return Persons_CreateAccount_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Persons_CreateAccount_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Persons_CreateAccount_Payload {
    return Persons_CreateAccount_Payload._readMessage(
      Persons_CreateAccount_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Persons_CreateAccount_Payload with all fields set to their default value.
   */
  initialize: function (): Persons_CreateAccount_Payload {
    return {
      email: "",
      password: "",
      title: "",
      city: "",
      phone: "",
      tenhouId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_CreateAccount_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.email) {
      writer.writeString(1, msg.email);
    }
    if (msg.password) {
      writer.writeString(2, msg.password);
    }
    if (msg.title) {
      writer.writeString(3, msg.title);
    }
    if (msg.city) {
      writer.writeString(4, msg.city);
    }
    if (msg.phone) {
      writer.writeString(5, msg.phone);
    }
    if (msg.tenhouId) {
      writer.writeString(6, msg.tenhouId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_CreateAccount_Payload,
    reader: BinaryReader
  ): Persons_CreateAccount_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.email = reader.readString();
          break;
        }
        case 2: {
          msg.password = reader.readString();
          break;
        }
        case 3: {
          msg.title = reader.readString();
          break;
        }
        case 4: {
          msg.city = reader.readString();
          break;
        }
        case 5: {
          msg.phone = reader.readString();
          break;
        }
        case 6: {
          msg.tenhouId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Persons_CreateAccount_Response = {
  /**
   * Serializes Persons_CreateAccount_Response to protobuf.
   */
  encode: function (msg: Partial<Persons_CreateAccount_Response>): Uint8Array {
    return Persons_CreateAccount_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Persons_CreateAccount_Response from protobuf.
   */
  decode: function (bytes: ByteSource): Persons_CreateAccount_Response {
    return Persons_CreateAccount_Response._readMessage(
      Persons_CreateAccount_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Persons_CreateAccount_Response with all fields set to their default value.
   */
  initialize: function (): Persons_CreateAccount_Response {
    return {
      personId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_CreateAccount_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_CreateAccount_Response,
    reader: BinaryReader
  ): Persons_CreateAccount_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Persons_CreateGroup_Payload = {
  /**
   * Serializes Persons_CreateGroup_Payload to protobuf.
   */
  encode: function (msg: Partial<Persons_CreateGroup_Payload>): Uint8Array {
    return Persons_CreateGroup_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Persons_CreateGroup_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Persons_CreateGroup_Payload {
    return Persons_CreateGroup_Payload._readMessage(
      Persons_CreateGroup_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Persons_CreateGroup_Payload with all fields set to their default value.
   */
  initialize: function (): Persons_CreateGroup_Payload {
    return {
      title: "",
      description: "",
      color: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_CreateGroup_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.title) {
      writer.writeString(1, msg.title);
    }
    if (msg.description) {
      writer.writeString(2, msg.description);
    }
    if (msg.color) {
      writer.writeString(3, msg.color);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_CreateGroup_Payload,
    reader: BinaryReader
  ): Persons_CreateGroup_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.title = reader.readString();
          break;
        }
        case 2: {
          msg.description = reader.readString();
          break;
        }
        case 3: {
          msg.color = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Persons_CreateGroup_Response = {
  /**
   * Serializes Persons_CreateGroup_Response to protobuf.
   */
  encode: function (msg: Partial<Persons_CreateGroup_Response>): Uint8Array {
    return Persons_CreateGroup_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Persons_CreateGroup_Response from protobuf.
   */
  decode: function (bytes: ByteSource): Persons_CreateGroup_Response {
    return Persons_CreateGroup_Response._readMessage(
      Persons_CreateGroup_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Persons_CreateGroup_Response with all fields set to their default value.
   */
  initialize: function (): Persons_CreateGroup_Response {
    return {
      groupId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_CreateGroup_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.groupId) {
      writer.writeInt32(1, msg.groupId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_CreateGroup_Response,
    reader: BinaryReader
  ): Persons_CreateGroup_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.groupId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Persons_UpdateGroup_Payload = {
  /**
   * Serializes Persons_UpdateGroup_Payload to protobuf.
   */
  encode: function (msg: Partial<Persons_UpdateGroup_Payload>): Uint8Array {
    return Persons_UpdateGroup_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Persons_UpdateGroup_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Persons_UpdateGroup_Payload {
    return Persons_UpdateGroup_Payload._readMessage(
      Persons_UpdateGroup_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Persons_UpdateGroup_Payload with all fields set to their default value.
   */
  initialize: function (): Persons_UpdateGroup_Payload {
    return {
      groupId: 0,
      title: "",
      description: "",
      color: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_UpdateGroup_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.groupId) {
      writer.writeInt32(1, msg.groupId);
    }
    if (msg.title) {
      writer.writeString(2, msg.title);
    }
    if (msg.description) {
      writer.writeString(3, msg.description);
    }
    if (msg.color) {
      writer.writeString(4, msg.color);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_UpdateGroup_Payload,
    reader: BinaryReader
  ): Persons_UpdateGroup_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.groupId = reader.readInt32();
          break;
        }
        case 2: {
          msg.title = reader.readString();
          break;
        }
        case 3: {
          msg.description = reader.readString();
          break;
        }
        case 4: {
          msg.color = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Persons_DeleteGroup_Payload = {
  /**
   * Serializes Persons_DeleteGroup_Payload to protobuf.
   */
  encode: function (msg: Partial<Persons_DeleteGroup_Payload>): Uint8Array {
    return Persons_DeleteGroup_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Persons_DeleteGroup_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Persons_DeleteGroup_Payload {
    return Persons_DeleteGroup_Payload._readMessage(
      Persons_DeleteGroup_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Persons_DeleteGroup_Payload with all fields set to their default value.
   */
  initialize: function (): Persons_DeleteGroup_Payload {
    return {
      groupId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_DeleteGroup_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.groupId) {
      writer.writeInt32(1, msg.groupId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_DeleteGroup_Payload,
    reader: BinaryReader
  ): Persons_DeleteGroup_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.groupId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Persons_AddPersonToGroup_Payload = {
  /**
   * Serializes Persons_AddPersonToGroup_Payload to protobuf.
   */
  encode: function (
    msg: Partial<Persons_AddPersonToGroup_Payload>
  ): Uint8Array {
    return Persons_AddPersonToGroup_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Persons_AddPersonToGroup_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Persons_AddPersonToGroup_Payload {
    return Persons_AddPersonToGroup_Payload._readMessage(
      Persons_AddPersonToGroup_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Persons_AddPersonToGroup_Payload with all fields set to their default value.
   */
  initialize: function (): Persons_AddPersonToGroup_Payload {
    return {
      personId: 0,
      groupId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_AddPersonToGroup_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    if (msg.groupId) {
      writer.writeInt32(2, msg.groupId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_AddPersonToGroup_Payload,
    reader: BinaryReader
  ): Persons_AddPersonToGroup_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        case 2: {
          msg.groupId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Persons_RemovePersonFromGroup_Payload = {
  /**
   * Serializes Persons_RemovePersonFromGroup_Payload to protobuf.
   */
  encode: function (
    msg: Partial<Persons_RemovePersonFromGroup_Payload>
  ): Uint8Array {
    return Persons_RemovePersonFromGroup_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Persons_RemovePersonFromGroup_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Persons_RemovePersonFromGroup_Payload {
    return Persons_RemovePersonFromGroup_Payload._readMessage(
      Persons_RemovePersonFromGroup_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Persons_RemovePersonFromGroup_Payload with all fields set to their default value.
   */
  initialize: function (): Persons_RemovePersonFromGroup_Payload {
    return {
      personId: 0,
      groupId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_RemovePersonFromGroup_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    if (msg.groupId) {
      writer.writeInt32(2, msg.groupId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_RemovePersonFromGroup_Payload,
    reader: BinaryReader
  ): Persons_RemovePersonFromGroup_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        case 2: {
          msg.groupId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Persons_GetPersonsOfGroup_Payload = {
  /**
   * Serializes Persons_GetPersonsOfGroup_Payload to protobuf.
   */
  encode: function (
    msg: Partial<Persons_GetPersonsOfGroup_Payload>
  ): Uint8Array {
    return Persons_GetPersonsOfGroup_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Persons_GetPersonsOfGroup_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Persons_GetPersonsOfGroup_Payload {
    return Persons_GetPersonsOfGroup_Payload._readMessage(
      Persons_GetPersonsOfGroup_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Persons_GetPersonsOfGroup_Payload with all fields set to their default value.
   */
  initialize: function (): Persons_GetPersonsOfGroup_Payload {
    return {
      groupId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_GetPersonsOfGroup_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.groupId) {
      writer.writeInt32(1, msg.groupId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_GetPersonsOfGroup_Payload,
    reader: BinaryReader
  ): Persons_GetPersonsOfGroup_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.groupId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Persons_GetPersonsOfGroup_Response = {
  /**
   * Serializes Persons_GetPersonsOfGroup_Response to protobuf.
   */
  encode: function (
    msg: Partial<Persons_GetPersonsOfGroup_Response>
  ): Uint8Array {
    return Persons_GetPersonsOfGroup_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Persons_GetPersonsOfGroup_Response from protobuf.
   */
  decode: function (bytes: ByteSource): Persons_GetPersonsOfGroup_Response {
    return Persons_GetPersonsOfGroup_Response._readMessage(
      Persons_GetPersonsOfGroup_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Persons_GetPersonsOfGroup_Response with all fields set to their default value.
   */
  initialize: function (): Persons_GetPersonsOfGroup_Response {
    return {
      persons: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_GetPersonsOfGroup_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.persons?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.persons as any,
        atoms.Person._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_GetPersonsOfGroup_Response,
    reader: BinaryReader
  ): Persons_GetPersonsOfGroup_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = atoms.Person.initialize();
          reader.readMessage(m, atoms.Person._readMessage);
          msg.persons.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Persons_GetGroupsOfPerson_Payload = {
  /**
   * Serializes Persons_GetGroupsOfPerson_Payload to protobuf.
   */
  encode: function (
    msg: Partial<Persons_GetGroupsOfPerson_Payload>
  ): Uint8Array {
    return Persons_GetGroupsOfPerson_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Persons_GetGroupsOfPerson_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Persons_GetGroupsOfPerson_Payload {
    return Persons_GetGroupsOfPerson_Payload._readMessage(
      Persons_GetGroupsOfPerson_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Persons_GetGroupsOfPerson_Payload with all fields set to their default value.
   */
  initialize: function (): Persons_GetGroupsOfPerson_Payload {
    return {
      personId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_GetGroupsOfPerson_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.personId) {
      writer.writeInt32(1, msg.personId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_GetGroupsOfPerson_Payload,
    reader: BinaryReader
  ): Persons_GetGroupsOfPerson_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Persons_GetGroupsOfPerson_Response = {
  /**
   * Serializes Persons_GetGroupsOfPerson_Response to protobuf.
   */
  encode: function (
    msg: Partial<Persons_GetGroupsOfPerson_Response>
  ): Uint8Array {
    return Persons_GetGroupsOfPerson_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Persons_GetGroupsOfPerson_Response from protobuf.
   */
  decode: function (bytes: ByteSource): Persons_GetGroupsOfPerson_Response {
    return Persons_GetGroupsOfPerson_Response._readMessage(
      Persons_GetGroupsOfPerson_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Persons_GetGroupsOfPerson_Response with all fields set to their default value.
   */
  initialize: function (): Persons_GetGroupsOfPerson_Response {
    return {
      groups: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_GetGroupsOfPerson_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.groups?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.groups as any,
        atoms.Group._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_GetGroupsOfPerson_Response,
    reader: BinaryReader
  ): Persons_GetGroupsOfPerson_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = atoms.Group.initialize();
          reader.readMessage(m, atoms.Group._readMessage);
          msg.groups.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Persons_UpdatePersonalInfo_Payload = {
  /**
   * Serializes Persons_UpdatePersonalInfo_Payload to protobuf.
   */
  encode: function (
    msg: Partial<Persons_UpdatePersonalInfo_Payload>
  ): Uint8Array {
    return Persons_UpdatePersonalInfo_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Persons_UpdatePersonalInfo_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Persons_UpdatePersonalInfo_Payload {
    return Persons_UpdatePersonalInfo_Payload._readMessage(
      Persons_UpdatePersonalInfo_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Persons_UpdatePersonalInfo_Payload with all fields set to their default value.
   */
  initialize: function (): Persons_UpdatePersonalInfo_Payload {
    return {
      id: 0,
      title: "",
      country: "",
      city: "",
      email: "",
      phone: "",
      tenhouId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_UpdatePersonalInfo_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeInt32(1, msg.id);
    }
    if (msg.title) {
      writer.writeString(2, msg.title);
    }
    if (msg.country) {
      writer.writeString(3, msg.country);
    }
    if (msg.city) {
      writer.writeString(4, msg.city);
    }
    if (msg.email) {
      writer.writeString(5, msg.email);
    }
    if (msg.phone) {
      writer.writeString(6, msg.phone);
    }
    if (msg.tenhouId) {
      writer.writeString(7, msg.tenhouId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_UpdatePersonalInfo_Payload,
    reader: BinaryReader
  ): Persons_UpdatePersonalInfo_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readInt32();
          break;
        }
        case 2: {
          msg.title = reader.readString();
          break;
        }
        case 3: {
          msg.country = reader.readString();
          break;
        }
        case 4: {
          msg.city = reader.readString();
          break;
        }
        case 5: {
          msg.email = reader.readString();
          break;
        }
        case 6: {
          msg.phone = reader.readString();
          break;
        }
        case 7: {
          msg.tenhouId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Persons_GetPersonalInfo_Payload = {
  /**
   * Serializes Persons_GetPersonalInfo_Payload to protobuf.
   */
  encode: function (msg: Partial<Persons_GetPersonalInfo_Payload>): Uint8Array {
    return Persons_GetPersonalInfo_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Persons_GetPersonalInfo_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Persons_GetPersonalInfo_Payload {
    return Persons_GetPersonalInfo_Payload._readMessage(
      Persons_GetPersonalInfo_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Persons_GetPersonalInfo_Payload with all fields set to their default value.
   */
  initialize: function (): Persons_GetPersonalInfo_Payload {
    return {
      ids: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_GetPersonalInfo_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.ids?.length) {
      writer.writePackedInt32(1, msg.ids);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_GetPersonalInfo_Payload,
    reader: BinaryReader
  ): Persons_GetPersonalInfo_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          if (reader.isDelimited()) {
            msg.ids.push(...reader.readPackedInt32());
          } else {
            msg.ids.push(reader.readInt32());
          }
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Persons_GetPersonalInfo_Response = {
  /**
   * Serializes Persons_GetPersonalInfo_Response to protobuf.
   */
  encode: function (
    msg: Partial<Persons_GetPersonalInfo_Response>
  ): Uint8Array {
    return Persons_GetPersonalInfo_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Persons_GetPersonalInfo_Response from protobuf.
   */
  decode: function (bytes: ByteSource): Persons_GetPersonalInfo_Response {
    return Persons_GetPersonalInfo_Response._readMessage(
      Persons_GetPersonalInfo_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Persons_GetPersonalInfo_Response with all fields set to their default value.
   */
  initialize: function (): Persons_GetPersonalInfo_Response {
    return {
      persons: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_GetPersonalInfo_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.persons?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.persons as any,
        atoms.PersonEx._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_GetPersonalInfo_Response,
    reader: BinaryReader
  ): Persons_GetPersonalInfo_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = atoms.PersonEx.initialize();
          reader.readMessage(m, atoms.PersonEx._readMessage);
          msg.persons.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Persons_FindByTenhouIds_Payload = {
  /**
   * Serializes Persons_FindByTenhouIds_Payload to protobuf.
   */
  encode: function (msg: Partial<Persons_FindByTenhouIds_Payload>): Uint8Array {
    return Persons_FindByTenhouIds_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Persons_FindByTenhouIds_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Persons_FindByTenhouIds_Payload {
    return Persons_FindByTenhouIds_Payload._readMessage(
      Persons_FindByTenhouIds_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Persons_FindByTenhouIds_Payload with all fields set to their default value.
   */
  initialize: function (): Persons_FindByTenhouIds_Payload {
    return {
      ids: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_FindByTenhouIds_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.ids?.length) {
      writer.writeRepeatedString(1, msg.ids);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_FindByTenhouIds_Payload,
    reader: BinaryReader
  ): Persons_FindByTenhouIds_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ids.push(reader.readString());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Persons_FindByTenhouIds_Response = {
  /**
   * Serializes Persons_FindByTenhouIds_Response to protobuf.
   */
  encode: function (
    msg: Partial<Persons_FindByTenhouIds_Response>
  ): Uint8Array {
    return Persons_FindByTenhouIds_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Persons_FindByTenhouIds_Response from protobuf.
   */
  decode: function (bytes: ByteSource): Persons_FindByTenhouIds_Response {
    return Persons_FindByTenhouIds_Response._readMessage(
      Persons_FindByTenhouIds_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Persons_FindByTenhouIds_Response with all fields set to their default value.
   */
  initialize: function (): Persons_FindByTenhouIds_Response {
    return {
      persons: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_FindByTenhouIds_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.persons?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.persons as any,
        atoms.PersonEx._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_FindByTenhouIds_Response,
    reader: BinaryReader
  ): Persons_FindByTenhouIds_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = atoms.PersonEx.initialize();
          reader.readMessage(m, atoms.PersonEx._readMessage);
          msg.persons.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Persons_FindByTitle_Payload = {
  /**
   * Serializes Persons_FindByTitle_Payload to protobuf.
   */
  encode: function (msg: Partial<Persons_FindByTitle_Payload>): Uint8Array {
    return Persons_FindByTitle_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Persons_FindByTitle_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Persons_FindByTitle_Payload {
    return Persons_FindByTitle_Payload._readMessage(
      Persons_FindByTitle_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Persons_FindByTitle_Payload with all fields set to their default value.
   */
  initialize: function (): Persons_FindByTitle_Payload {
    return {
      query: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_FindByTitle_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.query) {
      writer.writeString(1, msg.query);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_FindByTitle_Payload,
    reader: BinaryReader
  ): Persons_FindByTitle_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.query = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Persons_FindByTitle_Response = {
  /**
   * Serializes Persons_FindByTitle_Response to protobuf.
   */
  encode: function (msg: Partial<Persons_FindByTitle_Response>): Uint8Array {
    return Persons_FindByTitle_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Persons_FindByTitle_Response from protobuf.
   */
  decode: function (bytes: ByteSource): Persons_FindByTitle_Response {
    return Persons_FindByTitle_Response._readMessage(
      Persons_FindByTitle_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Persons_FindByTitle_Response with all fields set to their default value.
   */
  initialize: function (): Persons_FindByTitle_Response {
    return {
      persons: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_FindByTitle_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.persons?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.persons as any,
        atoms.Person._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_FindByTitle_Response,
    reader: BinaryReader
  ): Persons_FindByTitle_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = atoms.Person.initialize();
          reader.readMessage(m, atoms.Person._readMessage);
          msg.persons.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Persons_GetGroups_Payload = {
  /**
   * Serializes Persons_GetGroups_Payload to protobuf.
   */
  encode: function (msg: Partial<Persons_GetGroups_Payload>): Uint8Array {
    return Persons_GetGroups_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Persons_GetGroups_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Persons_GetGroups_Payload {
    return Persons_GetGroups_Payload._readMessage(
      Persons_GetGroups_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Persons_GetGroups_Payload with all fields set to their default value.
   */
  initialize: function (): Persons_GetGroups_Payload {
    return {
      ids: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_GetGroups_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.ids?.length) {
      writer.writePackedInt32(1, msg.ids);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_GetGroups_Payload,
    reader: BinaryReader
  ): Persons_GetGroups_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          if (reader.isDelimited()) {
            msg.ids.push(...reader.readPackedInt32());
          } else {
            msg.ids.push(reader.readInt32());
          }
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Persons_GetGroups_Response = {
  /**
   * Serializes Persons_GetGroups_Response to protobuf.
   */
  encode: function (msg: Partial<Persons_GetGroups_Response>): Uint8Array {
    return Persons_GetGroups_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Persons_GetGroups_Response from protobuf.
   */
  decode: function (bytes: ByteSource): Persons_GetGroups_Response {
    return Persons_GetGroups_Response._readMessage(
      Persons_GetGroups_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Persons_GetGroups_Response with all fields set to their default value.
   */
  initialize: function (): Persons_GetGroups_Response {
    return {
      groups: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_GetGroups_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.groups?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.groups as any,
        atoms.Group._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_GetGroups_Response,
    reader: BinaryReader
  ): Persons_GetGroups_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = atoms.Group.initialize();
          reader.readMessage(m, atoms.Group._readMessage);
          msg.groups.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const Auth_RequestRegistration_PayloadJSON = {
  /**
   * Serializes Auth_RequestRegistration_Payload to JSON.
   */
  encode: function (msg: Partial<Auth_RequestRegistration_Payload>): string {
    return JSON.stringify(
      Auth_RequestRegistration_PayloadJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Auth_RequestRegistration_Payload from JSON.
   */
  decode: function (json: string): Auth_RequestRegistration_Payload {
    return Auth_RequestRegistration_PayloadJSON._readMessage(
      Auth_RequestRegistration_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Auth_RequestRegistration_Payload with all fields set to their default value.
   */
  initialize: function (): Auth_RequestRegistration_Payload {
    return {
      email: "",
      title: "",
      password: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_RequestRegistration_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.email) {
      json["email"] = msg.email;
    }
    if (msg.title) {
      json["title"] = msg.title;
    }
    if (msg.password) {
      json["password"] = msg.password;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Auth_RequestRegistration_Payload,
    json: any
  ): Auth_RequestRegistration_Payload {
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    const _password_ = json["password"];
    if (_password_) {
      msg.password = _password_;
    }
    return msg;
  },
};

export const Auth_RequestRegistration_ResponseJSON = {
  /**
   * Serializes Auth_RequestRegistration_Response to JSON.
   */
  encode: function (msg: Partial<Auth_RequestRegistration_Response>): string {
    return JSON.stringify(
      Auth_RequestRegistration_ResponseJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Auth_RequestRegistration_Response from JSON.
   */
  decode: function (json: string): Auth_RequestRegistration_Response {
    return Auth_RequestRegistration_ResponseJSON._readMessage(
      Auth_RequestRegistration_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Auth_RequestRegistration_Response with all fields set to their default value.
   */
  initialize: function (): Auth_RequestRegistration_Response {
    return {
      approvalCode: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_RequestRegistration_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.approvalCode) {
      json["approvalCode"] = msg.approvalCode;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Auth_RequestRegistration_Response,
    json: any
  ): Auth_RequestRegistration_Response {
    const _approvalCode_ = json["approvalCode"];
    if (_approvalCode_) {
      msg.approvalCode = _approvalCode_;
    }
    return msg;
  },
};

export const Auth_ApproveRegistration_PayloadJSON = {
  /**
   * Serializes Auth_ApproveRegistration_Payload to JSON.
   */
  encode: function (msg: Partial<Auth_ApproveRegistration_Payload>): string {
    return JSON.stringify(
      Auth_ApproveRegistration_PayloadJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Auth_ApproveRegistration_Payload from JSON.
   */
  decode: function (json: string): Auth_ApproveRegistration_Payload {
    return Auth_ApproveRegistration_PayloadJSON._readMessage(
      Auth_ApproveRegistration_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Auth_ApproveRegistration_Payload with all fields set to their default value.
   */
  initialize: function (): Auth_ApproveRegistration_Payload {
    return {
      approvalCode: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_ApproveRegistration_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.approvalCode) {
      json["approvalCode"] = msg.approvalCode;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Auth_ApproveRegistration_Payload,
    json: any
  ): Auth_ApproveRegistration_Payload {
    const _approvalCode_ = json["approvalCode"];
    if (_approvalCode_) {
      msg.approvalCode = _approvalCode_;
    }
    return msg;
  },
};

export const Auth_ApproveRegistration_ResponseJSON = {
  /**
   * Serializes Auth_ApproveRegistration_Response to JSON.
   */
  encode: function (msg: Partial<Auth_ApproveRegistration_Response>): string {
    return JSON.stringify(
      Auth_ApproveRegistration_ResponseJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Auth_ApproveRegistration_Response from JSON.
   */
  decode: function (json: string): Auth_ApproveRegistration_Response {
    return Auth_ApproveRegistration_ResponseJSON._readMessage(
      Auth_ApproveRegistration_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Auth_ApproveRegistration_Response with all fields set to their default value.
   */
  initialize: function (): Auth_ApproveRegistration_Response {
    return {
      personId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_ApproveRegistration_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Auth_ApproveRegistration_Response,
    json: any
  ): Auth_ApproveRegistration_Response {
    const _personId_ = json["personId"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    return msg;
  },
};

export const Auth_Authorize_PayloadJSON = {
  /**
   * Serializes Auth_Authorize_Payload to JSON.
   */
  encode: function (msg: Partial<Auth_Authorize_Payload>): string {
    return JSON.stringify(Auth_Authorize_PayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes Auth_Authorize_Payload from JSON.
   */
  decode: function (json: string): Auth_Authorize_Payload {
    return Auth_Authorize_PayloadJSON._readMessage(
      Auth_Authorize_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Auth_Authorize_Payload with all fields set to their default value.
   */
  initialize: function (): Auth_Authorize_Payload {
    return {
      email: "",
      password: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_Authorize_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.email) {
      json["email"] = msg.email;
    }
    if (msg.password) {
      json["password"] = msg.password;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Auth_Authorize_Payload,
    json: any
  ): Auth_Authorize_Payload {
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    const _password_ = json["password"];
    if (_password_) {
      msg.password = _password_;
    }
    return msg;
  },
};

export const Auth_Authorize_ResponseJSON = {
  /**
   * Serializes Auth_Authorize_Response to JSON.
   */
  encode: function (msg: Partial<Auth_Authorize_Response>): string {
    return JSON.stringify(Auth_Authorize_ResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes Auth_Authorize_Response from JSON.
   */
  decode: function (json: string): Auth_Authorize_Response {
    return Auth_Authorize_ResponseJSON._readMessage(
      Auth_Authorize_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Auth_Authorize_Response with all fields set to their default value.
   */
  initialize: function (): Auth_Authorize_Response {
    return {
      personId: 0,
      authToken: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_Authorize_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    if (msg.authToken) {
      json["authToken"] = msg.authToken;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Auth_Authorize_Response,
    json: any
  ): Auth_Authorize_Response {
    const _personId_ = json["personId"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    const _authToken_ = json["authToken"];
    if (_authToken_) {
      msg.authToken = _authToken_;
    }
    return msg;
  },
};

export const Auth_QuickAuthorize_PayloadJSON = {
  /**
   * Serializes Auth_QuickAuthorize_Payload to JSON.
   */
  encode: function (msg: Partial<Auth_QuickAuthorize_Payload>): string {
    return JSON.stringify(Auth_QuickAuthorize_PayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes Auth_QuickAuthorize_Payload from JSON.
   */
  decode: function (json: string): Auth_QuickAuthorize_Payload {
    return Auth_QuickAuthorize_PayloadJSON._readMessage(
      Auth_QuickAuthorize_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Auth_QuickAuthorize_Payload with all fields set to their default value.
   */
  initialize: function (): Auth_QuickAuthorize_Payload {
    return {
      personId: 0,
      authToken: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_QuickAuthorize_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    if (msg.authToken) {
      json["authToken"] = msg.authToken;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Auth_QuickAuthorize_Payload,
    json: any
  ): Auth_QuickAuthorize_Payload {
    const _personId_ = json["personId"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    const _authToken_ = json["authToken"];
    if (_authToken_) {
      msg.authToken = _authToken_;
    }
    return msg;
  },
};

export const Auth_QuickAuthorize_ResponseJSON = {
  /**
   * Serializes Auth_QuickAuthorize_Response to JSON.
   */
  encode: function (msg: Partial<Auth_QuickAuthorize_Response>): string {
    return JSON.stringify(Auth_QuickAuthorize_ResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes Auth_QuickAuthorize_Response from JSON.
   */
  decode: function (json: string): Auth_QuickAuthorize_Response {
    return Auth_QuickAuthorize_ResponseJSON._readMessage(
      Auth_QuickAuthorize_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Auth_QuickAuthorize_Response with all fields set to their default value.
   */
  initialize: function (): Auth_QuickAuthorize_Response {
    return {
      authSuccess: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_QuickAuthorize_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.authSuccess) {
      json["authSuccess"] = msg.authSuccess;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Auth_QuickAuthorize_Response,
    json: any
  ): Auth_QuickAuthorize_Response {
    const _authSuccess_ = json["authSuccess"];
    if (_authSuccess_) {
      msg.authSuccess = _authSuccess_;
    }
    return msg;
  },
};

export const Auth_Me_PayloadJSON = {
  /**
   * Serializes Auth_Me_Payload to JSON.
   */
  encode: function (msg: Partial<Auth_Me_Payload>): string {
    return JSON.stringify(Auth_Me_PayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes Auth_Me_Payload from JSON.
   */
  decode: function (json: string): Auth_Me_Payload {
    return Auth_Me_PayloadJSON._readMessage(
      Auth_Me_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Auth_Me_Payload with all fields set to their default value.
   */
  initialize: function (): Auth_Me_Payload {
    return {
      personId: 0,
      authToken: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_Me_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    if (msg.authToken) {
      json["authToken"] = msg.authToken;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Auth_Me_Payload, json: any): Auth_Me_Payload {
    const _personId_ = json["personId"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    const _authToken_ = json["authToken"];
    if (_authToken_) {
      msg.authToken = _authToken_;
    }
    return msg;
  },
};

export const Auth_Me_ResponseJSON = {
  /**
   * Serializes Auth_Me_Response to JSON.
   */
  encode: function (msg: Partial<Auth_Me_Response>): string {
    return JSON.stringify(Auth_Me_ResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes Auth_Me_Response from JSON.
   */
  decode: function (json: string): Auth_Me_Response {
    return Auth_Me_ResponseJSON._readMessage(
      Auth_Me_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Auth_Me_Response with all fields set to their default value.
   */
  initialize: function (): Auth_Me_Response {
    return {
      personId: 0,
      country: "",
      city: "",
      email: "",
      phone: "",
      tenhouId: "",
      title: "",
      groups: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_Me_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    if (msg.country) {
      json["country"] = msg.country;
    }
    if (msg.city) {
      json["city"] = msg.city;
    }
    if (msg.email) {
      json["email"] = msg.email;
    }
    if (msg.phone) {
      json["phone"] = msg.phone;
    }
    if (msg.tenhouId) {
      json["tenhouId"] = msg.tenhouId;
    }
    if (msg.title) {
      json["title"] = msg.title;
    }
    if (msg.groups?.length) {
      json["groups"] = msg.groups;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Auth_Me_Response, json: any): Auth_Me_Response {
    const _personId_ = json["personId"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    const _country_ = json["country"];
    if (_country_) {
      msg.country = _country_;
    }
    const _city_ = json["city"];
    if (_city_) {
      msg.city = _city_;
    }
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    const _phone_ = json["phone"];
    if (_phone_) {
      msg.phone = _phone_;
    }
    const _tenhouId_ = json["tenhouId"];
    if (_tenhouId_) {
      msg.tenhouId = _tenhouId_;
    }
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    const _groups_ = json["groups"];
    if (_groups_) {
      msg.groups = _groups_;
    }
    return msg;
  },
};

export const Auth_ChangePassword_PayloadJSON = {
  /**
   * Serializes Auth_ChangePassword_Payload to JSON.
   */
  encode: function (msg: Partial<Auth_ChangePassword_Payload>): string {
    return JSON.stringify(Auth_ChangePassword_PayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes Auth_ChangePassword_Payload from JSON.
   */
  decode: function (json: string): Auth_ChangePassword_Payload {
    return Auth_ChangePassword_PayloadJSON._readMessage(
      Auth_ChangePassword_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Auth_ChangePassword_Payload with all fields set to their default value.
   */
  initialize: function (): Auth_ChangePassword_Payload {
    return {
      email: "",
      password: "",
      newPassword: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_ChangePassword_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.email) {
      json["email"] = msg.email;
    }
    if (msg.password) {
      json["password"] = msg.password;
    }
    if (msg.newPassword) {
      json["newPassword"] = msg.newPassword;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Auth_ChangePassword_Payload,
    json: any
  ): Auth_ChangePassword_Payload {
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    const _password_ = json["password"];
    if (_password_) {
      msg.password = _password_;
    }
    const _newPassword_ = json["newPassword"];
    if (_newPassword_) {
      msg.newPassword = _newPassword_;
    }
    return msg;
  },
};

export const Auth_ChangePassword_ResponseJSON = {
  /**
   * Serializes Auth_ChangePassword_Response to JSON.
   */
  encode: function (msg: Partial<Auth_ChangePassword_Response>): string {
    return JSON.stringify(Auth_ChangePassword_ResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes Auth_ChangePassword_Response from JSON.
   */
  decode: function (json: string): Auth_ChangePassword_Response {
    return Auth_ChangePassword_ResponseJSON._readMessage(
      Auth_ChangePassword_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Auth_ChangePassword_Response with all fields set to their default value.
   */
  initialize: function (): Auth_ChangePassword_Response {
    return {
      authToken: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_ChangePassword_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.authToken) {
      json["authToken"] = msg.authToken;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Auth_ChangePassword_Response,
    json: any
  ): Auth_ChangePassword_Response {
    const _authToken_ = json["authToken"];
    if (_authToken_) {
      msg.authToken = _authToken_;
    }
    return msg;
  },
};

export const Auth_RequestResetPassword_PayloadJSON = {
  /**
   * Serializes Auth_RequestResetPassword_Payload to JSON.
   */
  encode: function (msg: Partial<Auth_RequestResetPassword_Payload>): string {
    return JSON.stringify(
      Auth_RequestResetPassword_PayloadJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Auth_RequestResetPassword_Payload from JSON.
   */
  decode: function (json: string): Auth_RequestResetPassword_Payload {
    return Auth_RequestResetPassword_PayloadJSON._readMessage(
      Auth_RequestResetPassword_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Auth_RequestResetPassword_Payload with all fields set to their default value.
   */
  initialize: function (): Auth_RequestResetPassword_Payload {
    return {
      email: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_RequestResetPassword_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.email) {
      json["email"] = msg.email;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Auth_RequestResetPassword_Payload,
    json: any
  ): Auth_RequestResetPassword_Payload {
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    return msg;
  },
};

export const Auth_RequestResetPassword_ResponseJSON = {
  /**
   * Serializes Auth_RequestResetPassword_Response to JSON.
   */
  encode: function (msg: Partial<Auth_RequestResetPassword_Response>): string {
    return JSON.stringify(
      Auth_RequestResetPassword_ResponseJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Auth_RequestResetPassword_Response from JSON.
   */
  decode: function (json: string): Auth_RequestResetPassword_Response {
    return Auth_RequestResetPassword_ResponseJSON._readMessage(
      Auth_RequestResetPassword_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Auth_RequestResetPassword_Response with all fields set to their default value.
   */
  initialize: function (): Auth_RequestResetPassword_Response {
    return {
      resetToken: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_RequestResetPassword_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.resetToken) {
      json["resetToken"] = msg.resetToken;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Auth_RequestResetPassword_Response,
    json: any
  ): Auth_RequestResetPassword_Response {
    const _resetToken_ = json["resetToken"];
    if (_resetToken_) {
      msg.resetToken = _resetToken_;
    }
    return msg;
  },
};

export const Auth_ApproveResetPassword_PayloadJSON = {
  /**
   * Serializes Auth_ApproveResetPassword_Payload to JSON.
   */
  encode: function (msg: Partial<Auth_ApproveResetPassword_Payload>): string {
    return JSON.stringify(
      Auth_ApproveResetPassword_PayloadJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Auth_ApproveResetPassword_Payload from JSON.
   */
  decode: function (json: string): Auth_ApproveResetPassword_Payload {
    return Auth_ApproveResetPassword_PayloadJSON._readMessage(
      Auth_ApproveResetPassword_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Auth_ApproveResetPassword_Payload with all fields set to their default value.
   */
  initialize: function (): Auth_ApproveResetPassword_Payload {
    return {
      email: "",
      resetToken: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_ApproveResetPassword_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.email) {
      json["email"] = msg.email;
    }
    if (msg.resetToken) {
      json["resetToken"] = msg.resetToken;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Auth_ApproveResetPassword_Payload,
    json: any
  ): Auth_ApproveResetPassword_Payload {
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    const _resetToken_ = json["resetToken"];
    if (_resetToken_) {
      msg.resetToken = _resetToken_;
    }
    return msg;
  },
};

export const Auth_ApproveResetPassword_ResponseJSON = {
  /**
   * Serializes Auth_ApproveResetPassword_Response to JSON.
   */
  encode: function (msg: Partial<Auth_ApproveResetPassword_Response>): string {
    return JSON.stringify(
      Auth_ApproveResetPassword_ResponseJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Auth_ApproveResetPassword_Response from JSON.
   */
  decode: function (json: string): Auth_ApproveResetPassword_Response {
    return Auth_ApproveResetPassword_ResponseJSON._readMessage(
      Auth_ApproveResetPassword_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Auth_ApproveResetPassword_Response with all fields set to their default value.
   */
  initialize: function (): Auth_ApproveResetPassword_Response {
    return {
      newTmpPassword: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Auth_ApproveResetPassword_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.newTmpPassword) {
      json["newTmpPassword"] = msg.newTmpPassword;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Auth_ApproveResetPassword_Response,
    json: any
  ): Auth_ApproveResetPassword_Response {
    const _newTmpPassword_ = json["newTmpPassword"];
    if (_newTmpPassword_) {
      msg.newTmpPassword = _newTmpPassword_;
    }
    return msg;
  },
};

export const Access_GetAccessRules_PayloadJSON = {
  /**
   * Serializes Access_GetAccessRules_Payload to JSON.
   */
  encode: function (msg: Partial<Access_GetAccessRules_Payload>): string {
    return JSON.stringify(Access_GetAccessRules_PayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes Access_GetAccessRules_Payload from JSON.
   */
  decode: function (json: string): Access_GetAccessRules_Payload {
    return Access_GetAccessRules_PayloadJSON._readMessage(
      Access_GetAccessRules_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_GetAccessRules_Payload with all fields set to their default value.
   */
  initialize: function (): Access_GetAccessRules_Payload {
    return {
      personId: 0,
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetAccessRules_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    if (msg.eventId) {
      json["eventId"] = msg.eventId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetAccessRules_Payload,
    json: any
  ): Access_GetAccessRules_Payload {
    const _personId_ = json["personId"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    const _eventId_ = json["eventId"];
    if (_eventId_) {
      msg.eventId = _eventId_;
    }
    return msg;
  },
};

export const Access_GetAccessRules_ResponseJSON = {
  /**
   * Serializes Access_GetAccessRules_Response to JSON.
   */
  encode: function (msg: Partial<Access_GetAccessRules_Response>): string {
    return JSON.stringify(
      Access_GetAccessRules_ResponseJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Access_GetAccessRules_Response from JSON.
   */
  decode: function (json: string): Access_GetAccessRules_Response {
    return Access_GetAccessRules_ResponseJSON._readMessage(
      Access_GetAccessRules_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_GetAccessRules_Response with all fields set to their default value.
   */
  initialize: function (): Access_GetAccessRules_Response {
    return {
      rules: atoms.AccessRulesJSON.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetAccessRules_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.rules) {
      const _rules_ = atoms.AccessRulesJSON._writeMessage(msg.rules);
      if (Object.keys(_rules_).length > 0) {
        json["rules"] = _rules_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetAccessRules_Response,
    json: any
  ): Access_GetAccessRules_Response {
    const _rules_ = json["rules"];
    if (_rules_) {
      const m = atoms.AccessRules.initialize();
      atoms.AccessRulesJSON._readMessage(m, _rules_);
      msg.rules = m;
    }
    return msg;
  },
};

export const Access_GetRuleValue_PayloadJSON = {
  /**
   * Serializes Access_GetRuleValue_Payload to JSON.
   */
  encode: function (msg: Partial<Access_GetRuleValue_Payload>): string {
    return JSON.stringify(Access_GetRuleValue_PayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes Access_GetRuleValue_Payload from JSON.
   */
  decode: function (json: string): Access_GetRuleValue_Payload {
    return Access_GetRuleValue_PayloadJSON._readMessage(
      Access_GetRuleValue_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_GetRuleValue_Payload with all fields set to their default value.
   */
  initialize: function (): Access_GetRuleValue_Payload {
    return {
      personId: 0,
      eventId: 0,
      ruleName: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetRuleValue_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    if (msg.eventId) {
      json["eventId"] = msg.eventId;
    }
    if (msg.ruleName) {
      json["ruleName"] = msg.ruleName;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetRuleValue_Payload,
    json: any
  ): Access_GetRuleValue_Payload {
    const _personId_ = json["personId"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    const _eventId_ = json["eventId"];
    if (_eventId_) {
      msg.eventId = _eventId_;
    }
    const _ruleName_ = json["ruleName"];
    if (_ruleName_) {
      msg.ruleName = _ruleName_;
    }
    return msg;
  },
};

export const Access_GetRuleValue_ResponseJSON = {
  /**
   * Serializes Access_GetRuleValue_Response to JSON.
   */
  encode: function (msg: Partial<Access_GetRuleValue_Response>): string {
    return JSON.stringify(Access_GetRuleValue_ResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes Access_GetRuleValue_Response from JSON.
   */
  decode: function (json: string): Access_GetRuleValue_Response {
    return Access_GetRuleValue_ResponseJSON._readMessage(
      Access_GetRuleValue_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_GetRuleValue_Response with all fields set to their default value.
   */
  initialize: function (): Access_GetRuleValue_Response {
    return {
      value: atoms.RuleValueJSON.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetRuleValue_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.value) {
      const _value_ = atoms.RuleValueJSON._writeMessage(msg.value);
      if (Object.keys(_value_).length > 0) {
        json["value"] = _value_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetRuleValue_Response,
    json: any
  ): Access_GetRuleValue_Response {
    const _value_ = json["value"];
    if (_value_) {
      const m = atoms.RuleValue.initialize();
      atoms.RuleValueJSON._readMessage(m, _value_);
      msg.value = m;
    }
    return msg;
  },
};

export const Access_GetEventAdmins_PayloadJSON = {
  /**
   * Serializes Access_GetEventAdmins_Payload to JSON.
   */
  encode: function (msg: Partial<Access_GetEventAdmins_Payload>): string {
    return JSON.stringify(Access_GetEventAdmins_PayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes Access_GetEventAdmins_Payload from JSON.
   */
  decode: function (json: string): Access_GetEventAdmins_Payload {
    return Access_GetEventAdmins_PayloadJSON._readMessage(
      Access_GetEventAdmins_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_GetEventAdmins_Payload with all fields set to their default value.
   */
  initialize: function (): Access_GetEventAdmins_Payload {
    return {
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetEventAdmins_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.eventId) {
      json["eventId"] = msg.eventId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetEventAdmins_Payload,
    json: any
  ): Access_GetEventAdmins_Payload {
    const _eventId_ = json["eventId"];
    if (_eventId_) {
      msg.eventId = _eventId_;
    }
    return msg;
  },
};

export const Access_GetEventAdmins_ResponseJSON = {
  /**
   * Serializes Access_GetEventAdmins_Response to JSON.
   */
  encode: function (msg: Partial<Access_GetEventAdmins_Response>): string {
    return JSON.stringify(
      Access_GetEventAdmins_ResponseJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Access_GetEventAdmins_Response from JSON.
   */
  decode: function (json: string): Access_GetEventAdmins_Response {
    return Access_GetEventAdmins_ResponseJSON._readMessage(
      Access_GetEventAdmins_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_GetEventAdmins_Response with all fields set to their default value.
   */
  initialize: function (): Access_GetEventAdmins_Response {
    return {
      admins: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetEventAdmins_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.admins?.length) {
      json["admins"] = msg.admins.map(atoms.EventAdminJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetEventAdmins_Response,
    json: any
  ): Access_GetEventAdmins_Response {
    const _admins_ = json["admins"];
    if (_admins_) {
      for (const item of _admins_) {
        const m = atoms.EventAdmin.initialize();
        atoms.EventAdminJSON._readMessage(m, item);
        msg.admins.push(m);
      }
    }
    return msg;
  },
};

export const Access_GetSuperadminFlag_PayloadJSON = {
  /**
   * Serializes Access_GetSuperadminFlag_Payload to JSON.
   */
  encode: function (msg: Partial<Access_GetSuperadminFlag_Payload>): string {
    return JSON.stringify(
      Access_GetSuperadminFlag_PayloadJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Access_GetSuperadminFlag_Payload from JSON.
   */
  decode: function (json: string): Access_GetSuperadminFlag_Payload {
    return Access_GetSuperadminFlag_PayloadJSON._readMessage(
      Access_GetSuperadminFlag_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_GetSuperadminFlag_Payload with all fields set to their default value.
   */
  initialize: function (): Access_GetSuperadminFlag_Payload {
    return {
      personId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetSuperadminFlag_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetSuperadminFlag_Payload,
    json: any
  ): Access_GetSuperadminFlag_Payload {
    const _personId_ = json["personId"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    return msg;
  },
};

export const Access_GetSuperadminFlag_ResponseJSON = {
  /**
   * Serializes Access_GetSuperadminFlag_Response to JSON.
   */
  encode: function (msg: Partial<Access_GetSuperadminFlag_Response>): string {
    return JSON.stringify(
      Access_GetSuperadminFlag_ResponseJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Access_GetSuperadminFlag_Response from JSON.
   */
  decode: function (json: string): Access_GetSuperadminFlag_Response {
    return Access_GetSuperadminFlag_ResponseJSON._readMessage(
      Access_GetSuperadminFlag_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_GetSuperadminFlag_Response with all fields set to their default value.
   */
  initialize: function (): Access_GetSuperadminFlag_Response {
    return {
      isAdmin: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetSuperadminFlag_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.isAdmin) {
      json["isAdmin"] = msg.isAdmin;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetSuperadminFlag_Response,
    json: any
  ): Access_GetSuperadminFlag_Response {
    const _isAdmin_ = json["isAdmin"];
    if (_isAdmin_) {
      msg.isAdmin = _isAdmin_;
    }
    return msg;
  },
};

export const Access_GetOwnedEventIds_PayloadJSON = {
  /**
   * Serializes Access_GetOwnedEventIds_Payload to JSON.
   */
  encode: function (msg: Partial<Access_GetOwnedEventIds_Payload>): string {
    return JSON.stringify(
      Access_GetOwnedEventIds_PayloadJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Access_GetOwnedEventIds_Payload from JSON.
   */
  decode: function (json: string): Access_GetOwnedEventIds_Payload {
    return Access_GetOwnedEventIds_PayloadJSON._readMessage(
      Access_GetOwnedEventIds_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_GetOwnedEventIds_Payload with all fields set to their default value.
   */
  initialize: function (): Access_GetOwnedEventIds_Payload {
    return {
      personId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetOwnedEventIds_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetOwnedEventIds_Payload,
    json: any
  ): Access_GetOwnedEventIds_Payload {
    const _personId_ = json["personId"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    return msg;
  },
};

export const Access_GetOwnedEventIds_ResponseJSON = {
  /**
   * Serializes Access_GetOwnedEventIds_Response to JSON.
   */
  encode: function (msg: Partial<Access_GetOwnedEventIds_Response>): string {
    return JSON.stringify(
      Access_GetOwnedEventIds_ResponseJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Access_GetOwnedEventIds_Response from JSON.
   */
  decode: function (json: string): Access_GetOwnedEventIds_Response {
    return Access_GetOwnedEventIds_ResponseJSON._readMessage(
      Access_GetOwnedEventIds_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_GetOwnedEventIds_Response with all fields set to their default value.
   */
  initialize: function (): Access_GetOwnedEventIds_Response {
    return {
      eventIds: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetOwnedEventIds_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.eventIds?.length) {
      json["eventIds"] = msg.eventIds;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetOwnedEventIds_Response,
    json: any
  ): Access_GetOwnedEventIds_Response {
    const _eventIds_ = json["eventIds"];
    if (_eventIds_) {
      msg.eventIds = _eventIds_;
    }
    return msg;
  },
};

export const Access_GetRulesList_PayloadJSON = {
  /**
   * Serializes Access_GetRulesList_Payload to JSON.
   */
  encode: function (_msg?: Partial<Access_GetRulesList_Payload>): string {
    return "{}";
  },

  /**
   * Deserializes Access_GetRulesList_Payload from JSON.
   */
  decode: function (_json?: string): Access_GetRulesList_Payload {
    return {};
  },

  /**
   * Initializes Access_GetRulesList_Payload with all fields set to their default value.
   */
  initialize: function (): Access_GetRulesList_Payload {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<Access_GetRulesList_Payload>
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetRulesList_Payload,
    _json: any
  ): Access_GetRulesList_Payload {
    return msg;
  },
};

export const Access_GetRulesList_ResponseJSON = {
  /**
   * Serializes Access_GetRulesList_Response to JSON.
   */
  encode: function (msg: Partial<Access_GetRulesList_Response>): string {
    return JSON.stringify(Access_GetRulesList_ResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes Access_GetRulesList_Response from JSON.
   */
  decode: function (json: string): Access_GetRulesList_Response {
    return Access_GetRulesList_ResponseJSON._readMessage(
      Access_GetRulesList_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_GetRulesList_Response with all fields set to their default value.
   */
  initialize: function (): Access_GetRulesList_Response {
    return {
      items: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetRulesList_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.items?.length) {
      json["items"] = msg.items.map(atoms.RuleListItemJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetRulesList_Response,
    json: any
  ): Access_GetRulesList_Response {
    const _items_ = json["items"];
    if (_items_) {
      for (const item of _items_) {
        const m = atoms.RuleListItem.initialize();
        atoms.RuleListItemJSON._readMessage(m, item);
        msg.items.push(m);
      }
    }
    return msg;
  },
};

export const Access_GetAllEventRules_PayloadJSON = {
  /**
   * Serializes Access_GetAllEventRules_Payload to JSON.
   */
  encode: function (msg: Partial<Access_GetAllEventRules_Payload>): string {
    return JSON.stringify(
      Access_GetAllEventRules_PayloadJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Access_GetAllEventRules_Payload from JSON.
   */
  decode: function (json: string): Access_GetAllEventRules_Payload {
    return Access_GetAllEventRules_PayloadJSON._readMessage(
      Access_GetAllEventRules_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_GetAllEventRules_Payload with all fields set to their default value.
   */
  initialize: function (): Access_GetAllEventRules_Payload {
    return {
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetAllEventRules_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.eventId) {
      json["eventId"] = msg.eventId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetAllEventRules_Payload,
    json: any
  ): Access_GetAllEventRules_Payload {
    const _eventId_ = json["eventId"];
    if (_eventId_) {
      msg.eventId = _eventId_;
    }
    return msg;
  },
};

export const Access_GetAllEventRules_ResponseJSON = {
  /**
   * Serializes Access_GetAllEventRules_Response to JSON.
   */
  encode: function (msg: Partial<Access_GetAllEventRules_Response>): string {
    return JSON.stringify(
      Access_GetAllEventRules_ResponseJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Access_GetAllEventRules_Response from JSON.
   */
  decode: function (json: string): Access_GetAllEventRules_Response {
    return Access_GetAllEventRules_ResponseJSON._readMessage(
      Access_GetAllEventRules_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_GetAllEventRules_Response with all fields set to their default value.
   */
  initialize: function (): Access_GetAllEventRules_Response {
    return {
      personRules: [],
      groupRules: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetAllEventRules_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personRules?.length) {
      json["personRules"] = msg.personRules.map(
        atoms.EventRuleListItemJSON._writeMessage
      );
    }
    if (msg.groupRules?.length) {
      json["groupRules"] = msg.groupRules.map(
        atoms.EventRuleListItemJSON._writeMessage
      );
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetAllEventRules_Response,
    json: any
  ): Access_GetAllEventRules_Response {
    const _personRules_ = json["personRules"];
    if (_personRules_) {
      for (const item of _personRules_) {
        const m = atoms.EventRuleListItem.initialize();
        atoms.EventRuleListItemJSON._readMessage(m, item);
        msg.personRules.push(m);
      }
    }
    const _groupRules_ = json["groupRules"];
    if (_groupRules_) {
      for (const item of _groupRules_) {
        const m = atoms.EventRuleListItem.initialize();
        atoms.EventRuleListItemJSON._readMessage(m, item);
        msg.groupRules.push(m);
      }
    }
    return msg;
  },
};

export const Access_GetPersonAccess_PayloadJSON = {
  /**
   * Serializes Access_GetPersonAccess_Payload to JSON.
   */
  encode: function (msg: Partial<Access_GetPersonAccess_Payload>): string {
    return JSON.stringify(
      Access_GetPersonAccess_PayloadJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Access_GetPersonAccess_Payload from JSON.
   */
  decode: function (json: string): Access_GetPersonAccess_Payload {
    return Access_GetPersonAccess_PayloadJSON._readMessage(
      Access_GetPersonAccess_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_GetPersonAccess_Payload with all fields set to their default value.
   */
  initialize: function (): Access_GetPersonAccess_Payload {
    return {
      personId: 0,
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetPersonAccess_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    if (msg.eventId) {
      json["eventId"] = msg.eventId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetPersonAccess_Payload,
    json: any
  ): Access_GetPersonAccess_Payload {
    const _personId_ = json["personId"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    const _eventId_ = json["eventId"];
    if (_eventId_) {
      msg.eventId = _eventId_;
    }
    return msg;
  },
};

export const Access_GetPersonAccess_ResponseJSON = {
  /**
   * Serializes Access_GetPersonAccess_Response to JSON.
   */
  encode: function (msg: Partial<Access_GetPersonAccess_Response>): string {
    return JSON.stringify(
      Access_GetPersonAccess_ResponseJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Access_GetPersonAccess_Response from JSON.
   */
  decode: function (json: string): Access_GetPersonAccess_Response {
    return Access_GetPersonAccess_ResponseJSON._readMessage(
      Access_GetPersonAccess_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_GetPersonAccess_Response with all fields set to their default value.
   */
  initialize: function (): Access_GetPersonAccess_Response {
    return {
      rules: atoms.AccessRulesJSON.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetPersonAccess_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.rules) {
      const _rules_ = atoms.AccessRulesJSON._writeMessage(msg.rules);
      if (Object.keys(_rules_).length > 0) {
        json["rules"] = _rules_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetPersonAccess_Response,
    json: any
  ): Access_GetPersonAccess_Response {
    const _rules_ = json["rules"];
    if (_rules_) {
      const m = atoms.AccessRules.initialize();
      atoms.AccessRulesJSON._readMessage(m, _rules_);
      msg.rules = m;
    }
    return msg;
  },
};

export const Access_GetGroupAccess_PayloadJSON = {
  /**
   * Serializes Access_GetGroupAccess_Payload to JSON.
   */
  encode: function (msg: Partial<Access_GetGroupAccess_Payload>): string {
    return JSON.stringify(Access_GetGroupAccess_PayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes Access_GetGroupAccess_Payload from JSON.
   */
  decode: function (json: string): Access_GetGroupAccess_Payload {
    return Access_GetGroupAccess_PayloadJSON._readMessage(
      Access_GetGroupAccess_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_GetGroupAccess_Payload with all fields set to their default value.
   */
  initialize: function (): Access_GetGroupAccess_Payload {
    return {
      groupId: 0,
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetGroupAccess_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.groupId) {
      json["groupId"] = msg.groupId;
    }
    if (msg.eventId) {
      json["eventId"] = msg.eventId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetGroupAccess_Payload,
    json: any
  ): Access_GetGroupAccess_Payload {
    const _groupId_ = json["groupId"];
    if (_groupId_) {
      msg.groupId = _groupId_;
    }
    const _eventId_ = json["eventId"];
    if (_eventId_) {
      msg.eventId = _eventId_;
    }
    return msg;
  },
};

export const Access_GetGroupAccess_ResponseJSON = {
  /**
   * Serializes Access_GetGroupAccess_Response to JSON.
   */
  encode: function (msg: Partial<Access_GetGroupAccess_Response>): string {
    return JSON.stringify(
      Access_GetGroupAccess_ResponseJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Access_GetGroupAccess_Response from JSON.
   */
  decode: function (json: string): Access_GetGroupAccess_Response {
    return Access_GetGroupAccess_ResponseJSON._readMessage(
      Access_GetGroupAccess_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_GetGroupAccess_Response with all fields set to their default value.
   */
  initialize: function (): Access_GetGroupAccess_Response {
    return {
      rules: atoms.AccessRulesJSON.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetGroupAccess_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.rules) {
      const _rules_ = atoms.AccessRulesJSON._writeMessage(msg.rules);
      if (Object.keys(_rules_).length > 0) {
        json["rules"] = _rules_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetGroupAccess_Response,
    json: any
  ): Access_GetGroupAccess_Response {
    const _rules_ = json["rules"];
    if (_rules_) {
      const m = atoms.AccessRules.initialize();
      atoms.AccessRulesJSON._readMessage(m, _rules_);
      msg.rules = m;
    }
    return msg;
  },
};

export const Access_GetAllPersonAccess_PayloadJSON = {
  /**
   * Serializes Access_GetAllPersonAccess_Payload to JSON.
   */
  encode: function (msg: Partial<Access_GetAllPersonAccess_Payload>): string {
    return JSON.stringify(
      Access_GetAllPersonAccess_PayloadJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Access_GetAllPersonAccess_Payload from JSON.
   */
  decode: function (json: string): Access_GetAllPersonAccess_Payload {
    return Access_GetAllPersonAccess_PayloadJSON._readMessage(
      Access_GetAllPersonAccess_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_GetAllPersonAccess_Payload with all fields set to their default value.
   */
  initialize: function (): Access_GetAllPersonAccess_Payload {
    return {
      personId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetAllPersonAccess_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetAllPersonAccess_Payload,
    json: any
  ): Access_GetAllPersonAccess_Payload {
    const _personId_ = json["personId"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    return msg;
  },
};

export const Access_GetAllPersonAccess_ResponseJSON = {
  /**
   * Serializes Access_GetAllPersonAccess_Response to JSON.
   */
  encode: function (msg: Partial<Access_GetAllPersonAccess_Response>): string {
    return JSON.stringify(
      Access_GetAllPersonAccess_ResponseJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Access_GetAllPersonAccess_Response from JSON.
   */
  decode: function (json: string): Access_GetAllPersonAccess_Response {
    return Access_GetAllPersonAccess_ResponseJSON._readMessage(
      Access_GetAllPersonAccess_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_GetAllPersonAccess_Response with all fields set to their default value.
   */
  initialize: function (): Access_GetAllPersonAccess_Response {
    return {
      rulesByEvent: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetAllPersonAccess_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.rulesByEvent) {
      const _rulesByEvent_ = Object.fromEntries(
        Object.entries(msg.rulesByEvent)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(
            Access_GetAllPersonAccess_ResponseJSON.RulesByEvent._writeMessage
          )
          .map(({ key, value }) => [key, value])
      );
      if (Object.keys(_rulesByEvent_).length > 0) {
        json["rulesByEvent"] = _rulesByEvent_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetAllPersonAccess_Response,
    json: any
  ): Access_GetAllPersonAccess_Response {
    const _rulesByEvent_ = json["rulesByEvent"];
    if (_rulesByEvent_) {
      msg.rulesByEvent = Object.fromEntries(
        Object.entries(_rulesByEvent_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(Access_GetAllPersonAccess_ResponseJSON.RulesByEvent._readMessage)
          .map(({ key, value }) => [key, value])
      );
    }
    return msg;
  },

  RulesByEvent: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<Access_GetAllPersonAccess_Response.RulesByEvent>
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        const _value_ = atoms.RuleListItemExMapJSON._writeMessage(msg.value);
        if (Object.keys(_value_).length > 0) {
          json["value"] = _value_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: Access_GetAllPersonAccess_Response.RulesByEvent,
      json: any
    ): Access_GetAllPersonAccess_Response.RulesByEvent {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        const m = atoms.RuleListItemExMap.initialize();
        atoms.RuleListItemExMapJSON._readMessage(m, _value_);
        msg.value = m;
      }
      return msg;
    },
  },
};

export const Access_GetAllGroupAccess_PayloadJSON = {
  /**
   * Serializes Access_GetAllGroupAccess_Payload to JSON.
   */
  encode: function (msg: Partial<Access_GetAllGroupAccess_Payload>): string {
    return JSON.stringify(
      Access_GetAllGroupAccess_PayloadJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Access_GetAllGroupAccess_Payload from JSON.
   */
  decode: function (json: string): Access_GetAllGroupAccess_Payload {
    return Access_GetAllGroupAccess_PayloadJSON._readMessage(
      Access_GetAllGroupAccess_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_GetAllGroupAccess_Payload with all fields set to their default value.
   */
  initialize: function (): Access_GetAllGroupAccess_Payload {
    return {
      groupId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetAllGroupAccess_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.groupId) {
      json["groupId"] = msg.groupId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetAllGroupAccess_Payload,
    json: any
  ): Access_GetAllGroupAccess_Payload {
    const _groupId_ = json["groupId"];
    if (_groupId_) {
      msg.groupId = _groupId_;
    }
    return msg;
  },
};

export const Access_GetAllGroupAccess_ResponseJSON = {
  /**
   * Serializes Access_GetAllGroupAccess_Response to JSON.
   */
  encode: function (msg: Partial<Access_GetAllGroupAccess_Response>): string {
    return JSON.stringify(
      Access_GetAllGroupAccess_ResponseJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Access_GetAllGroupAccess_Response from JSON.
   */
  decode: function (json: string): Access_GetAllGroupAccess_Response {
    return Access_GetAllGroupAccess_ResponseJSON._readMessage(
      Access_GetAllGroupAccess_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_GetAllGroupAccess_Response with all fields set to their default value.
   */
  initialize: function (): Access_GetAllGroupAccess_Response {
    return {
      rulesByEvent: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_GetAllGroupAccess_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.rulesByEvent) {
      const _rulesByEvent_ = Object.fromEntries(
        Object.entries(msg.rulesByEvent)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(Access_GetAllGroupAccess_ResponseJSON.RulesByEvent._writeMessage)
          .map(({ key, value }) => [key, value])
      );
      if (Object.keys(_rulesByEvent_).length > 0) {
        json["rulesByEvent"] = _rulesByEvent_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_GetAllGroupAccess_Response,
    json: any
  ): Access_GetAllGroupAccess_Response {
    const _rulesByEvent_ = json["rulesByEvent"];
    if (_rulesByEvent_) {
      msg.rulesByEvent = Object.fromEntries(
        Object.entries(_rulesByEvent_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(Access_GetAllGroupAccess_ResponseJSON.RulesByEvent._readMessage)
          .map(({ key, value }) => [key, value])
      );
    }
    return msg;
  },

  RulesByEvent: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<Access_GetAllGroupAccess_Response.RulesByEvent>
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        const _value_ = atoms.RuleListItemExMapJSON._writeMessage(msg.value);
        if (Object.keys(_value_).length > 0) {
          json["value"] = _value_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: Access_GetAllGroupAccess_Response.RulesByEvent,
      json: any
    ): Access_GetAllGroupAccess_Response.RulesByEvent {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        const m = atoms.RuleListItemExMap.initialize();
        atoms.RuleListItemExMapJSON._readMessage(m, _value_);
        msg.value = m;
      }
      return msg;
    },
  },
};

export const Access_AddRuleForPerson_PayloadJSON = {
  /**
   * Serializes Access_AddRuleForPerson_Payload to JSON.
   */
  encode: function (msg: Partial<Access_AddRuleForPerson_Payload>): string {
    return JSON.stringify(
      Access_AddRuleForPerson_PayloadJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Access_AddRuleForPerson_Payload from JSON.
   */
  decode: function (json: string): Access_AddRuleForPerson_Payload {
    return Access_AddRuleForPerson_PayloadJSON._readMessage(
      Access_AddRuleForPerson_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_AddRuleForPerson_Payload with all fields set to their default value.
   */
  initialize: function (): Access_AddRuleForPerson_Payload {
    return {
      ruleName: "",
      ruleValue: atoms.RuleValueJSON.initialize(),
      ruleType: "",
      personId: 0,
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_AddRuleForPerson_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ruleName) {
      json["ruleName"] = msg.ruleName;
    }
    if (msg.ruleValue) {
      const _ruleValue_ = atoms.RuleValueJSON._writeMessage(msg.ruleValue);
      if (Object.keys(_ruleValue_).length > 0) {
        json["ruleValue"] = _ruleValue_;
      }
    }
    if (msg.ruleType) {
      json["ruleType"] = msg.ruleType;
    }
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    if (msg.eventId) {
      json["eventId"] = msg.eventId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_AddRuleForPerson_Payload,
    json: any
  ): Access_AddRuleForPerson_Payload {
    const _ruleName_ = json["ruleName"];
    if (_ruleName_) {
      msg.ruleName = _ruleName_;
    }
    const _ruleValue_ = json["ruleValue"];
    if (_ruleValue_) {
      const m = atoms.RuleValue.initialize();
      atoms.RuleValueJSON._readMessage(m, _ruleValue_);
      msg.ruleValue = m;
    }
    const _ruleType_ = json["ruleType"];
    if (_ruleType_) {
      msg.ruleType = _ruleType_;
    }
    const _personId_ = json["personId"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    const _eventId_ = json["eventId"];
    if (_eventId_) {
      msg.eventId = _eventId_;
    }
    return msg;
  },
};

export const Access_AddRuleForPerson_ResponseJSON = {
  /**
   * Serializes Access_AddRuleForPerson_Response to JSON.
   */
  encode: function (msg: Partial<Access_AddRuleForPerson_Response>): string {
    return JSON.stringify(
      Access_AddRuleForPerson_ResponseJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Access_AddRuleForPerson_Response from JSON.
   */
  decode: function (json: string): Access_AddRuleForPerson_Response {
    return Access_AddRuleForPerson_ResponseJSON._readMessage(
      Access_AddRuleForPerson_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_AddRuleForPerson_Response with all fields set to their default value.
   */
  initialize: function (): Access_AddRuleForPerson_Response {
    return {
      ruleId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_AddRuleForPerson_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ruleId) {
      json["ruleId"] = msg.ruleId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_AddRuleForPerson_Response,
    json: any
  ): Access_AddRuleForPerson_Response {
    const _ruleId_ = json["ruleId"];
    if (_ruleId_) {
      msg.ruleId = _ruleId_;
    }
    return msg;
  },
};

export const Access_AddRuleForGroup_PayloadJSON = {
  /**
   * Serializes Access_AddRuleForGroup_Payload to JSON.
   */
  encode: function (msg: Partial<Access_AddRuleForGroup_Payload>): string {
    return JSON.stringify(
      Access_AddRuleForGroup_PayloadJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Access_AddRuleForGroup_Payload from JSON.
   */
  decode: function (json: string): Access_AddRuleForGroup_Payload {
    return Access_AddRuleForGroup_PayloadJSON._readMessage(
      Access_AddRuleForGroup_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_AddRuleForGroup_Payload with all fields set to their default value.
   */
  initialize: function (): Access_AddRuleForGroup_Payload {
    return {
      ruleName: "",
      ruleValue: atoms.RuleValueJSON.initialize(),
      ruleType: "",
      groupId: 0,
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_AddRuleForGroup_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ruleName) {
      json["ruleName"] = msg.ruleName;
    }
    if (msg.ruleValue) {
      const _ruleValue_ = atoms.RuleValueJSON._writeMessage(msg.ruleValue);
      if (Object.keys(_ruleValue_).length > 0) {
        json["ruleValue"] = _ruleValue_;
      }
    }
    if (msg.ruleType) {
      json["ruleType"] = msg.ruleType;
    }
    if (msg.groupId) {
      json["groupId"] = msg.groupId;
    }
    if (msg.eventId) {
      json["eventId"] = msg.eventId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_AddRuleForGroup_Payload,
    json: any
  ): Access_AddRuleForGroup_Payload {
    const _ruleName_ = json["ruleName"];
    if (_ruleName_) {
      msg.ruleName = _ruleName_;
    }
    const _ruleValue_ = json["ruleValue"];
    if (_ruleValue_) {
      const m = atoms.RuleValue.initialize();
      atoms.RuleValueJSON._readMessage(m, _ruleValue_);
      msg.ruleValue = m;
    }
    const _ruleType_ = json["ruleType"];
    if (_ruleType_) {
      msg.ruleType = _ruleType_;
    }
    const _groupId_ = json["groupId"];
    if (_groupId_) {
      msg.groupId = _groupId_;
    }
    const _eventId_ = json["eventId"];
    if (_eventId_) {
      msg.eventId = _eventId_;
    }
    return msg;
  },
};

export const Access_AddRuleForGroup_ResponseJSON = {
  /**
   * Serializes Access_AddRuleForGroup_Response to JSON.
   */
  encode: function (msg: Partial<Access_AddRuleForGroup_Response>): string {
    return JSON.stringify(
      Access_AddRuleForGroup_ResponseJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Access_AddRuleForGroup_Response from JSON.
   */
  decode: function (json: string): Access_AddRuleForGroup_Response {
    return Access_AddRuleForGroup_ResponseJSON._readMessage(
      Access_AddRuleForGroup_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_AddRuleForGroup_Response with all fields set to their default value.
   */
  initialize: function (): Access_AddRuleForGroup_Response {
    return {
      ruleId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_AddRuleForGroup_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ruleId) {
      json["ruleId"] = msg.ruleId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_AddRuleForGroup_Response,
    json: any
  ): Access_AddRuleForGroup_Response {
    const _ruleId_ = json["ruleId"];
    if (_ruleId_) {
      msg.ruleId = _ruleId_;
    }
    return msg;
  },
};

export const Access_UpdateRuleForPerson_PayloadJSON = {
  /**
   * Serializes Access_UpdateRuleForPerson_Payload to JSON.
   */
  encode: function (msg: Partial<Access_UpdateRuleForPerson_Payload>): string {
    return JSON.stringify(
      Access_UpdateRuleForPerson_PayloadJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Access_UpdateRuleForPerson_Payload from JSON.
   */
  decode: function (json: string): Access_UpdateRuleForPerson_Payload {
    return Access_UpdateRuleForPerson_PayloadJSON._readMessage(
      Access_UpdateRuleForPerson_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_UpdateRuleForPerson_Payload with all fields set to their default value.
   */
  initialize: function (): Access_UpdateRuleForPerson_Payload {
    return {
      ruleId: 0,
      ruleValue: atoms.RuleValueJSON.initialize(),
      ruleType: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_UpdateRuleForPerson_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ruleId) {
      json["ruleId"] = msg.ruleId;
    }
    if (msg.ruleValue) {
      const _ruleValue_ = atoms.RuleValueJSON._writeMessage(msg.ruleValue);
      if (Object.keys(_ruleValue_).length > 0) {
        json["ruleValue"] = _ruleValue_;
      }
    }
    if (msg.ruleType) {
      json["ruleType"] = msg.ruleType;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_UpdateRuleForPerson_Payload,
    json: any
  ): Access_UpdateRuleForPerson_Payload {
    const _ruleId_ = json["ruleId"];
    if (_ruleId_) {
      msg.ruleId = _ruleId_;
    }
    const _ruleValue_ = json["ruleValue"];
    if (_ruleValue_) {
      const m = atoms.RuleValue.initialize();
      atoms.RuleValueJSON._readMessage(m, _ruleValue_);
      msg.ruleValue = m;
    }
    const _ruleType_ = json["ruleType"];
    if (_ruleType_) {
      msg.ruleType = _ruleType_;
    }
    return msg;
  },
};

export const Access_UpdateRuleForGroup_PayloadJSON = {
  /**
   * Serializes Access_UpdateRuleForGroup_Payload to JSON.
   */
  encode: function (msg: Partial<Access_UpdateRuleForGroup_Payload>): string {
    return JSON.stringify(
      Access_UpdateRuleForGroup_PayloadJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Access_UpdateRuleForGroup_Payload from JSON.
   */
  decode: function (json: string): Access_UpdateRuleForGroup_Payload {
    return Access_UpdateRuleForGroup_PayloadJSON._readMessage(
      Access_UpdateRuleForGroup_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_UpdateRuleForGroup_Payload with all fields set to their default value.
   */
  initialize: function (): Access_UpdateRuleForGroup_Payload {
    return {
      ruleId: 0,
      ruleValue: atoms.RuleValueJSON.initialize(),
      ruleType: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_UpdateRuleForGroup_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ruleId) {
      json["ruleId"] = msg.ruleId;
    }
    if (msg.ruleValue) {
      const _ruleValue_ = atoms.RuleValueJSON._writeMessage(msg.ruleValue);
      if (Object.keys(_ruleValue_).length > 0) {
        json["ruleValue"] = _ruleValue_;
      }
    }
    if (msg.ruleType) {
      json["ruleType"] = msg.ruleType;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_UpdateRuleForGroup_Payload,
    json: any
  ): Access_UpdateRuleForGroup_Payload {
    const _ruleId_ = json["ruleId"];
    if (_ruleId_) {
      msg.ruleId = _ruleId_;
    }
    const _ruleValue_ = json["ruleValue"];
    if (_ruleValue_) {
      const m = atoms.RuleValue.initialize();
      atoms.RuleValueJSON._readMessage(m, _ruleValue_);
      msg.ruleValue = m;
    }
    const _ruleType_ = json["ruleType"];
    if (_ruleType_) {
      msg.ruleType = _ruleType_;
    }
    return msg;
  },
};

export const Access_DeleteRuleForPerson_PayloadJSON = {
  /**
   * Serializes Access_DeleteRuleForPerson_Payload to JSON.
   */
  encode: function (msg: Partial<Access_DeleteRuleForPerson_Payload>): string {
    return JSON.stringify(
      Access_DeleteRuleForPerson_PayloadJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Access_DeleteRuleForPerson_Payload from JSON.
   */
  decode: function (json: string): Access_DeleteRuleForPerson_Payload {
    return Access_DeleteRuleForPerson_PayloadJSON._readMessage(
      Access_DeleteRuleForPerson_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_DeleteRuleForPerson_Payload with all fields set to their default value.
   */
  initialize: function (): Access_DeleteRuleForPerson_Payload {
    return {
      ruleId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_DeleteRuleForPerson_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ruleId) {
      json["ruleId"] = msg.ruleId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_DeleteRuleForPerson_Payload,
    json: any
  ): Access_DeleteRuleForPerson_Payload {
    const _ruleId_ = json["ruleId"];
    if (_ruleId_) {
      msg.ruleId = _ruleId_;
    }
    return msg;
  },
};

export const Access_DeleteRuleForGroup_PayloadJSON = {
  /**
   * Serializes Access_DeleteRuleForGroup_Payload to JSON.
   */
  encode: function (msg: Partial<Access_DeleteRuleForGroup_Payload>): string {
    return JSON.stringify(
      Access_DeleteRuleForGroup_PayloadJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Access_DeleteRuleForGroup_Payload from JSON.
   */
  decode: function (json: string): Access_DeleteRuleForGroup_Payload {
    return Access_DeleteRuleForGroup_PayloadJSON._readMessage(
      Access_DeleteRuleForGroup_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_DeleteRuleForGroup_Payload with all fields set to their default value.
   */
  initialize: function (): Access_DeleteRuleForGroup_Payload {
    return {
      ruleId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_DeleteRuleForGroup_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ruleId) {
      json["ruleId"] = msg.ruleId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_DeleteRuleForGroup_Payload,
    json: any
  ): Access_DeleteRuleForGroup_Payload {
    const _ruleId_ = json["ruleId"];
    if (_ruleId_) {
      msg.ruleId = _ruleId_;
    }
    return msg;
  },
};

export const Access_ClearAccessCache_PayloadJSON = {
  /**
   * Serializes Access_ClearAccessCache_Payload to JSON.
   */
  encode: function (msg: Partial<Access_ClearAccessCache_Payload>): string {
    return JSON.stringify(
      Access_ClearAccessCache_PayloadJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Access_ClearAccessCache_Payload from JSON.
   */
  decode: function (json: string): Access_ClearAccessCache_Payload {
    return Access_ClearAccessCache_PayloadJSON._readMessage(
      Access_ClearAccessCache_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_ClearAccessCache_Payload with all fields set to their default value.
   */
  initialize: function (): Access_ClearAccessCache_Payload {
    return {
      personId: 0,
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_ClearAccessCache_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    if (msg.eventId) {
      json["eventId"] = msg.eventId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_ClearAccessCache_Payload,
    json: any
  ): Access_ClearAccessCache_Payload {
    const _personId_ = json["personId"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    const _eventId_ = json["eventId"];
    if (_eventId_) {
      msg.eventId = _eventId_;
    }
    return msg;
  },
};

export const Access_AddSystemWideRuleForPerson_PayloadJSON = {
  /**
   * Serializes Access_AddSystemWideRuleForPerson_Payload to JSON.
   */
  encode: function (
    msg: Partial<Access_AddSystemWideRuleForPerson_Payload>
  ): string {
    return JSON.stringify(
      Access_AddSystemWideRuleForPerson_PayloadJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Access_AddSystemWideRuleForPerson_Payload from JSON.
   */
  decode: function (json: string): Access_AddSystemWideRuleForPerson_Payload {
    return Access_AddSystemWideRuleForPerson_PayloadJSON._readMessage(
      Access_AddSystemWideRuleForPerson_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_AddSystemWideRuleForPerson_Payload with all fields set to their default value.
   */
  initialize: function (): Access_AddSystemWideRuleForPerson_Payload {
    return {
      ruleName: "",
      ruleValue: atoms.RuleValueJSON.initialize(),
      ruleType: "",
      personId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_AddSystemWideRuleForPerson_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ruleName) {
      json["ruleName"] = msg.ruleName;
    }
    if (msg.ruleValue) {
      const _ruleValue_ = atoms.RuleValueJSON._writeMessage(msg.ruleValue);
      if (Object.keys(_ruleValue_).length > 0) {
        json["ruleValue"] = _ruleValue_;
      }
    }
    if (msg.ruleType) {
      json["ruleType"] = msg.ruleType;
    }
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_AddSystemWideRuleForPerson_Payload,
    json: any
  ): Access_AddSystemWideRuleForPerson_Payload {
    const _ruleName_ = json["ruleName"];
    if (_ruleName_) {
      msg.ruleName = _ruleName_;
    }
    const _ruleValue_ = json["ruleValue"];
    if (_ruleValue_) {
      const m = atoms.RuleValue.initialize();
      atoms.RuleValueJSON._readMessage(m, _ruleValue_);
      msg.ruleValue = m;
    }
    const _ruleType_ = json["ruleType"];
    if (_ruleType_) {
      msg.ruleType = _ruleType_;
    }
    const _personId_ = json["personId"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    return msg;
  },
};

export const Access_AddSystemWideRuleForPerson_ResponseJSON = {
  /**
   * Serializes Access_AddSystemWideRuleForPerson_Response to JSON.
   */
  encode: function (
    msg: Partial<Access_AddSystemWideRuleForPerson_Response>
  ): string {
    return JSON.stringify(
      Access_AddSystemWideRuleForPerson_ResponseJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Access_AddSystemWideRuleForPerson_Response from JSON.
   */
  decode: function (json: string): Access_AddSystemWideRuleForPerson_Response {
    return Access_AddSystemWideRuleForPerson_ResponseJSON._readMessage(
      Access_AddSystemWideRuleForPerson_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_AddSystemWideRuleForPerson_Response with all fields set to their default value.
   */
  initialize: function (): Access_AddSystemWideRuleForPerson_Response {
    return {
      ruleId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_AddSystemWideRuleForPerson_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ruleId) {
      json["ruleId"] = msg.ruleId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_AddSystemWideRuleForPerson_Response,
    json: any
  ): Access_AddSystemWideRuleForPerson_Response {
    const _ruleId_ = json["ruleId"];
    if (_ruleId_) {
      msg.ruleId = _ruleId_;
    }
    return msg;
  },
};

export const Access_AddSystemWideRuleForGroup_PayloadJSON = {
  /**
   * Serializes Access_AddSystemWideRuleForGroup_Payload to JSON.
   */
  encode: function (
    msg: Partial<Access_AddSystemWideRuleForGroup_Payload>
  ): string {
    return JSON.stringify(
      Access_AddSystemWideRuleForGroup_PayloadJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Access_AddSystemWideRuleForGroup_Payload from JSON.
   */
  decode: function (json: string): Access_AddSystemWideRuleForGroup_Payload {
    return Access_AddSystemWideRuleForGroup_PayloadJSON._readMessage(
      Access_AddSystemWideRuleForGroup_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_AddSystemWideRuleForGroup_Payload with all fields set to their default value.
   */
  initialize: function (): Access_AddSystemWideRuleForGroup_Payload {
    return {
      ruleName: "",
      ruleValue: atoms.RuleValueJSON.initialize(),
      ruleType: "",
      groupId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_AddSystemWideRuleForGroup_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ruleName) {
      json["ruleName"] = msg.ruleName;
    }
    if (msg.ruleValue) {
      const _ruleValue_ = atoms.RuleValueJSON._writeMessage(msg.ruleValue);
      if (Object.keys(_ruleValue_).length > 0) {
        json["ruleValue"] = _ruleValue_;
      }
    }
    if (msg.ruleType) {
      json["ruleType"] = msg.ruleType;
    }
    if (msg.groupId) {
      json["groupId"] = msg.groupId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_AddSystemWideRuleForGroup_Payload,
    json: any
  ): Access_AddSystemWideRuleForGroup_Payload {
    const _ruleName_ = json["ruleName"];
    if (_ruleName_) {
      msg.ruleName = _ruleName_;
    }
    const _ruleValue_ = json["ruleValue"];
    if (_ruleValue_) {
      const m = atoms.RuleValue.initialize();
      atoms.RuleValueJSON._readMessage(m, _ruleValue_);
      msg.ruleValue = m;
    }
    const _ruleType_ = json["ruleType"];
    if (_ruleType_) {
      msg.ruleType = _ruleType_;
    }
    const _groupId_ = json["groupId"];
    if (_groupId_) {
      msg.groupId = _groupId_;
    }
    return msg;
  },
};

export const Access_AddSystemWideRuleForGroup_ResponseJSON = {
  /**
   * Serializes Access_AddSystemWideRuleForGroup_Response to JSON.
   */
  encode: function (
    msg: Partial<Access_AddSystemWideRuleForGroup_Response>
  ): string {
    return JSON.stringify(
      Access_AddSystemWideRuleForGroup_ResponseJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Access_AddSystemWideRuleForGroup_Response from JSON.
   */
  decode: function (json: string): Access_AddSystemWideRuleForGroup_Response {
    return Access_AddSystemWideRuleForGroup_ResponseJSON._readMessage(
      Access_AddSystemWideRuleForGroup_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Access_AddSystemWideRuleForGroup_Response with all fields set to their default value.
   */
  initialize: function (): Access_AddSystemWideRuleForGroup_Response {
    return {
      ruleId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Access_AddSystemWideRuleForGroup_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ruleId) {
      json["ruleId"] = msg.ruleId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Access_AddSystemWideRuleForGroup_Response,
    json: any
  ): Access_AddSystemWideRuleForGroup_Response {
    const _ruleId_ = json["ruleId"];
    if (_ruleId_) {
      msg.ruleId = _ruleId_;
    }
    return msg;
  },
};

export const Persons_CreateAccount_PayloadJSON = {
  /**
   * Serializes Persons_CreateAccount_Payload to JSON.
   */
  encode: function (msg: Partial<Persons_CreateAccount_Payload>): string {
    return JSON.stringify(Persons_CreateAccount_PayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes Persons_CreateAccount_Payload from JSON.
   */
  decode: function (json: string): Persons_CreateAccount_Payload {
    return Persons_CreateAccount_PayloadJSON._readMessage(
      Persons_CreateAccount_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Persons_CreateAccount_Payload with all fields set to their default value.
   */
  initialize: function (): Persons_CreateAccount_Payload {
    return {
      email: "",
      password: "",
      title: "",
      city: "",
      phone: "",
      tenhouId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_CreateAccount_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.email) {
      json["email"] = msg.email;
    }
    if (msg.password) {
      json["password"] = msg.password;
    }
    if (msg.title) {
      json["title"] = msg.title;
    }
    if (msg.city) {
      json["city"] = msg.city;
    }
    if (msg.phone) {
      json["phone"] = msg.phone;
    }
    if (msg.tenhouId) {
      json["tenhouId"] = msg.tenhouId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_CreateAccount_Payload,
    json: any
  ): Persons_CreateAccount_Payload {
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    const _password_ = json["password"];
    if (_password_) {
      msg.password = _password_;
    }
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    const _city_ = json["city"];
    if (_city_) {
      msg.city = _city_;
    }
    const _phone_ = json["phone"];
    if (_phone_) {
      msg.phone = _phone_;
    }
    const _tenhouId_ = json["tenhouId"];
    if (_tenhouId_) {
      msg.tenhouId = _tenhouId_;
    }
    return msg;
  },
};

export const Persons_CreateAccount_ResponseJSON = {
  /**
   * Serializes Persons_CreateAccount_Response to JSON.
   */
  encode: function (msg: Partial<Persons_CreateAccount_Response>): string {
    return JSON.stringify(
      Persons_CreateAccount_ResponseJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Persons_CreateAccount_Response from JSON.
   */
  decode: function (json: string): Persons_CreateAccount_Response {
    return Persons_CreateAccount_ResponseJSON._readMessage(
      Persons_CreateAccount_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Persons_CreateAccount_Response with all fields set to their default value.
   */
  initialize: function (): Persons_CreateAccount_Response {
    return {
      personId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_CreateAccount_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_CreateAccount_Response,
    json: any
  ): Persons_CreateAccount_Response {
    const _personId_ = json["personId"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    return msg;
  },
};

export const Persons_CreateGroup_PayloadJSON = {
  /**
   * Serializes Persons_CreateGroup_Payload to JSON.
   */
  encode: function (msg: Partial<Persons_CreateGroup_Payload>): string {
    return JSON.stringify(Persons_CreateGroup_PayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes Persons_CreateGroup_Payload from JSON.
   */
  decode: function (json: string): Persons_CreateGroup_Payload {
    return Persons_CreateGroup_PayloadJSON._readMessage(
      Persons_CreateGroup_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Persons_CreateGroup_Payload with all fields set to their default value.
   */
  initialize: function (): Persons_CreateGroup_Payload {
    return {
      title: "",
      description: "",
      color: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_CreateGroup_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.title) {
      json["title"] = msg.title;
    }
    if (msg.description) {
      json["description"] = msg.description;
    }
    if (msg.color) {
      json["color"] = msg.color;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_CreateGroup_Payload,
    json: any
  ): Persons_CreateGroup_Payload {
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    const _description_ = json["description"];
    if (_description_) {
      msg.description = _description_;
    }
    const _color_ = json["color"];
    if (_color_) {
      msg.color = _color_;
    }
    return msg;
  },
};

export const Persons_CreateGroup_ResponseJSON = {
  /**
   * Serializes Persons_CreateGroup_Response to JSON.
   */
  encode: function (msg: Partial<Persons_CreateGroup_Response>): string {
    return JSON.stringify(Persons_CreateGroup_ResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes Persons_CreateGroup_Response from JSON.
   */
  decode: function (json: string): Persons_CreateGroup_Response {
    return Persons_CreateGroup_ResponseJSON._readMessage(
      Persons_CreateGroup_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Persons_CreateGroup_Response with all fields set to their default value.
   */
  initialize: function (): Persons_CreateGroup_Response {
    return {
      groupId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_CreateGroup_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.groupId) {
      json["groupId"] = msg.groupId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_CreateGroup_Response,
    json: any
  ): Persons_CreateGroup_Response {
    const _groupId_ = json["groupId"];
    if (_groupId_) {
      msg.groupId = _groupId_;
    }
    return msg;
  },
};

export const Persons_UpdateGroup_PayloadJSON = {
  /**
   * Serializes Persons_UpdateGroup_Payload to JSON.
   */
  encode: function (msg: Partial<Persons_UpdateGroup_Payload>): string {
    return JSON.stringify(Persons_UpdateGroup_PayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes Persons_UpdateGroup_Payload from JSON.
   */
  decode: function (json: string): Persons_UpdateGroup_Payload {
    return Persons_UpdateGroup_PayloadJSON._readMessage(
      Persons_UpdateGroup_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Persons_UpdateGroup_Payload with all fields set to their default value.
   */
  initialize: function (): Persons_UpdateGroup_Payload {
    return {
      groupId: 0,
      title: "",
      description: "",
      color: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_UpdateGroup_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.groupId) {
      json["groupId"] = msg.groupId;
    }
    if (msg.title) {
      json["title"] = msg.title;
    }
    if (msg.description) {
      json["description"] = msg.description;
    }
    if (msg.color) {
      json["color"] = msg.color;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_UpdateGroup_Payload,
    json: any
  ): Persons_UpdateGroup_Payload {
    const _groupId_ = json["groupId"];
    if (_groupId_) {
      msg.groupId = _groupId_;
    }
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    const _description_ = json["description"];
    if (_description_) {
      msg.description = _description_;
    }
    const _color_ = json["color"];
    if (_color_) {
      msg.color = _color_;
    }
    return msg;
  },
};

export const Persons_DeleteGroup_PayloadJSON = {
  /**
   * Serializes Persons_DeleteGroup_Payload to JSON.
   */
  encode: function (msg: Partial<Persons_DeleteGroup_Payload>): string {
    return JSON.stringify(Persons_DeleteGroup_PayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes Persons_DeleteGroup_Payload from JSON.
   */
  decode: function (json: string): Persons_DeleteGroup_Payload {
    return Persons_DeleteGroup_PayloadJSON._readMessage(
      Persons_DeleteGroup_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Persons_DeleteGroup_Payload with all fields set to their default value.
   */
  initialize: function (): Persons_DeleteGroup_Payload {
    return {
      groupId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_DeleteGroup_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.groupId) {
      json["groupId"] = msg.groupId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_DeleteGroup_Payload,
    json: any
  ): Persons_DeleteGroup_Payload {
    const _groupId_ = json["groupId"];
    if (_groupId_) {
      msg.groupId = _groupId_;
    }
    return msg;
  },
};

export const Persons_AddPersonToGroup_PayloadJSON = {
  /**
   * Serializes Persons_AddPersonToGroup_Payload to JSON.
   */
  encode: function (msg: Partial<Persons_AddPersonToGroup_Payload>): string {
    return JSON.stringify(
      Persons_AddPersonToGroup_PayloadJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Persons_AddPersonToGroup_Payload from JSON.
   */
  decode: function (json: string): Persons_AddPersonToGroup_Payload {
    return Persons_AddPersonToGroup_PayloadJSON._readMessage(
      Persons_AddPersonToGroup_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Persons_AddPersonToGroup_Payload with all fields set to their default value.
   */
  initialize: function (): Persons_AddPersonToGroup_Payload {
    return {
      personId: 0,
      groupId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_AddPersonToGroup_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    if (msg.groupId) {
      json["groupId"] = msg.groupId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_AddPersonToGroup_Payload,
    json: any
  ): Persons_AddPersonToGroup_Payload {
    const _personId_ = json["personId"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    const _groupId_ = json["groupId"];
    if (_groupId_) {
      msg.groupId = _groupId_;
    }
    return msg;
  },
};

export const Persons_RemovePersonFromGroup_PayloadJSON = {
  /**
   * Serializes Persons_RemovePersonFromGroup_Payload to JSON.
   */
  encode: function (
    msg: Partial<Persons_RemovePersonFromGroup_Payload>
  ): string {
    return JSON.stringify(
      Persons_RemovePersonFromGroup_PayloadJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Persons_RemovePersonFromGroup_Payload from JSON.
   */
  decode: function (json: string): Persons_RemovePersonFromGroup_Payload {
    return Persons_RemovePersonFromGroup_PayloadJSON._readMessage(
      Persons_RemovePersonFromGroup_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Persons_RemovePersonFromGroup_Payload with all fields set to their default value.
   */
  initialize: function (): Persons_RemovePersonFromGroup_Payload {
    return {
      personId: 0,
      groupId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_RemovePersonFromGroup_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    if (msg.groupId) {
      json["groupId"] = msg.groupId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_RemovePersonFromGroup_Payload,
    json: any
  ): Persons_RemovePersonFromGroup_Payload {
    const _personId_ = json["personId"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    const _groupId_ = json["groupId"];
    if (_groupId_) {
      msg.groupId = _groupId_;
    }
    return msg;
  },
};

export const Persons_GetPersonsOfGroup_PayloadJSON = {
  /**
   * Serializes Persons_GetPersonsOfGroup_Payload to JSON.
   */
  encode: function (msg: Partial<Persons_GetPersonsOfGroup_Payload>): string {
    return JSON.stringify(
      Persons_GetPersonsOfGroup_PayloadJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Persons_GetPersonsOfGroup_Payload from JSON.
   */
  decode: function (json: string): Persons_GetPersonsOfGroup_Payload {
    return Persons_GetPersonsOfGroup_PayloadJSON._readMessage(
      Persons_GetPersonsOfGroup_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Persons_GetPersonsOfGroup_Payload with all fields set to their default value.
   */
  initialize: function (): Persons_GetPersonsOfGroup_Payload {
    return {
      groupId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_GetPersonsOfGroup_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.groupId) {
      json["groupId"] = msg.groupId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_GetPersonsOfGroup_Payload,
    json: any
  ): Persons_GetPersonsOfGroup_Payload {
    const _groupId_ = json["groupId"];
    if (_groupId_) {
      msg.groupId = _groupId_;
    }
    return msg;
  },
};

export const Persons_GetPersonsOfGroup_ResponseJSON = {
  /**
   * Serializes Persons_GetPersonsOfGroup_Response to JSON.
   */
  encode: function (msg: Partial<Persons_GetPersonsOfGroup_Response>): string {
    return JSON.stringify(
      Persons_GetPersonsOfGroup_ResponseJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Persons_GetPersonsOfGroup_Response from JSON.
   */
  decode: function (json: string): Persons_GetPersonsOfGroup_Response {
    return Persons_GetPersonsOfGroup_ResponseJSON._readMessage(
      Persons_GetPersonsOfGroup_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Persons_GetPersonsOfGroup_Response with all fields set to their default value.
   */
  initialize: function (): Persons_GetPersonsOfGroup_Response {
    return {
      persons: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_GetPersonsOfGroup_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.persons?.length) {
      json["persons"] = msg.persons.map(atoms.PersonJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_GetPersonsOfGroup_Response,
    json: any
  ): Persons_GetPersonsOfGroup_Response {
    const _persons_ = json["persons"];
    if (_persons_) {
      for (const item of _persons_) {
        const m = atoms.Person.initialize();
        atoms.PersonJSON._readMessage(m, item);
        msg.persons.push(m);
      }
    }
    return msg;
  },
};

export const Persons_GetGroupsOfPerson_PayloadJSON = {
  /**
   * Serializes Persons_GetGroupsOfPerson_Payload to JSON.
   */
  encode: function (msg: Partial<Persons_GetGroupsOfPerson_Payload>): string {
    return JSON.stringify(
      Persons_GetGroupsOfPerson_PayloadJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Persons_GetGroupsOfPerson_Payload from JSON.
   */
  decode: function (json: string): Persons_GetGroupsOfPerson_Payload {
    return Persons_GetGroupsOfPerson_PayloadJSON._readMessage(
      Persons_GetGroupsOfPerson_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Persons_GetGroupsOfPerson_Payload with all fields set to their default value.
   */
  initialize: function (): Persons_GetGroupsOfPerson_Payload {
    return {
      personId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_GetGroupsOfPerson_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_GetGroupsOfPerson_Payload,
    json: any
  ): Persons_GetGroupsOfPerson_Payload {
    const _personId_ = json["personId"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    return msg;
  },
};

export const Persons_GetGroupsOfPerson_ResponseJSON = {
  /**
   * Serializes Persons_GetGroupsOfPerson_Response to JSON.
   */
  encode: function (msg: Partial<Persons_GetGroupsOfPerson_Response>): string {
    return JSON.stringify(
      Persons_GetGroupsOfPerson_ResponseJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Persons_GetGroupsOfPerson_Response from JSON.
   */
  decode: function (json: string): Persons_GetGroupsOfPerson_Response {
    return Persons_GetGroupsOfPerson_ResponseJSON._readMessage(
      Persons_GetGroupsOfPerson_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Persons_GetGroupsOfPerson_Response with all fields set to their default value.
   */
  initialize: function (): Persons_GetGroupsOfPerson_Response {
    return {
      groups: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_GetGroupsOfPerson_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.groups?.length) {
      json["groups"] = msg.groups.map(atoms.GroupJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_GetGroupsOfPerson_Response,
    json: any
  ): Persons_GetGroupsOfPerson_Response {
    const _groups_ = json["groups"];
    if (_groups_) {
      for (const item of _groups_) {
        const m = atoms.Group.initialize();
        atoms.GroupJSON._readMessage(m, item);
        msg.groups.push(m);
      }
    }
    return msg;
  },
};

export const Persons_UpdatePersonalInfo_PayloadJSON = {
  /**
   * Serializes Persons_UpdatePersonalInfo_Payload to JSON.
   */
  encode: function (msg: Partial<Persons_UpdatePersonalInfo_Payload>): string {
    return JSON.stringify(
      Persons_UpdatePersonalInfo_PayloadJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Persons_UpdatePersonalInfo_Payload from JSON.
   */
  decode: function (json: string): Persons_UpdatePersonalInfo_Payload {
    return Persons_UpdatePersonalInfo_PayloadJSON._readMessage(
      Persons_UpdatePersonalInfo_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Persons_UpdatePersonalInfo_Payload with all fields set to their default value.
   */
  initialize: function (): Persons_UpdatePersonalInfo_Payload {
    return {
      id: 0,
      title: "",
      country: "",
      city: "",
      email: "",
      phone: "",
      tenhouId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_UpdatePersonalInfo_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.title) {
      json["title"] = msg.title;
    }
    if (msg.country) {
      json["country"] = msg.country;
    }
    if (msg.city) {
      json["city"] = msg.city;
    }
    if (msg.email) {
      json["email"] = msg.email;
    }
    if (msg.phone) {
      json["phone"] = msg.phone;
    }
    if (msg.tenhouId) {
      json["tenhouId"] = msg.tenhouId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_UpdatePersonalInfo_Payload,
    json: any
  ): Persons_UpdatePersonalInfo_Payload {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    const _country_ = json["country"];
    if (_country_) {
      msg.country = _country_;
    }
    const _city_ = json["city"];
    if (_city_) {
      msg.city = _city_;
    }
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    const _phone_ = json["phone"];
    if (_phone_) {
      msg.phone = _phone_;
    }
    const _tenhouId_ = json["tenhouId"];
    if (_tenhouId_) {
      msg.tenhouId = _tenhouId_;
    }
    return msg;
  },
};

export const Persons_GetPersonalInfo_PayloadJSON = {
  /**
   * Serializes Persons_GetPersonalInfo_Payload to JSON.
   */
  encode: function (msg: Partial<Persons_GetPersonalInfo_Payload>): string {
    return JSON.stringify(
      Persons_GetPersonalInfo_PayloadJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Persons_GetPersonalInfo_Payload from JSON.
   */
  decode: function (json: string): Persons_GetPersonalInfo_Payload {
    return Persons_GetPersonalInfo_PayloadJSON._readMessage(
      Persons_GetPersonalInfo_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Persons_GetPersonalInfo_Payload with all fields set to their default value.
   */
  initialize: function (): Persons_GetPersonalInfo_Payload {
    return {
      ids: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_GetPersonalInfo_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ids?.length) {
      json["ids"] = msg.ids;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_GetPersonalInfo_Payload,
    json: any
  ): Persons_GetPersonalInfo_Payload {
    const _ids_ = json["ids"];
    if (_ids_) {
      msg.ids = _ids_;
    }
    return msg;
  },
};

export const Persons_GetPersonalInfo_ResponseJSON = {
  /**
   * Serializes Persons_GetPersonalInfo_Response to JSON.
   */
  encode: function (msg: Partial<Persons_GetPersonalInfo_Response>): string {
    return JSON.stringify(
      Persons_GetPersonalInfo_ResponseJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Persons_GetPersonalInfo_Response from JSON.
   */
  decode: function (json: string): Persons_GetPersonalInfo_Response {
    return Persons_GetPersonalInfo_ResponseJSON._readMessage(
      Persons_GetPersonalInfo_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Persons_GetPersonalInfo_Response with all fields set to their default value.
   */
  initialize: function (): Persons_GetPersonalInfo_Response {
    return {
      persons: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_GetPersonalInfo_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.persons?.length) {
      json["persons"] = msg.persons.map(atoms.PersonExJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_GetPersonalInfo_Response,
    json: any
  ): Persons_GetPersonalInfo_Response {
    const _persons_ = json["persons"];
    if (_persons_) {
      for (const item of _persons_) {
        const m = atoms.PersonEx.initialize();
        atoms.PersonExJSON._readMessage(m, item);
        msg.persons.push(m);
      }
    }
    return msg;
  },
};

export const Persons_FindByTenhouIds_PayloadJSON = {
  /**
   * Serializes Persons_FindByTenhouIds_Payload to JSON.
   */
  encode: function (msg: Partial<Persons_FindByTenhouIds_Payload>): string {
    return JSON.stringify(
      Persons_FindByTenhouIds_PayloadJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Persons_FindByTenhouIds_Payload from JSON.
   */
  decode: function (json: string): Persons_FindByTenhouIds_Payload {
    return Persons_FindByTenhouIds_PayloadJSON._readMessage(
      Persons_FindByTenhouIds_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Persons_FindByTenhouIds_Payload with all fields set to their default value.
   */
  initialize: function (): Persons_FindByTenhouIds_Payload {
    return {
      ids: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_FindByTenhouIds_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ids?.length) {
      json["ids"] = msg.ids;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_FindByTenhouIds_Payload,
    json: any
  ): Persons_FindByTenhouIds_Payload {
    const _ids_ = json["ids"];
    if (_ids_) {
      msg.ids = _ids_;
    }
    return msg;
  },
};

export const Persons_FindByTenhouIds_ResponseJSON = {
  /**
   * Serializes Persons_FindByTenhouIds_Response to JSON.
   */
  encode: function (msg: Partial<Persons_FindByTenhouIds_Response>): string {
    return JSON.stringify(
      Persons_FindByTenhouIds_ResponseJSON._writeMessage(msg)
    );
  },

  /**
   * Deserializes Persons_FindByTenhouIds_Response from JSON.
   */
  decode: function (json: string): Persons_FindByTenhouIds_Response {
    return Persons_FindByTenhouIds_ResponseJSON._readMessage(
      Persons_FindByTenhouIds_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Persons_FindByTenhouIds_Response with all fields set to their default value.
   */
  initialize: function (): Persons_FindByTenhouIds_Response {
    return {
      persons: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_FindByTenhouIds_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.persons?.length) {
      json["persons"] = msg.persons.map(atoms.PersonExJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_FindByTenhouIds_Response,
    json: any
  ): Persons_FindByTenhouIds_Response {
    const _persons_ = json["persons"];
    if (_persons_) {
      for (const item of _persons_) {
        const m = atoms.PersonEx.initialize();
        atoms.PersonExJSON._readMessage(m, item);
        msg.persons.push(m);
      }
    }
    return msg;
  },
};

export const Persons_FindByTitle_PayloadJSON = {
  /**
   * Serializes Persons_FindByTitle_Payload to JSON.
   */
  encode: function (msg: Partial<Persons_FindByTitle_Payload>): string {
    return JSON.stringify(Persons_FindByTitle_PayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes Persons_FindByTitle_Payload from JSON.
   */
  decode: function (json: string): Persons_FindByTitle_Payload {
    return Persons_FindByTitle_PayloadJSON._readMessage(
      Persons_FindByTitle_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Persons_FindByTitle_Payload with all fields set to their default value.
   */
  initialize: function (): Persons_FindByTitle_Payload {
    return {
      query: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_FindByTitle_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.query) {
      json["query"] = msg.query;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_FindByTitle_Payload,
    json: any
  ): Persons_FindByTitle_Payload {
    const _query_ = json["query"];
    if (_query_) {
      msg.query = _query_;
    }
    return msg;
  },
};

export const Persons_FindByTitle_ResponseJSON = {
  /**
   * Serializes Persons_FindByTitle_Response to JSON.
   */
  encode: function (msg: Partial<Persons_FindByTitle_Response>): string {
    return JSON.stringify(Persons_FindByTitle_ResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes Persons_FindByTitle_Response from JSON.
   */
  decode: function (json: string): Persons_FindByTitle_Response {
    return Persons_FindByTitle_ResponseJSON._readMessage(
      Persons_FindByTitle_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Persons_FindByTitle_Response with all fields set to their default value.
   */
  initialize: function (): Persons_FindByTitle_Response {
    return {
      persons: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_FindByTitle_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.persons?.length) {
      json["persons"] = msg.persons.map(atoms.PersonJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_FindByTitle_Response,
    json: any
  ): Persons_FindByTitle_Response {
    const _persons_ = json["persons"];
    if (_persons_) {
      for (const item of _persons_) {
        const m = atoms.Person.initialize();
        atoms.PersonJSON._readMessage(m, item);
        msg.persons.push(m);
      }
    }
    return msg;
  },
};

export const Persons_GetGroups_PayloadJSON = {
  /**
   * Serializes Persons_GetGroups_Payload to JSON.
   */
  encode: function (msg: Partial<Persons_GetGroups_Payload>): string {
    return JSON.stringify(Persons_GetGroups_PayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes Persons_GetGroups_Payload from JSON.
   */
  decode: function (json: string): Persons_GetGroups_Payload {
    return Persons_GetGroups_PayloadJSON._readMessage(
      Persons_GetGroups_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Persons_GetGroups_Payload with all fields set to their default value.
   */
  initialize: function (): Persons_GetGroups_Payload {
    return {
      ids: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_GetGroups_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ids?.length) {
      json["ids"] = msg.ids;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_GetGroups_Payload,
    json: any
  ): Persons_GetGroups_Payload {
    const _ids_ = json["ids"];
    if (_ids_) {
      msg.ids = _ids_;
    }
    return msg;
  },
};

export const Persons_GetGroups_ResponseJSON = {
  /**
   * Serializes Persons_GetGroups_Response to JSON.
   */
  encode: function (msg: Partial<Persons_GetGroups_Response>): string {
    return JSON.stringify(Persons_GetGroups_ResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes Persons_GetGroups_Response from JSON.
   */
  decode: function (json: string): Persons_GetGroups_Response {
    return Persons_GetGroups_ResponseJSON._readMessage(
      Persons_GetGroups_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Persons_GetGroups_Response with all fields set to their default value.
   */
  initialize: function (): Persons_GetGroups_Response {
    return {
      groups: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Persons_GetGroups_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.groups?.length) {
      json["groups"] = msg.groups.map(atoms.GroupJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Persons_GetGroups_Response,
    json: any
  ): Persons_GetGroups_Response {
    const _groups_ = json["groups"];
    if (_groups_) {
      for (const item of _groups_) {
        const m = atoms.Group.initialize();
        atoms.GroupJSON._readMessage(m, item);
        msg.groups.push(m);
      }
    }
    return msg;
  },
};

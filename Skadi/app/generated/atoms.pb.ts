// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: atoms.proto
/* eslint-disable */

import type { ByteSource } from "protoscript";
import { BinaryReader, BinaryWriter } from "protoscript";

//========================================//
//                 Types                  //
//========================================//

export type EventType = "ONLINE" | "TOURNAMENT" | "LOCAL";

export type TournamentGamesStatus = "NONE" | "SEATING_READY" | "STARTED";

export type RoundOutcome =
  | "RON"
  | "TSUMO"
  | "DRAW"
  | "ABORT"
  | "CHOMBO"
  | "NAGASHI"
  | "MULTIRON";

export type SessionStatus =
  | "PLANNED"
  | "INPROGRESS"
  | "PREFINISHED"
  | "FINISHED"
  | "CANCELLED";

export interface AccessRules {
  rules: Record<string, AccessRules.Rules["value"] | undefined>;
}

export declare namespace AccessRules {
  interface Rules {
    key: string;
    value: RuleValue;
  }
}

export interface RuleValue {
  /**
   * Represents a double value.
   */
  numberValue?: number | null | undefined;
  /**
   * Represents a string value.
   */
  stringValue?: string | null | undefined;
  /**
   * Represents a boolean value.
   */
  boolValue?: boolean | null | undefined;
}

export interface EventAdmin {
  ruleId: number;
  personId: number;
  personName: string;
}

export interface RuleListItem {
  default: string;
  type: string;
  title: string;
}

export interface EventRuleListItem {
  isGlobal: boolean;
  id: number;
  value: RuleValue;
  name: string;
  ownerTitle: string;
  allowedValues: string[];
}

export interface RuleListItemEx {
  id: number;
  type: string;
  value: RuleValue;
  allowedValues: string[];
}

export interface RuleListItemExMap {
  rules: Record<string, RuleListItemExMap.Rules["value"] | undefined>;
}

export declare namespace RuleListItemExMap {
  interface Rules {
    key: string;
    value: RuleListItemEx;
  }
}

export interface Person {
  id: number;
  city: string;
  tenhouId: string;
  title: string;
}

export interface PersonEx {
  id: number;
  city: string;
  tenhouId: string;
  title: string;
  country: string;
  email: string;
  phone: string;
  groups: number[];
}

export interface Group {
  id: number;
  title: string;
  color: string;
  description: string;
}

export interface RulesetGenerated {
  title: string;
  description: string;
  defaultRules: string;
  fieldTypes: string;
}

export interface Country {
  code: string;
  name: string;
}

export interface Event {
  id: number;
  title: string;
  description: string;
  finished: boolean;
  isListed: boolean;
  isRatingShown: boolean;
  tournamentStarted: boolean;
  type: EventType;
}

export interface MyEvent {
  id: number;
  title: string;
  description: string;
  isOnline: boolean;
}

export interface GameConfig {
  allowedYaku: number[];
  startPoints: number;
  goalPoints: number;
  playAdditionalRounds: boolean;
  withKazoe: boolean;
  withKiriageMangan: boolean;
  withAbortives: boolean;
  withNagashiMangan: boolean;
  withAtamahane: boolean;
  rulesetTitle: string;
  tonpuusen: boolean;
  startRating: number;
  riichiGoesToWinner: boolean;
  doubleronRiichiAtamahane: boolean;
  doubleronHonbaAtamahane: boolean;
  extraChomboPayments: boolean;
  chomboPenalty: number;
  withKuitan: boolean;
  withButtobi: boolean;
  withMultiYakumans: boolean;
  gameExpirationTime: number;
  minPenalty: number;
  maxPenalty: number;
  penaltyStep: number;
  yakuWithPao: number[];
  eventTitle: string;
  eventDescription: string;
  eventStatHost: string;
  useTimer: boolean;
  usePenalty: boolean;
  timerPolicy: string;
  redZone: number;
  yellowZone: number;
  gameDuration: number;
  timezone: string;
  isOnline: boolean;
  isTeam: boolean;
  autoSeating: boolean;
  syncStart: boolean;
  syncEnd: boolean;
  sortByGames: boolean;
  allowPlayerAppend: boolean;
  withLeadingDealerGameOver: boolean;
  subtractStartPoints: boolean;
  seriesLength: number;
  minGamesCount: number;
  gamesStatus: TournamentGamesStatus;
  hideResults: boolean;
  hideAddReplayButton: boolean;
  isPrescripted: boolean;
  chipsValue: number;
  isFinished: boolean;
}

export interface PlayerInRating {
  id: number;
  title: string;
  tenhouId: string;
  rating: number;
  chips: number;
  winnerZone: boolean;
  avgPlace: number;
  avgScore: number;
  gamesPlayed: number;
}

export interface Player {
  id: number;
  title: string;
  tenhouId: string;
}

export interface FinalResultOfSession {
  playerId: number;
  score: number;
  ratingDelta: number;
  place: number;
}

export interface Penalty {
  who: number;
  amount: number;
  reason?: string | null | undefined;
}

export interface RonResult {
  roundIndex: number;
  honba: number;
  winnerId: number;
  loserId: number;
  paoPlayerId: number;
  han: number;
  fu: number;
  yaku: number[];
  riichiBets: number[];
  dora: number;
  uradora: number;
  kandora: number;
  kanuradora: number;
  openHand: boolean;
}

export interface MultironWin {
  winnerId: number;
  paoPlayerId: number;
  han: number;
  fu: number;
  yaku: number[];
  dora: number;
  uradora: number;
  kandora: number;
  kanuradora: number;
  openHand: boolean;
}

export interface MultironResult {
  roundIndex: number;
  honba: number;
  loserId: number;
  multiRon: number;
  wins: MultironWin[];
  riichiBets: number[];
}

export interface TsumoResult {
  roundIndex: number;
  honba: number;
  winnerId: number;
  paoPlayerId: number;
  han: number;
  fu: number;
  yaku: number[];
  riichiBets: number[];
  dora: number;
  uradora: number;
  kandora: number;
  kanuradora: number;
  openHand: boolean;
}

export interface DrawResult {
  roundIndex: number;
  honba: number;
  riichiBets: number[];
  tempai: number[];
}

export interface AbortResult {
  roundIndex: number;
  honba: number;
  riichiBets: number[];
}

export interface ChomboResult {
  roundIndex: number;
  honba: number;
  loserId: number;
}

export interface NagashiResult {
  roundIndex: number;
  honba: number;
  riichiBets: number[];
  tempai: number[];
  nagashi: number[];
}

export interface Round {
  ron?: RonResult | null | undefined;
  tsumo?: TsumoResult | null | undefined;
  multiron?: MultironResult | null | undefined;
  draw?: DrawResult | null | undefined;
  abort?: AbortResult | null | undefined;
  chombo?: ChomboResult | null | undefined;
  nagashi?: NagashiResult | null | undefined;
}

export interface GameResult {
  sessionHash: string;
  date?: string | null | undefined;
  replayLink: string;
  players: number[];
  finalResults: FinalResultOfSession[];
  penaltyLog: Penalty[];
  rounds: Round[];
}

export interface PlayerPlaceInSeries {
  sessionHash: string;
  place: number;
}

export interface SeriesResult {
  player: Player;
  bestSeries: PlayerPlaceInSeries[];
  bestSeriesScores: number;
  bestSeriesPlaces: number;
  bestSeriesAvgPlace: string;
  currentSeries: PlayerPlaceInSeries[];
  currentSeriesScores: number;
  currentSeriesPlaces: number;
  currentSeriesAvgPlace: string;
}

export interface ReplacementPlayer {
  id: number;
  title: string;
}

export interface PlayerInSession {
  id: number;
  title: string;
  score: number;
  replacedBy?: ReplacementPlayer | null | undefined;
  ratingDelta: number;
}

export interface CurrentSession {
  sessionHash: string;
  status: string;
  tableIndex?: number | null | undefined;
  players: PlayerInSession[];
}

export interface RegisteredPlayer {
  id: number;
  title: string;
  localId?: number | null | undefined;
  teamName?: string | null | undefined;
  tenhouId: string;
  ignoreSeating: boolean;
  replacedBy?: ReplacementPlayer | null | undefined;
}

export interface SessionHistoryResult {
  sessionHash: string;
  eventId: number;
  playerId: number;
  score: number;
  ratingDelta: number;
  place: number;
  title: string;
}

export interface SessionHistoryResultTable {
  table: SessionHistoryResult[];
}

export interface PlacesSummaryItem {
  place: number;
  count: number;
}

export interface PlayerWinSummary {
  ron: number;
  tsumo: number;
  chombo: number;
  feed: number;
  tsumofeed: number;
  winsWithOpen: number;
  winsWithRiichi: number;
  winsWithDama: number;
  unforcedFeedToOpen: number;
  unforcedFeedToRiichi: number;
  unforcedFeedToDama: number;
  draw: number;
  drawTempai: number;
  pointsWon: number;
  pointsLostRon: number;
  pointsLostTsumo: number;
}

export interface HandValueStat {
  hanCount: number;
  count: number;
}

export interface YakuStat {
  yakuId: number;
  count: number;
}

export interface RiichiSummary {
  riichiWon: number;
  riichiLost: number;
  feedUnderRiichi: number;
}

export interface DoraSummary {
  count: number;
  average: number;
}

export interface IntermediateResultOfSession {
  playerId: number;
  score: number;
  penaltyScore?: number | null | undefined;
}

export interface PaymentLogItem {
  from?: number | null | undefined;
  to?: number | null | undefined;
  amount: number;
}

export interface PaymentLog {
  direct: PaymentLogItem[];
  riichi: PaymentLogItem[];
  honba: PaymentLogItem[];
}

export interface RoundState {
  sessionHash: string;
  dealer: number;
  roundIndex: number;
  riichi: number;
  honba: number;
  riichiIds: number[];
  scores: IntermediateResultOfSession[];
  scoresDelta: IntermediateResultOfSession[];
  payments: PaymentLog;
  round: Round;
  outcome: RoundOutcome;
}

export interface EventData {
  type?: EventType | null | undefined;
  title: string;
  description: string;
  duration: number;
  ruleset: string;
  timezone: string;
  lobbyId: number;
  seriesLength: number;
  minGames: number;
  isTeam: boolean;
  isPrescripted: boolean;
  autostart: number;
  rulesetChanges: string;
}

export interface TableState {
  status: SessionStatus;
  mayDefinalize: boolean;
  sessionHash: string;
  penaltyLog: Penalty[];
  tableIndex?: number | null | undefined;
  lastRound?: Round | null | undefined;
  currentRoundIndex: number;
  scores: IntermediateResultOfSession[];
  players: RegisteredPlayer[];
}

export interface Achievement {
  achievementId: string;
  achieventData: string;
}

export interface LocalIdMapping {
  playerId: number;
  localId: number;
}

export interface TeamMapping {
  playerId: number;
  teamName: string;
}

export interface PlayerSeating {
  order: number;
  playerId: number;
  sessionId: number;
  tableIndex: number;
  rating: number;
  playerTitle: string;
}

export interface PlayerSeatingSwiss {
  playerId: number;
  rating: number;
}

export interface TableItemSwiss {
  players: PlayerSeatingSwiss[];
}

export interface PrescriptedTable {
  players: RegisteredPlayer[];
}

export interface SessionState {
  dealer: number;
  roundIndex: number;
  riichiCount: number;
  honbaCount: number;
  scores: IntermediateResultOfSession[];
  finished: boolean;
  penalties: Penalty[];
  yellowZoneAlreadyPlayed: boolean;
}

export interface Generic_Success_Response {
  success: boolean;
}

export interface Generic_Event_Payload {
  eventId: number;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const EventType = {
  ONLINE: "ONLINE",
  TOURNAMENT: "TOURNAMENT",
  LOCAL: "LOCAL",
  /**
   * @private
   */
  _fromInt: function (i: number): EventType {
    switch (i) {
      case 0: {
        return "ONLINE";
      }
      case 1: {
        return "TOURNAMENT";
      }
      case 2: {
        return "LOCAL";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as EventType;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: EventType): number {
    switch (i) {
      case "ONLINE": {
        return 0;
      }
      case "TOURNAMENT": {
        return 1;
      }
      case "LOCAL": {
        return 2;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const TournamentGamesStatus = {
  NONE: "NONE",
  SEATING_READY: "SEATING_READY",
  STARTED: "STARTED",
  /**
   * @private
   */
  _fromInt: function (i: number): TournamentGamesStatus {
    switch (i) {
      case 0: {
        return "NONE";
      }
      case 1: {
        return "SEATING_READY";
      }
      case 2: {
        return "STARTED";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as TournamentGamesStatus;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: TournamentGamesStatus): number {
    switch (i) {
      case "NONE": {
        return 0;
      }
      case "SEATING_READY": {
        return 1;
      }
      case "STARTED": {
        return 2;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const RoundOutcome = {
  RON: "RON",
  TSUMO: "TSUMO",
  DRAW: "DRAW",
  ABORT: "ABORT",
  CHOMBO: "CHOMBO",
  NAGASHI: "NAGASHI",
  MULTIRON: "MULTIRON",
  /**
   * @private
   */
  _fromInt: function (i: number): RoundOutcome {
    switch (i) {
      case 0: {
        return "RON";
      }
      case 1: {
        return "TSUMO";
      }
      case 2: {
        return "DRAW";
      }
      case 3: {
        return "ABORT";
      }
      case 4: {
        return "CHOMBO";
      }
      case 5: {
        return "NAGASHI";
      }
      case 6: {
        return "MULTIRON";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as RoundOutcome;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: RoundOutcome): number {
    switch (i) {
      case "RON": {
        return 0;
      }
      case "TSUMO": {
        return 1;
      }
      case "DRAW": {
        return 2;
      }
      case "ABORT": {
        return 3;
      }
      case "CHOMBO": {
        return 4;
      }
      case "NAGASHI": {
        return 5;
      }
      case "MULTIRON": {
        return 6;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const SessionStatus = {
  PLANNED: "PLANNED",
  INPROGRESS: "INPROGRESS",
  PREFINISHED: "PREFINISHED",
  FINISHED: "FINISHED",
  CANCELLED: "CANCELLED",
  /**
   * @private
   */
  _fromInt: function (i: number): SessionStatus {
    switch (i) {
      case 0: {
        return "PLANNED";
      }
      case 1: {
        return "INPROGRESS";
      }
      case 2: {
        return "PREFINISHED";
      }
      case 3: {
        return "FINISHED";
      }
      case 4: {
        return "CANCELLED";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as SessionStatus;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: SessionStatus): number {
    switch (i) {
      case "PLANNED": {
        return 0;
      }
      case "INPROGRESS": {
        return 1;
      }
      case "PREFINISHED": {
        return 2;
      }
      case "FINISHED": {
        return 3;
      }
      case "CANCELLED": {
        return 4;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const AccessRules = {
  /**
   * Serializes AccessRules to protobuf.
   */
  encode: function (msg: Partial<AccessRules>): Uint8Array {
    return AccessRules._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes AccessRules from protobuf.
   */
  decode: function (bytes: ByteSource): AccessRules {
    return AccessRules._readMessage(
      AccessRules.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes AccessRules with all fields set to their default value.
   */
  initialize: function (): AccessRules {
    return {
      rules: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<AccessRules>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.rules) {
      writer.writeRepeatedMessage(
        1,
        Object.entries(msg.rules).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        AccessRules.Rules._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: AccessRules, reader: BinaryReader): AccessRules {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const map = {} as AccessRules.Rules;
          reader.readMessage(map, AccessRules.Rules._readMessage);
          msg.rules[map.key.toString()] = map.value;
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  Rules: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<AccessRules.Rules>,
      writer: BinaryWriter
    ): BinaryWriter {
      if (msg.key) {
        writer.writeString(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(2, msg.value, RuleValue._writeMessage);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: AccessRules.Rules,
      reader: BinaryReader
    ): AccessRules.Rules {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readString();
            break;
          }
          case 2: {
            msg.value = RuleValue.initialize();
            reader.readMessage(msg.value, RuleValue._readMessage);
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },
};

export const RuleValue = {
  /**
   * Serializes RuleValue to protobuf.
   */
  encode: function (msg: Partial<RuleValue>): Uint8Array {
    return RuleValue._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes RuleValue from protobuf.
   */
  decode: function (bytes: ByteSource): RuleValue {
    return RuleValue._readMessage(
      RuleValue.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes RuleValue with all fields set to their default value.
   */
  initialize: function (): RuleValue {
    return {
      numberValue: undefined,
      stringValue: undefined,
      boolValue: undefined,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<RuleValue>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.numberValue != undefined) {
      writer.writeInt32(2, msg.numberValue);
    }
    if (msg.stringValue != undefined) {
      writer.writeString(3, msg.stringValue);
    }
    if (msg.boolValue != undefined) {
      writer.writeBool(4, msg.boolValue);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: RuleValue, reader: BinaryReader): RuleValue {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 2: {
          msg.numberValue = reader.readInt32();
          break;
        }
        case 3: {
          msg.stringValue = reader.readString();
          break;
        }
        case 4: {
          msg.boolValue = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EventAdmin = {
  /**
   * Serializes EventAdmin to protobuf.
   */
  encode: function (msg: Partial<EventAdmin>): Uint8Array {
    return EventAdmin._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes EventAdmin from protobuf.
   */
  decode: function (bytes: ByteSource): EventAdmin {
    return EventAdmin._readMessage(
      EventAdmin.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes EventAdmin with all fields set to their default value.
   */
  initialize: function (): EventAdmin {
    return {
      ruleId: 0,
      personId: 0,
      personName: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EventAdmin>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.ruleId) {
      writer.writeInt32(1, msg.ruleId);
    }
    if (msg.personId) {
      writer.writeInt32(2, msg.personId);
    }
    if (msg.personName) {
      writer.writeString(3, msg.personName);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: EventAdmin, reader: BinaryReader): EventAdmin {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ruleId = reader.readInt32();
          break;
        }
        case 2: {
          msg.personId = reader.readInt32();
          break;
        }
        case 3: {
          msg.personName = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const RuleListItem = {
  /**
   * Serializes RuleListItem to protobuf.
   */
  encode: function (msg: Partial<RuleListItem>): Uint8Array {
    return RuleListItem._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes RuleListItem from protobuf.
   */
  decode: function (bytes: ByteSource): RuleListItem {
    return RuleListItem._readMessage(
      RuleListItem.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes RuleListItem with all fields set to their default value.
   */
  initialize: function (): RuleListItem {
    return {
      default: "",
      type: "",
      title: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<RuleListItem>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.default) {
      writer.writeString(1, msg.default);
    }
    if (msg.type) {
      writer.writeString(2, msg.type);
    }
    if (msg.title) {
      writer.writeString(3, msg.title);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: RuleListItem,
    reader: BinaryReader
  ): RuleListItem {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.default = reader.readString();
          break;
        }
        case 2: {
          msg.type = reader.readString();
          break;
        }
        case 3: {
          msg.title = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EventRuleListItem = {
  /**
   * Serializes EventRuleListItem to protobuf.
   */
  encode: function (msg: Partial<EventRuleListItem>): Uint8Array {
    return EventRuleListItem._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes EventRuleListItem from protobuf.
   */
  decode: function (bytes: ByteSource): EventRuleListItem {
    return EventRuleListItem._readMessage(
      EventRuleListItem.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes EventRuleListItem with all fields set to their default value.
   */
  initialize: function (): EventRuleListItem {
    return {
      isGlobal: false,
      id: 0,
      value: RuleValue.initialize(),
      name: "",
      ownerTitle: "",
      allowedValues: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EventRuleListItem>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.isGlobal) {
      writer.writeBool(1, msg.isGlobal);
    }
    if (msg.id) {
      writer.writeInt32(2, msg.id);
    }
    if (msg.value) {
      writer.writeMessage(3, msg.value, RuleValue._writeMessage);
    }
    if (msg.name) {
      writer.writeString(4, msg.name);
    }
    if (msg.ownerTitle) {
      writer.writeString(5, msg.ownerTitle);
    }
    if (msg.allowedValues?.length) {
      writer.writeRepeatedString(6, msg.allowedValues);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EventRuleListItem,
    reader: BinaryReader
  ): EventRuleListItem {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.isGlobal = reader.readBool();
          break;
        }
        case 2: {
          msg.id = reader.readInt32();
          break;
        }
        case 3: {
          reader.readMessage(msg.value, RuleValue._readMessage);
          break;
        }
        case 4: {
          msg.name = reader.readString();
          break;
        }
        case 5: {
          msg.ownerTitle = reader.readString();
          break;
        }
        case 6: {
          msg.allowedValues.push(reader.readString());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const RuleListItemEx = {
  /**
   * Serializes RuleListItemEx to protobuf.
   */
  encode: function (msg: Partial<RuleListItemEx>): Uint8Array {
    return RuleListItemEx._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes RuleListItemEx from protobuf.
   */
  decode: function (bytes: ByteSource): RuleListItemEx {
    return RuleListItemEx._readMessage(
      RuleListItemEx.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes RuleListItemEx with all fields set to their default value.
   */
  initialize: function (): RuleListItemEx {
    return {
      id: 0,
      type: "",
      value: RuleValue.initialize(),
      allowedValues: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<RuleListItemEx>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeInt32(1, msg.id);
    }
    if (msg.type) {
      writer.writeString(2, msg.type);
    }
    if (msg.value) {
      writer.writeMessage(3, msg.value, RuleValue._writeMessage);
    }
    if (msg.allowedValues?.length) {
      writer.writeRepeatedString(4, msg.allowedValues);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: RuleListItemEx,
    reader: BinaryReader
  ): RuleListItemEx {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readInt32();
          break;
        }
        case 2: {
          msg.type = reader.readString();
          break;
        }
        case 3: {
          reader.readMessage(msg.value, RuleValue._readMessage);
          break;
        }
        case 4: {
          msg.allowedValues.push(reader.readString());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const RuleListItemExMap = {
  /**
   * Serializes RuleListItemExMap to protobuf.
   */
  encode: function (msg: Partial<RuleListItemExMap>): Uint8Array {
    return RuleListItemExMap._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes RuleListItemExMap from protobuf.
   */
  decode: function (bytes: ByteSource): RuleListItemExMap {
    return RuleListItemExMap._readMessage(
      RuleListItemExMap.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes RuleListItemExMap with all fields set to their default value.
   */
  initialize: function (): RuleListItemExMap {
    return {
      rules: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<RuleListItemExMap>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.rules) {
      writer.writeRepeatedMessage(
        1,
        Object.entries(msg.rules).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        RuleListItemExMap.Rules._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: RuleListItemExMap,
    reader: BinaryReader
  ): RuleListItemExMap {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const map = {} as RuleListItemExMap.Rules;
          reader.readMessage(map, RuleListItemExMap.Rules._readMessage);
          msg.rules[map.key.toString()] = map.value;
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  Rules: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<RuleListItemExMap.Rules>,
      writer: BinaryWriter
    ): BinaryWriter {
      if (msg.key) {
        writer.writeString(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(2, msg.value, RuleListItemEx._writeMessage);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: RuleListItemExMap.Rules,
      reader: BinaryReader
    ): RuleListItemExMap.Rules {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readString();
            break;
          }
          case 2: {
            msg.value = RuleListItemEx.initialize();
            reader.readMessage(msg.value, RuleListItemEx._readMessage);
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },
};

export const Person = {
  /**
   * Serializes Person to protobuf.
   */
  encode: function (msg: Partial<Person>): Uint8Array {
    return Person._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Person from protobuf.
   */
  decode: function (bytes: ByteSource): Person {
    return Person._readMessage(Person.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes Person with all fields set to their default value.
   */
  initialize: function (): Person {
    return {
      id: 0,
      city: "",
      tenhouId: "",
      title: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Person>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeInt32(1, msg.id);
    }
    if (msg.city) {
      writer.writeString(2, msg.city);
    }
    if (msg.tenhouId) {
      writer.writeString(3, msg.tenhouId);
    }
    if (msg.title) {
      writer.writeString(4, msg.title);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Person, reader: BinaryReader): Person {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readInt32();
          break;
        }
        case 2: {
          msg.city = reader.readString();
          break;
        }
        case 3: {
          msg.tenhouId = reader.readString();
          break;
        }
        case 4: {
          msg.title = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PersonEx = {
  /**
   * Serializes PersonEx to protobuf.
   */
  encode: function (msg: Partial<PersonEx>): Uint8Array {
    return PersonEx._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes PersonEx from protobuf.
   */
  decode: function (bytes: ByteSource): PersonEx {
    return PersonEx._readMessage(
      PersonEx.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes PersonEx with all fields set to their default value.
   */
  initialize: function (): PersonEx {
    return {
      id: 0,
      city: "",
      tenhouId: "",
      title: "",
      country: "",
      email: "",
      phone: "",
      groups: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PersonEx>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeInt32(1, msg.id);
    }
    if (msg.city) {
      writer.writeString(2, msg.city);
    }
    if (msg.tenhouId) {
      writer.writeString(3, msg.tenhouId);
    }
    if (msg.title) {
      writer.writeString(4, msg.title);
    }
    if (msg.country) {
      writer.writeString(5, msg.country);
    }
    if (msg.email) {
      writer.writeString(6, msg.email);
    }
    if (msg.phone) {
      writer.writeString(7, msg.phone);
    }
    if (msg.groups?.length) {
      writer.writePackedInt32(8, msg.groups);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: PersonEx, reader: BinaryReader): PersonEx {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readInt32();
          break;
        }
        case 2: {
          msg.city = reader.readString();
          break;
        }
        case 3: {
          msg.tenhouId = reader.readString();
          break;
        }
        case 4: {
          msg.title = reader.readString();
          break;
        }
        case 5: {
          msg.country = reader.readString();
          break;
        }
        case 6: {
          msg.email = reader.readString();
          break;
        }
        case 7: {
          msg.phone = reader.readString();
          break;
        }
        case 8: {
          if (reader.isDelimited()) {
            msg.groups.push(...reader.readPackedInt32());
          } else {
            msg.groups.push(reader.readInt32());
          }
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Group = {
  /**
   * Serializes Group to protobuf.
   */
  encode: function (msg: Partial<Group>): Uint8Array {
    return Group._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Group from protobuf.
   */
  decode: function (bytes: ByteSource): Group {
    return Group._readMessage(Group.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes Group with all fields set to their default value.
   */
  initialize: function (): Group {
    return {
      id: 0,
      title: "",
      color: "",
      description: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Group>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeInt32(1, msg.id);
    }
    if (msg.title) {
      writer.writeString(2, msg.title);
    }
    if (msg.color) {
      writer.writeString(3, msg.color);
    }
    if (msg.description) {
      writer.writeString(4, msg.description);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Group, reader: BinaryReader): Group {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readInt32();
          break;
        }
        case 2: {
          msg.title = reader.readString();
          break;
        }
        case 3: {
          msg.color = reader.readString();
          break;
        }
        case 4: {
          msg.description = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const RulesetGenerated = {
  /**
   * Serializes RulesetGenerated to protobuf.
   */
  encode: function (msg: Partial<RulesetGenerated>): Uint8Array {
    return RulesetGenerated._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes RulesetGenerated from protobuf.
   */
  decode: function (bytes: ByteSource): RulesetGenerated {
    return RulesetGenerated._readMessage(
      RulesetGenerated.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes RulesetGenerated with all fields set to their default value.
   */
  initialize: function (): RulesetGenerated {
    return {
      title: "",
      description: "",
      defaultRules: "",
      fieldTypes: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<RulesetGenerated>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.title) {
      writer.writeString(1, msg.title);
    }
    if (msg.description) {
      writer.writeString(2, msg.description);
    }
    if (msg.defaultRules) {
      writer.writeString(3, msg.defaultRules);
    }
    if (msg.fieldTypes) {
      writer.writeString(4, msg.fieldTypes);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: RulesetGenerated,
    reader: BinaryReader
  ): RulesetGenerated {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.title = reader.readString();
          break;
        }
        case 2: {
          msg.description = reader.readString();
          break;
        }
        case 3: {
          msg.defaultRules = reader.readString();
          break;
        }
        case 4: {
          msg.fieldTypes = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Country = {
  /**
   * Serializes Country to protobuf.
   */
  encode: function (msg: Partial<Country>): Uint8Array {
    return Country._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Country from protobuf.
   */
  decode: function (bytes: ByteSource): Country {
    return Country._readMessage(Country.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes Country with all fields set to their default value.
   */
  initialize: function (): Country {
    return {
      code: "",
      name: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Country>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.code) {
      writer.writeString(1, msg.code);
    }
    if (msg.name) {
      writer.writeString(2, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Country, reader: BinaryReader): Country {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.code = reader.readString();
          break;
        }
        case 2: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Event = {
  /**
   * Serializes Event to protobuf.
   */
  encode: function (msg: Partial<Event>): Uint8Array {
    return Event._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Event from protobuf.
   */
  decode: function (bytes: ByteSource): Event {
    return Event._readMessage(Event.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes Event with all fields set to their default value.
   */
  initialize: function (): Event {
    return {
      id: 0,
      title: "",
      description: "",
      finished: false,
      isListed: false,
      isRatingShown: false,
      tournamentStarted: false,
      type: EventType._fromInt(0),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Event>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeInt32(1, msg.id);
    }
    if (msg.title) {
      writer.writeString(2, msg.title);
    }
    if (msg.description) {
      writer.writeString(3, msg.description);
    }
    if (msg.finished) {
      writer.writeBool(4, msg.finished);
    }
    if (msg.isListed) {
      writer.writeBool(5, msg.isListed);
    }
    if (msg.isRatingShown) {
      writer.writeBool(6, msg.isRatingShown);
    }
    if (msg.tournamentStarted) {
      writer.writeBool(7, msg.tournamentStarted);
    }
    if (msg.type && EventType._toInt(msg.type)) {
      writer.writeEnum(8, EventType._toInt(msg.type));
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Event, reader: BinaryReader): Event {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readInt32();
          break;
        }
        case 2: {
          msg.title = reader.readString();
          break;
        }
        case 3: {
          msg.description = reader.readString();
          break;
        }
        case 4: {
          msg.finished = reader.readBool();
          break;
        }
        case 5: {
          msg.isListed = reader.readBool();
          break;
        }
        case 6: {
          msg.isRatingShown = reader.readBool();
          break;
        }
        case 7: {
          msg.tournamentStarted = reader.readBool();
          break;
        }
        case 8: {
          msg.type = EventType._fromInt(reader.readEnum());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const MyEvent = {
  /**
   * Serializes MyEvent to protobuf.
   */
  encode: function (msg: Partial<MyEvent>): Uint8Array {
    return MyEvent._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes MyEvent from protobuf.
   */
  decode: function (bytes: ByteSource): MyEvent {
    return MyEvent._readMessage(MyEvent.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes MyEvent with all fields set to their default value.
   */
  initialize: function (): MyEvent {
    return {
      id: 0,
      title: "",
      description: "",
      isOnline: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<MyEvent>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeInt32(1, msg.id);
    }
    if (msg.title) {
      writer.writeString(2, msg.title);
    }
    if (msg.description) {
      writer.writeString(3, msg.description);
    }
    if (msg.isOnline) {
      writer.writeBool(4, msg.isOnline);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: MyEvent, reader: BinaryReader): MyEvent {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readInt32();
          break;
        }
        case 2: {
          msg.title = reader.readString();
          break;
        }
        case 3: {
          msg.description = reader.readString();
          break;
        }
        case 4: {
          msg.isOnline = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GameConfig = {
  /**
   * Serializes GameConfig to protobuf.
   */
  encode: function (msg: Partial<GameConfig>): Uint8Array {
    return GameConfig._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes GameConfig from protobuf.
   */
  decode: function (bytes: ByteSource): GameConfig {
    return GameConfig._readMessage(
      GameConfig.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GameConfig with all fields set to their default value.
   */
  initialize: function (): GameConfig {
    return {
      allowedYaku: [],
      startPoints: 0,
      goalPoints: 0,
      playAdditionalRounds: false,
      withKazoe: false,
      withKiriageMangan: false,
      withAbortives: false,
      withNagashiMangan: false,
      withAtamahane: false,
      rulesetTitle: "",
      tonpuusen: false,
      startRating: 0,
      riichiGoesToWinner: false,
      doubleronRiichiAtamahane: false,
      doubleronHonbaAtamahane: false,
      extraChomboPayments: false,
      chomboPenalty: 0,
      withKuitan: false,
      withButtobi: false,
      withMultiYakumans: false,
      gameExpirationTime: 0,
      minPenalty: 0,
      maxPenalty: 0,
      penaltyStep: 0,
      yakuWithPao: [],
      eventTitle: "",
      eventDescription: "",
      eventStatHost: "",
      useTimer: false,
      usePenalty: false,
      timerPolicy: "",
      redZone: 0,
      yellowZone: 0,
      gameDuration: 0,
      timezone: "",
      isOnline: false,
      isTeam: false,
      autoSeating: false,
      syncStart: false,
      syncEnd: false,
      sortByGames: false,
      allowPlayerAppend: false,
      withLeadingDealerGameOver: false,
      subtractStartPoints: false,
      seriesLength: 0,
      minGamesCount: 0,
      gamesStatus: TournamentGamesStatus._fromInt(0),
      hideResults: false,
      hideAddReplayButton: false,
      isPrescripted: false,
      chipsValue: 0,
      isFinished: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GameConfig>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.allowedYaku?.length) {
      writer.writePackedInt32(1, msg.allowedYaku);
    }
    if (msg.startPoints) {
      writer.writeInt32(2, msg.startPoints);
    }
    if (msg.goalPoints) {
      writer.writeInt32(3, msg.goalPoints);
    }
    if (msg.playAdditionalRounds) {
      writer.writeBool(4, msg.playAdditionalRounds);
    }
    if (msg.withKazoe) {
      writer.writeBool(5, msg.withKazoe);
    }
    if (msg.withKiriageMangan) {
      writer.writeBool(6, msg.withKiriageMangan);
    }
    if (msg.withAbortives) {
      writer.writeBool(7, msg.withAbortives);
    }
    if (msg.withNagashiMangan) {
      writer.writeBool(8, msg.withNagashiMangan);
    }
    if (msg.withAtamahane) {
      writer.writeBool(9, msg.withAtamahane);
    }
    if (msg.rulesetTitle) {
      writer.writeString(10, msg.rulesetTitle);
    }
    if (msg.tonpuusen) {
      writer.writeBool(11, msg.tonpuusen);
    }
    if (msg.startRating) {
      writer.writeInt32(12, msg.startRating);
    }
    if (msg.riichiGoesToWinner) {
      writer.writeBool(13, msg.riichiGoesToWinner);
    }
    if (msg.doubleronRiichiAtamahane) {
      writer.writeBool(14, msg.doubleronRiichiAtamahane);
    }
    if (msg.doubleronHonbaAtamahane) {
      writer.writeBool(15, msg.doubleronHonbaAtamahane);
    }
    if (msg.extraChomboPayments) {
      writer.writeBool(16, msg.extraChomboPayments);
    }
    if (msg.chomboPenalty) {
      writer.writeFloat(17, msg.chomboPenalty);
    }
    if (msg.withKuitan) {
      writer.writeBool(18, msg.withKuitan);
    }
    if (msg.withButtobi) {
      writer.writeBool(19, msg.withButtobi);
    }
    if (msg.withMultiYakumans) {
      writer.writeBool(20, msg.withMultiYakumans);
    }
    if (msg.gameExpirationTime) {
      writer.writeInt32(21, msg.gameExpirationTime);
    }
    if (msg.minPenalty) {
      writer.writeInt32(22, msg.minPenalty);
    }
    if (msg.maxPenalty) {
      writer.writeInt32(23, msg.maxPenalty);
    }
    if (msg.penaltyStep) {
      writer.writeInt32(24, msg.penaltyStep);
    }
    if (msg.yakuWithPao?.length) {
      writer.writePackedInt32(25, msg.yakuWithPao);
    }
    if (msg.eventTitle) {
      writer.writeString(26, msg.eventTitle);
    }
    if (msg.eventDescription) {
      writer.writeString(27, msg.eventDescription);
    }
    if (msg.eventStatHost) {
      writer.writeString(28, msg.eventStatHost);
    }
    if (msg.useTimer) {
      writer.writeBool(29, msg.useTimer);
    }
    if (msg.usePenalty) {
      writer.writeBool(30, msg.usePenalty);
    }
    if (msg.timerPolicy) {
      writer.writeString(31, msg.timerPolicy);
    }
    if (msg.redZone) {
      writer.writeInt32(32, msg.redZone);
    }
    if (msg.yellowZone) {
      writer.writeInt32(33, msg.yellowZone);
    }
    if (msg.gameDuration) {
      writer.writeInt32(34, msg.gameDuration);
    }
    if (msg.timezone) {
      writer.writeString(35, msg.timezone);
    }
    if (msg.isOnline) {
      writer.writeBool(36, msg.isOnline);
    }
    if (msg.isTeam) {
      writer.writeBool(37, msg.isTeam);
    }
    if (msg.autoSeating) {
      writer.writeBool(38, msg.autoSeating);
    }
    if (msg.syncStart) {
      writer.writeBool(39, msg.syncStart);
    }
    if (msg.syncEnd) {
      writer.writeBool(40, msg.syncEnd);
    }
    if (msg.sortByGames) {
      writer.writeBool(41, msg.sortByGames);
    }
    if (msg.allowPlayerAppend) {
      writer.writeBool(42, msg.allowPlayerAppend);
    }
    if (msg.withLeadingDealerGameOver) {
      writer.writeBool(43, msg.withLeadingDealerGameOver);
    }
    if (msg.subtractStartPoints) {
      writer.writeBool(44, msg.subtractStartPoints);
    }
    if (msg.seriesLength) {
      writer.writeInt32(45, msg.seriesLength);
    }
    if (msg.minGamesCount) {
      writer.writeInt32(46, msg.minGamesCount);
    }
    if (msg.gamesStatus && TournamentGamesStatus._toInt(msg.gamesStatus)) {
      writer.writeEnum(47, TournamentGamesStatus._toInt(msg.gamesStatus));
    }
    if (msg.hideResults) {
      writer.writeBool(48, msg.hideResults);
    }
    if (msg.hideAddReplayButton) {
      writer.writeBool(49, msg.hideAddReplayButton);
    }
    if (msg.isPrescripted) {
      writer.writeBool(50, msg.isPrescripted);
    }
    if (msg.chipsValue) {
      writer.writeInt32(51, msg.chipsValue);
    }
    if (msg.isFinished) {
      writer.writeBool(52, msg.isFinished);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: GameConfig, reader: BinaryReader): GameConfig {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          if (reader.isDelimited()) {
            msg.allowedYaku.push(...reader.readPackedInt32());
          } else {
            msg.allowedYaku.push(reader.readInt32());
          }
          break;
        }
        case 2: {
          msg.startPoints = reader.readInt32();
          break;
        }
        case 3: {
          msg.goalPoints = reader.readInt32();
          break;
        }
        case 4: {
          msg.playAdditionalRounds = reader.readBool();
          break;
        }
        case 5: {
          msg.withKazoe = reader.readBool();
          break;
        }
        case 6: {
          msg.withKiriageMangan = reader.readBool();
          break;
        }
        case 7: {
          msg.withAbortives = reader.readBool();
          break;
        }
        case 8: {
          msg.withNagashiMangan = reader.readBool();
          break;
        }
        case 9: {
          msg.withAtamahane = reader.readBool();
          break;
        }
        case 10: {
          msg.rulesetTitle = reader.readString();
          break;
        }
        case 11: {
          msg.tonpuusen = reader.readBool();
          break;
        }
        case 12: {
          msg.startRating = reader.readInt32();
          break;
        }
        case 13: {
          msg.riichiGoesToWinner = reader.readBool();
          break;
        }
        case 14: {
          msg.doubleronRiichiAtamahane = reader.readBool();
          break;
        }
        case 15: {
          msg.doubleronHonbaAtamahane = reader.readBool();
          break;
        }
        case 16: {
          msg.extraChomboPayments = reader.readBool();
          break;
        }
        case 17: {
          msg.chomboPenalty = reader.readFloat();
          break;
        }
        case 18: {
          msg.withKuitan = reader.readBool();
          break;
        }
        case 19: {
          msg.withButtobi = reader.readBool();
          break;
        }
        case 20: {
          msg.withMultiYakumans = reader.readBool();
          break;
        }
        case 21: {
          msg.gameExpirationTime = reader.readInt32();
          break;
        }
        case 22: {
          msg.minPenalty = reader.readInt32();
          break;
        }
        case 23: {
          msg.maxPenalty = reader.readInt32();
          break;
        }
        case 24: {
          msg.penaltyStep = reader.readInt32();
          break;
        }
        case 25: {
          if (reader.isDelimited()) {
            msg.yakuWithPao.push(...reader.readPackedInt32());
          } else {
            msg.yakuWithPao.push(reader.readInt32());
          }
          break;
        }
        case 26: {
          msg.eventTitle = reader.readString();
          break;
        }
        case 27: {
          msg.eventDescription = reader.readString();
          break;
        }
        case 28: {
          msg.eventStatHost = reader.readString();
          break;
        }
        case 29: {
          msg.useTimer = reader.readBool();
          break;
        }
        case 30: {
          msg.usePenalty = reader.readBool();
          break;
        }
        case 31: {
          msg.timerPolicy = reader.readString();
          break;
        }
        case 32: {
          msg.redZone = reader.readInt32();
          break;
        }
        case 33: {
          msg.yellowZone = reader.readInt32();
          break;
        }
        case 34: {
          msg.gameDuration = reader.readInt32();
          break;
        }
        case 35: {
          msg.timezone = reader.readString();
          break;
        }
        case 36: {
          msg.isOnline = reader.readBool();
          break;
        }
        case 37: {
          msg.isTeam = reader.readBool();
          break;
        }
        case 38: {
          msg.autoSeating = reader.readBool();
          break;
        }
        case 39: {
          msg.syncStart = reader.readBool();
          break;
        }
        case 40: {
          msg.syncEnd = reader.readBool();
          break;
        }
        case 41: {
          msg.sortByGames = reader.readBool();
          break;
        }
        case 42: {
          msg.allowPlayerAppend = reader.readBool();
          break;
        }
        case 43: {
          msg.withLeadingDealerGameOver = reader.readBool();
          break;
        }
        case 44: {
          msg.subtractStartPoints = reader.readBool();
          break;
        }
        case 45: {
          msg.seriesLength = reader.readInt32();
          break;
        }
        case 46: {
          msg.minGamesCount = reader.readInt32();
          break;
        }
        case 47: {
          msg.gamesStatus = TournamentGamesStatus._fromInt(reader.readEnum());
          break;
        }
        case 48: {
          msg.hideResults = reader.readBool();
          break;
        }
        case 49: {
          msg.hideAddReplayButton = reader.readBool();
          break;
        }
        case 50: {
          msg.isPrescripted = reader.readBool();
          break;
        }
        case 51: {
          msg.chipsValue = reader.readInt32();
          break;
        }
        case 52: {
          msg.isFinished = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PlayerInRating = {
  /**
   * Serializes PlayerInRating to protobuf.
   */
  encode: function (msg: Partial<PlayerInRating>): Uint8Array {
    return PlayerInRating._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes PlayerInRating from protobuf.
   */
  decode: function (bytes: ByteSource): PlayerInRating {
    return PlayerInRating._readMessage(
      PlayerInRating.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes PlayerInRating with all fields set to their default value.
   */
  initialize: function (): PlayerInRating {
    return {
      id: 0,
      title: "",
      tenhouId: "",
      rating: 0,
      chips: 0,
      winnerZone: false,
      avgPlace: 0,
      avgScore: 0,
      gamesPlayed: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PlayerInRating>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeInt32(1, msg.id);
    }
    if (msg.title) {
      writer.writeString(2, msg.title);
    }
    if (msg.tenhouId) {
      writer.writeString(3, msg.tenhouId);
    }
    if (msg.rating) {
      writer.writeFloat(4, msg.rating);
    }
    if (msg.chips) {
      writer.writeInt32(5, msg.chips);
    }
    if (msg.winnerZone) {
      writer.writeBool(6, msg.winnerZone);
    }
    if (msg.avgPlace) {
      writer.writeFloat(7, msg.avgPlace);
    }
    if (msg.avgScore) {
      writer.writeFloat(8, msg.avgScore);
    }
    if (msg.gamesPlayed) {
      writer.writeInt32(9, msg.gamesPlayed);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PlayerInRating,
    reader: BinaryReader
  ): PlayerInRating {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readInt32();
          break;
        }
        case 2: {
          msg.title = reader.readString();
          break;
        }
        case 3: {
          msg.tenhouId = reader.readString();
          break;
        }
        case 4: {
          msg.rating = reader.readFloat();
          break;
        }
        case 5: {
          msg.chips = reader.readInt32();
          break;
        }
        case 6: {
          msg.winnerZone = reader.readBool();
          break;
        }
        case 7: {
          msg.avgPlace = reader.readFloat();
          break;
        }
        case 8: {
          msg.avgScore = reader.readFloat();
          break;
        }
        case 9: {
          msg.gamesPlayed = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Player = {
  /**
   * Serializes Player to protobuf.
   */
  encode: function (msg: Partial<Player>): Uint8Array {
    return Player._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Player from protobuf.
   */
  decode: function (bytes: ByteSource): Player {
    return Player._readMessage(Player.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes Player with all fields set to their default value.
   */
  initialize: function (): Player {
    return {
      id: 0,
      title: "",
      tenhouId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Player>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeInt32(1, msg.id);
    }
    if (msg.title) {
      writer.writeString(2, msg.title);
    }
    if (msg.tenhouId) {
      writer.writeString(3, msg.tenhouId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Player, reader: BinaryReader): Player {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readInt32();
          break;
        }
        case 2: {
          msg.title = reader.readString();
          break;
        }
        case 3: {
          msg.tenhouId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FinalResultOfSession = {
  /**
   * Serializes FinalResultOfSession to protobuf.
   */
  encode: function (msg: Partial<FinalResultOfSession>): Uint8Array {
    return FinalResultOfSession._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes FinalResultOfSession from protobuf.
   */
  decode: function (bytes: ByteSource): FinalResultOfSession {
    return FinalResultOfSession._readMessage(
      FinalResultOfSession.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes FinalResultOfSession with all fields set to their default value.
   */
  initialize: function (): FinalResultOfSession {
    return {
      playerId: 0,
      score: 0,
      ratingDelta: 0,
      place: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<FinalResultOfSession>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.playerId) {
      writer.writeInt32(1, msg.playerId);
    }
    if (msg.score) {
      writer.writeInt32(2, msg.score);
    }
    if (msg.ratingDelta) {
      writer.writeFloat(3, msg.ratingDelta);
    }
    if (msg.place) {
      writer.writeInt32(4, msg.place);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FinalResultOfSession,
    reader: BinaryReader
  ): FinalResultOfSession {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.playerId = reader.readInt32();
          break;
        }
        case 2: {
          msg.score = reader.readInt32();
          break;
        }
        case 3: {
          msg.ratingDelta = reader.readFloat();
          break;
        }
        case 4: {
          msg.place = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Penalty = {
  /**
   * Serializes Penalty to protobuf.
   */
  encode: function (msg: Partial<Penalty>): Uint8Array {
    return Penalty._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Penalty from protobuf.
   */
  decode: function (bytes: ByteSource): Penalty {
    return Penalty._readMessage(Penalty.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes Penalty with all fields set to their default value.
   */
  initialize: function (): Penalty {
    return {
      who: 0,
      amount: 0,
      reason: undefined,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Penalty>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.who) {
      writer.writeInt32(1, msg.who);
    }
    if (msg.amount) {
      writer.writeInt32(2, msg.amount);
    }
    if (msg.reason != undefined) {
      writer.writeString(3, msg.reason);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Penalty, reader: BinaryReader): Penalty {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.who = reader.readInt32();
          break;
        }
        case 2: {
          msg.amount = reader.readInt32();
          break;
        }
        case 3: {
          msg.reason = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const RonResult = {
  /**
   * Serializes RonResult to protobuf.
   */
  encode: function (msg: Partial<RonResult>): Uint8Array {
    return RonResult._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes RonResult from protobuf.
   */
  decode: function (bytes: ByteSource): RonResult {
    return RonResult._readMessage(
      RonResult.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes RonResult with all fields set to their default value.
   */
  initialize: function (): RonResult {
    return {
      roundIndex: 0,
      honba: 0,
      winnerId: 0,
      loserId: 0,
      paoPlayerId: 0,
      han: 0,
      fu: 0,
      yaku: [],
      riichiBets: [],
      dora: 0,
      uradora: 0,
      kandora: 0,
      kanuradora: 0,
      openHand: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<RonResult>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.roundIndex) {
      writer.writeInt32(1, msg.roundIndex);
    }
    if (msg.honba) {
      writer.writeInt32(2, msg.honba);
    }
    if (msg.winnerId) {
      writer.writeInt32(3, msg.winnerId);
    }
    if (msg.loserId) {
      writer.writeInt32(4, msg.loserId);
    }
    if (msg.paoPlayerId) {
      writer.writeInt32(5, msg.paoPlayerId);
    }
    if (msg.han) {
      writer.writeInt32(6, msg.han);
    }
    if (msg.fu) {
      writer.writeInt32(7, msg.fu);
    }
    if (msg.yaku?.length) {
      writer.writePackedInt32(8, msg.yaku);
    }
    if (msg.riichiBets?.length) {
      writer.writePackedInt32(9, msg.riichiBets);
    }
    if (msg.dora) {
      writer.writeInt32(10, msg.dora);
    }
    if (msg.uradora) {
      writer.writeInt32(11, msg.uradora);
    }
    if (msg.kandora) {
      writer.writeInt32(12, msg.kandora);
    }
    if (msg.kanuradora) {
      writer.writeInt32(13, msg.kanuradora);
    }
    if (msg.openHand) {
      writer.writeBool(14, msg.openHand);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: RonResult, reader: BinaryReader): RonResult {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.roundIndex = reader.readInt32();
          break;
        }
        case 2: {
          msg.honba = reader.readInt32();
          break;
        }
        case 3: {
          msg.winnerId = reader.readInt32();
          break;
        }
        case 4: {
          msg.loserId = reader.readInt32();
          break;
        }
        case 5: {
          msg.paoPlayerId = reader.readInt32();
          break;
        }
        case 6: {
          msg.han = reader.readInt32();
          break;
        }
        case 7: {
          msg.fu = reader.readInt32();
          break;
        }
        case 8: {
          if (reader.isDelimited()) {
            msg.yaku.push(...reader.readPackedInt32());
          } else {
            msg.yaku.push(reader.readInt32());
          }
          break;
        }
        case 9: {
          if (reader.isDelimited()) {
            msg.riichiBets.push(...reader.readPackedInt32());
          } else {
            msg.riichiBets.push(reader.readInt32());
          }
          break;
        }
        case 10: {
          msg.dora = reader.readInt32();
          break;
        }
        case 11: {
          msg.uradora = reader.readInt32();
          break;
        }
        case 12: {
          msg.kandora = reader.readInt32();
          break;
        }
        case 13: {
          msg.kanuradora = reader.readInt32();
          break;
        }
        case 14: {
          msg.openHand = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const MultironWin = {
  /**
   * Serializes MultironWin to protobuf.
   */
  encode: function (msg: Partial<MultironWin>): Uint8Array {
    return MultironWin._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes MultironWin from protobuf.
   */
  decode: function (bytes: ByteSource): MultironWin {
    return MultironWin._readMessage(
      MultironWin.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes MultironWin with all fields set to their default value.
   */
  initialize: function (): MultironWin {
    return {
      winnerId: 0,
      paoPlayerId: 0,
      han: 0,
      fu: 0,
      yaku: [],
      dora: 0,
      uradora: 0,
      kandora: 0,
      kanuradora: 0,
      openHand: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<MultironWin>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.winnerId) {
      writer.writeInt32(1, msg.winnerId);
    }
    if (msg.paoPlayerId) {
      writer.writeInt32(2, msg.paoPlayerId);
    }
    if (msg.han) {
      writer.writeInt32(3, msg.han);
    }
    if (msg.fu) {
      writer.writeInt32(4, msg.fu);
    }
    if (msg.yaku?.length) {
      writer.writePackedInt32(5, msg.yaku);
    }
    if (msg.dora) {
      writer.writeInt32(6, msg.dora);
    }
    if (msg.uradora) {
      writer.writeInt32(7, msg.uradora);
    }
    if (msg.kandora) {
      writer.writeInt32(8, msg.kandora);
    }
    if (msg.kanuradora) {
      writer.writeInt32(9, msg.kanuradora);
    }
    if (msg.openHand) {
      writer.writeBool(10, msg.openHand);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: MultironWin, reader: BinaryReader): MultironWin {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.winnerId = reader.readInt32();
          break;
        }
        case 2: {
          msg.paoPlayerId = reader.readInt32();
          break;
        }
        case 3: {
          msg.han = reader.readInt32();
          break;
        }
        case 4: {
          msg.fu = reader.readInt32();
          break;
        }
        case 5: {
          if (reader.isDelimited()) {
            msg.yaku.push(...reader.readPackedInt32());
          } else {
            msg.yaku.push(reader.readInt32());
          }
          break;
        }
        case 6: {
          msg.dora = reader.readInt32();
          break;
        }
        case 7: {
          msg.uradora = reader.readInt32();
          break;
        }
        case 8: {
          msg.kandora = reader.readInt32();
          break;
        }
        case 9: {
          msg.kanuradora = reader.readInt32();
          break;
        }
        case 10: {
          msg.openHand = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const MultironResult = {
  /**
   * Serializes MultironResult to protobuf.
   */
  encode: function (msg: Partial<MultironResult>): Uint8Array {
    return MultironResult._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes MultironResult from protobuf.
   */
  decode: function (bytes: ByteSource): MultironResult {
    return MultironResult._readMessage(
      MultironResult.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes MultironResult with all fields set to their default value.
   */
  initialize: function (): MultironResult {
    return {
      roundIndex: 0,
      honba: 0,
      loserId: 0,
      multiRon: 0,
      wins: [],
      riichiBets: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<MultironResult>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.roundIndex) {
      writer.writeInt32(1, msg.roundIndex);
    }
    if (msg.honba) {
      writer.writeInt32(2, msg.honba);
    }
    if (msg.loserId) {
      writer.writeInt32(3, msg.loserId);
    }
    if (msg.multiRon) {
      writer.writeInt32(4, msg.multiRon);
    }
    if (msg.wins?.length) {
      writer.writeRepeatedMessage(
        5,
        msg.wins as any,
        MultironWin._writeMessage
      );
    }
    if (msg.riichiBets?.length) {
      writer.writePackedInt32(6, msg.riichiBets);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: MultironResult,
    reader: BinaryReader
  ): MultironResult {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.roundIndex = reader.readInt32();
          break;
        }
        case 2: {
          msg.honba = reader.readInt32();
          break;
        }
        case 3: {
          msg.loserId = reader.readInt32();
          break;
        }
        case 4: {
          msg.multiRon = reader.readInt32();
          break;
        }
        case 5: {
          const m = MultironWin.initialize();
          reader.readMessage(m, MultironWin._readMessage);
          msg.wins.push(m);
          break;
        }
        case 6: {
          if (reader.isDelimited()) {
            msg.riichiBets.push(...reader.readPackedInt32());
          } else {
            msg.riichiBets.push(reader.readInt32());
          }
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const TsumoResult = {
  /**
   * Serializes TsumoResult to protobuf.
   */
  encode: function (msg: Partial<TsumoResult>): Uint8Array {
    return TsumoResult._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes TsumoResult from protobuf.
   */
  decode: function (bytes: ByteSource): TsumoResult {
    return TsumoResult._readMessage(
      TsumoResult.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes TsumoResult with all fields set to their default value.
   */
  initialize: function (): TsumoResult {
    return {
      roundIndex: 0,
      honba: 0,
      winnerId: 0,
      paoPlayerId: 0,
      han: 0,
      fu: 0,
      yaku: [],
      riichiBets: [],
      dora: 0,
      uradora: 0,
      kandora: 0,
      kanuradora: 0,
      openHand: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<TsumoResult>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.roundIndex) {
      writer.writeInt32(1, msg.roundIndex);
    }
    if (msg.honba) {
      writer.writeInt32(2, msg.honba);
    }
    if (msg.winnerId) {
      writer.writeInt32(3, msg.winnerId);
    }
    if (msg.paoPlayerId) {
      writer.writeInt32(4, msg.paoPlayerId);
    }
    if (msg.han) {
      writer.writeInt32(5, msg.han);
    }
    if (msg.fu) {
      writer.writeInt32(6, msg.fu);
    }
    if (msg.yaku?.length) {
      writer.writePackedInt32(7, msg.yaku);
    }
    if (msg.riichiBets?.length) {
      writer.writePackedInt32(8, msg.riichiBets);
    }
    if (msg.dora) {
      writer.writeInt32(9, msg.dora);
    }
    if (msg.uradora) {
      writer.writeInt32(10, msg.uradora);
    }
    if (msg.kandora) {
      writer.writeInt32(11, msg.kandora);
    }
    if (msg.kanuradora) {
      writer.writeInt32(12, msg.kanuradora);
    }
    if (msg.openHand) {
      writer.writeBool(13, msg.openHand);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: TsumoResult, reader: BinaryReader): TsumoResult {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.roundIndex = reader.readInt32();
          break;
        }
        case 2: {
          msg.honba = reader.readInt32();
          break;
        }
        case 3: {
          msg.winnerId = reader.readInt32();
          break;
        }
        case 4: {
          msg.paoPlayerId = reader.readInt32();
          break;
        }
        case 5: {
          msg.han = reader.readInt32();
          break;
        }
        case 6: {
          msg.fu = reader.readInt32();
          break;
        }
        case 7: {
          if (reader.isDelimited()) {
            msg.yaku.push(...reader.readPackedInt32());
          } else {
            msg.yaku.push(reader.readInt32());
          }
          break;
        }
        case 8: {
          if (reader.isDelimited()) {
            msg.riichiBets.push(...reader.readPackedInt32());
          } else {
            msg.riichiBets.push(reader.readInt32());
          }
          break;
        }
        case 9: {
          msg.dora = reader.readInt32();
          break;
        }
        case 10: {
          msg.uradora = reader.readInt32();
          break;
        }
        case 11: {
          msg.kandora = reader.readInt32();
          break;
        }
        case 12: {
          msg.kanuradora = reader.readInt32();
          break;
        }
        case 13: {
          msg.openHand = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DrawResult = {
  /**
   * Serializes DrawResult to protobuf.
   */
  encode: function (msg: Partial<DrawResult>): Uint8Array {
    return DrawResult._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes DrawResult from protobuf.
   */
  decode: function (bytes: ByteSource): DrawResult {
    return DrawResult._readMessage(
      DrawResult.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes DrawResult with all fields set to their default value.
   */
  initialize: function (): DrawResult {
    return {
      roundIndex: 0,
      honba: 0,
      riichiBets: [],
      tempai: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<DrawResult>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.roundIndex) {
      writer.writeInt32(1, msg.roundIndex);
    }
    if (msg.honba) {
      writer.writeInt32(2, msg.honba);
    }
    if (msg.riichiBets?.length) {
      writer.writePackedInt32(3, msg.riichiBets);
    }
    if (msg.tempai?.length) {
      writer.writePackedInt32(4, msg.tempai);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: DrawResult, reader: BinaryReader): DrawResult {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.roundIndex = reader.readInt32();
          break;
        }
        case 2: {
          msg.honba = reader.readInt32();
          break;
        }
        case 3: {
          if (reader.isDelimited()) {
            msg.riichiBets.push(...reader.readPackedInt32());
          } else {
            msg.riichiBets.push(reader.readInt32());
          }
          break;
        }
        case 4: {
          if (reader.isDelimited()) {
            msg.tempai.push(...reader.readPackedInt32());
          } else {
            msg.tempai.push(reader.readInt32());
          }
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AbortResult = {
  /**
   * Serializes AbortResult to protobuf.
   */
  encode: function (msg: Partial<AbortResult>): Uint8Array {
    return AbortResult._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes AbortResult from protobuf.
   */
  decode: function (bytes: ByteSource): AbortResult {
    return AbortResult._readMessage(
      AbortResult.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes AbortResult with all fields set to their default value.
   */
  initialize: function (): AbortResult {
    return {
      roundIndex: 0,
      honba: 0,
      riichiBets: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<AbortResult>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.roundIndex) {
      writer.writeInt32(1, msg.roundIndex);
    }
    if (msg.honba) {
      writer.writeInt32(2, msg.honba);
    }
    if (msg.riichiBets?.length) {
      writer.writePackedInt32(3, msg.riichiBets);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: AbortResult, reader: BinaryReader): AbortResult {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.roundIndex = reader.readInt32();
          break;
        }
        case 2: {
          msg.honba = reader.readInt32();
          break;
        }
        case 3: {
          if (reader.isDelimited()) {
            msg.riichiBets.push(...reader.readPackedInt32());
          } else {
            msg.riichiBets.push(reader.readInt32());
          }
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ChomboResult = {
  /**
   * Serializes ChomboResult to protobuf.
   */
  encode: function (msg: Partial<ChomboResult>): Uint8Array {
    return ChomboResult._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ChomboResult from protobuf.
   */
  decode: function (bytes: ByteSource): ChomboResult {
    return ChomboResult._readMessage(
      ChomboResult.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ChomboResult with all fields set to their default value.
   */
  initialize: function (): ChomboResult {
    return {
      roundIndex: 0,
      honba: 0,
      loserId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ChomboResult>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.roundIndex) {
      writer.writeInt32(1, msg.roundIndex);
    }
    if (msg.honba) {
      writer.writeInt32(2, msg.honba);
    }
    if (msg.loserId) {
      writer.writeInt32(3, msg.loserId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ChomboResult,
    reader: BinaryReader
  ): ChomboResult {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.roundIndex = reader.readInt32();
          break;
        }
        case 2: {
          msg.honba = reader.readInt32();
          break;
        }
        case 3: {
          msg.loserId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const NagashiResult = {
  /**
   * Serializes NagashiResult to protobuf.
   */
  encode: function (msg: Partial<NagashiResult>): Uint8Array {
    return NagashiResult._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes NagashiResult from protobuf.
   */
  decode: function (bytes: ByteSource): NagashiResult {
    return NagashiResult._readMessage(
      NagashiResult.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes NagashiResult with all fields set to their default value.
   */
  initialize: function (): NagashiResult {
    return {
      roundIndex: 0,
      honba: 0,
      riichiBets: [],
      tempai: [],
      nagashi: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<NagashiResult>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.roundIndex) {
      writer.writeInt32(1, msg.roundIndex);
    }
    if (msg.honba) {
      writer.writeInt32(2, msg.honba);
    }
    if (msg.riichiBets?.length) {
      writer.writePackedInt32(3, msg.riichiBets);
    }
    if (msg.tempai?.length) {
      writer.writePackedInt32(4, msg.tempai);
    }
    if (msg.nagashi?.length) {
      writer.writePackedInt32(5, msg.nagashi);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: NagashiResult,
    reader: BinaryReader
  ): NagashiResult {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.roundIndex = reader.readInt32();
          break;
        }
        case 2: {
          msg.honba = reader.readInt32();
          break;
        }
        case 3: {
          if (reader.isDelimited()) {
            msg.riichiBets.push(...reader.readPackedInt32());
          } else {
            msg.riichiBets.push(reader.readInt32());
          }
          break;
        }
        case 4: {
          if (reader.isDelimited()) {
            msg.tempai.push(...reader.readPackedInt32());
          } else {
            msg.tempai.push(reader.readInt32());
          }
          break;
        }
        case 5: {
          if (reader.isDelimited()) {
            msg.nagashi.push(...reader.readPackedInt32());
          } else {
            msg.nagashi.push(reader.readInt32());
          }
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Round = {
  /**
   * Serializes Round to protobuf.
   */
  encode: function (msg: Partial<Round>): Uint8Array {
    return Round._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Round from protobuf.
   */
  decode: function (bytes: ByteSource): Round {
    return Round._readMessage(Round.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes Round with all fields set to their default value.
   */
  initialize: function (): Round {
    return {
      ron: undefined,
      tsumo: undefined,
      multiron: undefined,
      draw: undefined,
      abort: undefined,
      chombo: undefined,
      nagashi: undefined,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Round>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.ron != undefined) {
      writer.writeMessage(1, msg.ron, RonResult._writeMessage);
    }
    if (msg.tsumo != undefined) {
      writer.writeMessage(2, msg.tsumo, TsumoResult._writeMessage);
    }
    if (msg.multiron != undefined) {
      writer.writeMessage(3, msg.multiron, MultironResult._writeMessage);
    }
    if (msg.draw != undefined) {
      writer.writeMessage(4, msg.draw, DrawResult._writeMessage);
    }
    if (msg.abort != undefined) {
      writer.writeMessage(5, msg.abort, AbortResult._writeMessage);
    }
    if (msg.chombo != undefined) {
      writer.writeMessage(6, msg.chombo, ChomboResult._writeMessage);
    }
    if (msg.nagashi != undefined) {
      writer.writeMessage(7, msg.nagashi, NagashiResult._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Round, reader: BinaryReader): Round {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ron = RonResult.initialize();
          reader.readMessage(msg.ron, RonResult._readMessage);
          break;
        }
        case 2: {
          msg.tsumo = TsumoResult.initialize();
          reader.readMessage(msg.tsumo, TsumoResult._readMessage);
          break;
        }
        case 3: {
          msg.multiron = MultironResult.initialize();
          reader.readMessage(msg.multiron, MultironResult._readMessage);
          break;
        }
        case 4: {
          msg.draw = DrawResult.initialize();
          reader.readMessage(msg.draw, DrawResult._readMessage);
          break;
        }
        case 5: {
          msg.abort = AbortResult.initialize();
          reader.readMessage(msg.abort, AbortResult._readMessage);
          break;
        }
        case 6: {
          msg.chombo = ChomboResult.initialize();
          reader.readMessage(msg.chombo, ChomboResult._readMessage);
          break;
        }
        case 7: {
          msg.nagashi = NagashiResult.initialize();
          reader.readMessage(msg.nagashi, NagashiResult._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GameResult = {
  /**
   * Serializes GameResult to protobuf.
   */
  encode: function (msg: Partial<GameResult>): Uint8Array {
    return GameResult._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes GameResult from protobuf.
   */
  decode: function (bytes: ByteSource): GameResult {
    return GameResult._readMessage(
      GameResult.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GameResult with all fields set to their default value.
   */
  initialize: function (): GameResult {
    return {
      sessionHash: "",
      date: undefined,
      replayLink: "",
      players: [],
      finalResults: [],
      penaltyLog: [],
      rounds: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GameResult>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.sessionHash) {
      writer.writeString(1, msg.sessionHash);
    }
    if (msg.date != undefined) {
      writer.writeString(2, msg.date);
    }
    if (msg.replayLink) {
      writer.writeString(3, msg.replayLink);
    }
    if (msg.players?.length) {
      writer.writePackedInt32(4, msg.players);
    }
    if (msg.finalResults?.length) {
      writer.writeRepeatedMessage(
        5,
        msg.finalResults as any,
        FinalResultOfSession._writeMessage
      );
    }
    if (msg.penaltyLog?.length) {
      writer.writeRepeatedMessage(
        6,
        msg.penaltyLog as any,
        Penalty._writeMessage
      );
    }
    if (msg.rounds?.length) {
      writer.writeRepeatedMessage(7, msg.rounds as any, Round._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: GameResult, reader: BinaryReader): GameResult {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.sessionHash = reader.readString();
          break;
        }
        case 2: {
          msg.date = reader.readString();
          break;
        }
        case 3: {
          msg.replayLink = reader.readString();
          break;
        }
        case 4: {
          if (reader.isDelimited()) {
            msg.players.push(...reader.readPackedInt32());
          } else {
            msg.players.push(reader.readInt32());
          }
          break;
        }
        case 5: {
          const m = FinalResultOfSession.initialize();
          reader.readMessage(m, FinalResultOfSession._readMessage);
          msg.finalResults.push(m);
          break;
        }
        case 6: {
          const m = Penalty.initialize();
          reader.readMessage(m, Penalty._readMessage);
          msg.penaltyLog.push(m);
          break;
        }
        case 7: {
          const m = Round.initialize();
          reader.readMessage(m, Round._readMessage);
          msg.rounds.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PlayerPlaceInSeries = {
  /**
   * Serializes PlayerPlaceInSeries to protobuf.
   */
  encode: function (msg: Partial<PlayerPlaceInSeries>): Uint8Array {
    return PlayerPlaceInSeries._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes PlayerPlaceInSeries from protobuf.
   */
  decode: function (bytes: ByteSource): PlayerPlaceInSeries {
    return PlayerPlaceInSeries._readMessage(
      PlayerPlaceInSeries.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes PlayerPlaceInSeries with all fields set to their default value.
   */
  initialize: function (): PlayerPlaceInSeries {
    return {
      sessionHash: "",
      place: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PlayerPlaceInSeries>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.sessionHash) {
      writer.writeString(1, msg.sessionHash);
    }
    if (msg.place) {
      writer.writeInt32(2, msg.place);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PlayerPlaceInSeries,
    reader: BinaryReader
  ): PlayerPlaceInSeries {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.sessionHash = reader.readString();
          break;
        }
        case 2: {
          msg.place = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SeriesResult = {
  /**
   * Serializes SeriesResult to protobuf.
   */
  encode: function (msg: Partial<SeriesResult>): Uint8Array {
    return SeriesResult._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes SeriesResult from protobuf.
   */
  decode: function (bytes: ByteSource): SeriesResult {
    return SeriesResult._readMessage(
      SeriesResult.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes SeriesResult with all fields set to their default value.
   */
  initialize: function (): SeriesResult {
    return {
      player: Player.initialize(),
      bestSeries: [],
      bestSeriesScores: 0,
      bestSeriesPlaces: 0,
      bestSeriesAvgPlace: "",
      currentSeries: [],
      currentSeriesScores: 0,
      currentSeriesPlaces: 0,
      currentSeriesAvgPlace: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<SeriesResult>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.player) {
      writer.writeMessage(1, msg.player, Player._writeMessage);
    }
    if (msg.bestSeries?.length) {
      writer.writeRepeatedMessage(
        2,
        msg.bestSeries as any,
        PlayerPlaceInSeries._writeMessage
      );
    }
    if (msg.bestSeriesScores) {
      writer.writeFloat(3, msg.bestSeriesScores);
    }
    if (msg.bestSeriesPlaces) {
      writer.writeInt32(4, msg.bestSeriesPlaces);
    }
    if (msg.bestSeriesAvgPlace) {
      writer.writeString(5, msg.bestSeriesAvgPlace);
    }
    if (msg.currentSeries?.length) {
      writer.writeRepeatedMessage(
        6,
        msg.currentSeries as any,
        PlayerPlaceInSeries._writeMessage
      );
    }
    if (msg.currentSeriesScores) {
      writer.writeFloat(7, msg.currentSeriesScores);
    }
    if (msg.currentSeriesPlaces) {
      writer.writeInt32(8, msg.currentSeriesPlaces);
    }
    if (msg.currentSeriesAvgPlace) {
      writer.writeString(9, msg.currentSeriesAvgPlace);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SeriesResult,
    reader: BinaryReader
  ): SeriesResult {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.player, Player._readMessage);
          break;
        }
        case 2: {
          const m = PlayerPlaceInSeries.initialize();
          reader.readMessage(m, PlayerPlaceInSeries._readMessage);
          msg.bestSeries.push(m);
          break;
        }
        case 3: {
          msg.bestSeriesScores = reader.readFloat();
          break;
        }
        case 4: {
          msg.bestSeriesPlaces = reader.readInt32();
          break;
        }
        case 5: {
          msg.bestSeriesAvgPlace = reader.readString();
          break;
        }
        case 6: {
          const m = PlayerPlaceInSeries.initialize();
          reader.readMessage(m, PlayerPlaceInSeries._readMessage);
          msg.currentSeries.push(m);
          break;
        }
        case 7: {
          msg.currentSeriesScores = reader.readFloat();
          break;
        }
        case 8: {
          msg.currentSeriesPlaces = reader.readInt32();
          break;
        }
        case 9: {
          msg.currentSeriesAvgPlace = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ReplacementPlayer = {
  /**
   * Serializes ReplacementPlayer to protobuf.
   */
  encode: function (msg: Partial<ReplacementPlayer>): Uint8Array {
    return ReplacementPlayer._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ReplacementPlayer from protobuf.
   */
  decode: function (bytes: ByteSource): ReplacementPlayer {
    return ReplacementPlayer._readMessage(
      ReplacementPlayer.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ReplacementPlayer with all fields set to their default value.
   */
  initialize: function (): ReplacementPlayer {
    return {
      id: 0,
      title: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ReplacementPlayer>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeInt32(1, msg.id);
    }
    if (msg.title) {
      writer.writeString(2, msg.title);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ReplacementPlayer,
    reader: BinaryReader
  ): ReplacementPlayer {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readInt32();
          break;
        }
        case 2: {
          msg.title = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PlayerInSession = {
  /**
   * Serializes PlayerInSession to protobuf.
   */
  encode: function (msg: Partial<PlayerInSession>): Uint8Array {
    return PlayerInSession._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes PlayerInSession from protobuf.
   */
  decode: function (bytes: ByteSource): PlayerInSession {
    return PlayerInSession._readMessage(
      PlayerInSession.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes PlayerInSession with all fields set to their default value.
   */
  initialize: function (): PlayerInSession {
    return {
      id: 0,
      title: "",
      score: 0,
      replacedBy: undefined,
      ratingDelta: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PlayerInSession>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeInt32(1, msg.id);
    }
    if (msg.title) {
      writer.writeString(2, msg.title);
    }
    if (msg.score) {
      writer.writeInt32(3, msg.score);
    }
    if (msg.replacedBy != undefined) {
      writer.writeMessage(4, msg.replacedBy, ReplacementPlayer._writeMessage);
    }
    if (msg.ratingDelta) {
      writer.writeFloat(5, msg.ratingDelta);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PlayerInSession,
    reader: BinaryReader
  ): PlayerInSession {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readInt32();
          break;
        }
        case 2: {
          msg.title = reader.readString();
          break;
        }
        case 3: {
          msg.score = reader.readInt32();
          break;
        }
        case 4: {
          msg.replacedBy = ReplacementPlayer.initialize();
          reader.readMessage(msg.replacedBy, ReplacementPlayer._readMessage);
          break;
        }
        case 5: {
          msg.ratingDelta = reader.readFloat();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CurrentSession = {
  /**
   * Serializes CurrentSession to protobuf.
   */
  encode: function (msg: Partial<CurrentSession>): Uint8Array {
    return CurrentSession._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes CurrentSession from protobuf.
   */
  decode: function (bytes: ByteSource): CurrentSession {
    return CurrentSession._readMessage(
      CurrentSession.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes CurrentSession with all fields set to their default value.
   */
  initialize: function (): CurrentSession {
    return {
      sessionHash: "",
      status: "",
      tableIndex: undefined,
      players: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<CurrentSession>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.sessionHash) {
      writer.writeString(1, msg.sessionHash);
    }
    if (msg.status) {
      writer.writeString(2, msg.status);
    }
    if (msg.tableIndex != undefined) {
      writer.writeInt32(3, msg.tableIndex);
    }
    if (msg.players?.length) {
      writer.writeRepeatedMessage(
        4,
        msg.players as any,
        PlayerInSession._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CurrentSession,
    reader: BinaryReader
  ): CurrentSession {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.sessionHash = reader.readString();
          break;
        }
        case 2: {
          msg.status = reader.readString();
          break;
        }
        case 3: {
          msg.tableIndex = reader.readInt32();
          break;
        }
        case 4: {
          const m = PlayerInSession.initialize();
          reader.readMessage(m, PlayerInSession._readMessage);
          msg.players.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const RegisteredPlayer = {
  /**
   * Serializes RegisteredPlayer to protobuf.
   */
  encode: function (msg: Partial<RegisteredPlayer>): Uint8Array {
    return RegisteredPlayer._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes RegisteredPlayer from protobuf.
   */
  decode: function (bytes: ByteSource): RegisteredPlayer {
    return RegisteredPlayer._readMessage(
      RegisteredPlayer.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes RegisteredPlayer with all fields set to their default value.
   */
  initialize: function (): RegisteredPlayer {
    return {
      id: 0,
      title: "",
      localId: undefined,
      teamName: undefined,
      tenhouId: "",
      ignoreSeating: false,
      replacedBy: undefined,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<RegisteredPlayer>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeInt32(1, msg.id);
    }
    if (msg.title) {
      writer.writeString(2, msg.title);
    }
    if (msg.localId != undefined) {
      writer.writeInt32(3, msg.localId);
    }
    if (msg.teamName != undefined) {
      writer.writeString(4, msg.teamName);
    }
    if (msg.tenhouId) {
      writer.writeString(5, msg.tenhouId);
    }
    if (msg.ignoreSeating) {
      writer.writeBool(6, msg.ignoreSeating);
    }
    if (msg.replacedBy != undefined) {
      writer.writeMessage(7, msg.replacedBy, ReplacementPlayer._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: RegisteredPlayer,
    reader: BinaryReader
  ): RegisteredPlayer {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readInt32();
          break;
        }
        case 2: {
          msg.title = reader.readString();
          break;
        }
        case 3: {
          msg.localId = reader.readInt32();
          break;
        }
        case 4: {
          msg.teamName = reader.readString();
          break;
        }
        case 5: {
          msg.tenhouId = reader.readString();
          break;
        }
        case 6: {
          msg.ignoreSeating = reader.readBool();
          break;
        }
        case 7: {
          msg.replacedBy = ReplacementPlayer.initialize();
          reader.readMessage(msg.replacedBy, ReplacementPlayer._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SessionHistoryResult = {
  /**
   * Serializes SessionHistoryResult to protobuf.
   */
  encode: function (msg: Partial<SessionHistoryResult>): Uint8Array {
    return SessionHistoryResult._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes SessionHistoryResult from protobuf.
   */
  decode: function (bytes: ByteSource): SessionHistoryResult {
    return SessionHistoryResult._readMessage(
      SessionHistoryResult.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes SessionHistoryResult with all fields set to their default value.
   */
  initialize: function (): SessionHistoryResult {
    return {
      sessionHash: "",
      eventId: 0,
      playerId: 0,
      score: 0,
      ratingDelta: 0,
      place: 0,
      title: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<SessionHistoryResult>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.sessionHash) {
      writer.writeString(1, msg.sessionHash);
    }
    if (msg.eventId) {
      writer.writeInt32(2, msg.eventId);
    }
    if (msg.playerId) {
      writer.writeInt32(3, msg.playerId);
    }
    if (msg.score) {
      writer.writeInt32(4, msg.score);
    }
    if (msg.ratingDelta) {
      writer.writeFloat(5, msg.ratingDelta);
    }
    if (msg.place) {
      writer.writeInt32(6, msg.place);
    }
    if (msg.title) {
      writer.writeString(7, msg.title);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SessionHistoryResult,
    reader: BinaryReader
  ): SessionHistoryResult {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.sessionHash = reader.readString();
          break;
        }
        case 2: {
          msg.eventId = reader.readInt32();
          break;
        }
        case 3: {
          msg.playerId = reader.readInt32();
          break;
        }
        case 4: {
          msg.score = reader.readInt32();
          break;
        }
        case 5: {
          msg.ratingDelta = reader.readFloat();
          break;
        }
        case 6: {
          msg.place = reader.readInt32();
          break;
        }
        case 7: {
          msg.title = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SessionHistoryResultTable = {
  /**
   * Serializes SessionHistoryResultTable to protobuf.
   */
  encode: function (msg: Partial<SessionHistoryResultTable>): Uint8Array {
    return SessionHistoryResultTable._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes SessionHistoryResultTable from protobuf.
   */
  decode: function (bytes: ByteSource): SessionHistoryResultTable {
    return SessionHistoryResultTable._readMessage(
      SessionHistoryResultTable.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes SessionHistoryResultTable with all fields set to their default value.
   */
  initialize: function (): SessionHistoryResultTable {
    return {
      table: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<SessionHistoryResultTable>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.table?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.table as any,
        SessionHistoryResult._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SessionHistoryResultTable,
    reader: BinaryReader
  ): SessionHistoryResultTable {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = SessionHistoryResult.initialize();
          reader.readMessage(m, SessionHistoryResult._readMessage);
          msg.table.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PlacesSummaryItem = {
  /**
   * Serializes PlacesSummaryItem to protobuf.
   */
  encode: function (msg: Partial<PlacesSummaryItem>): Uint8Array {
    return PlacesSummaryItem._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes PlacesSummaryItem from protobuf.
   */
  decode: function (bytes: ByteSource): PlacesSummaryItem {
    return PlacesSummaryItem._readMessage(
      PlacesSummaryItem.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes PlacesSummaryItem with all fields set to their default value.
   */
  initialize: function (): PlacesSummaryItem {
    return {
      place: 0,
      count: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PlacesSummaryItem>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.place) {
      writer.writeInt32(1, msg.place);
    }
    if (msg.count) {
      writer.writeInt32(2, msg.count);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PlacesSummaryItem,
    reader: BinaryReader
  ): PlacesSummaryItem {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.place = reader.readInt32();
          break;
        }
        case 2: {
          msg.count = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PlayerWinSummary = {
  /**
   * Serializes PlayerWinSummary to protobuf.
   */
  encode: function (msg: Partial<PlayerWinSummary>): Uint8Array {
    return PlayerWinSummary._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes PlayerWinSummary from protobuf.
   */
  decode: function (bytes: ByteSource): PlayerWinSummary {
    return PlayerWinSummary._readMessage(
      PlayerWinSummary.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes PlayerWinSummary with all fields set to their default value.
   */
  initialize: function (): PlayerWinSummary {
    return {
      ron: 0,
      tsumo: 0,
      chombo: 0,
      feed: 0,
      tsumofeed: 0,
      winsWithOpen: 0,
      winsWithRiichi: 0,
      winsWithDama: 0,
      unforcedFeedToOpen: 0,
      unforcedFeedToRiichi: 0,
      unforcedFeedToDama: 0,
      draw: 0,
      drawTempai: 0,
      pointsWon: 0,
      pointsLostRon: 0,
      pointsLostTsumo: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PlayerWinSummary>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.ron) {
      writer.writeInt32(1, msg.ron);
    }
    if (msg.tsumo) {
      writer.writeInt32(2, msg.tsumo);
    }
    if (msg.chombo) {
      writer.writeInt32(3, msg.chombo);
    }
    if (msg.feed) {
      writer.writeInt32(4, msg.feed);
    }
    if (msg.tsumofeed) {
      writer.writeInt32(5, msg.tsumofeed);
    }
    if (msg.winsWithOpen) {
      writer.writeInt32(6, msg.winsWithOpen);
    }
    if (msg.winsWithRiichi) {
      writer.writeInt32(7, msg.winsWithRiichi);
    }
    if (msg.winsWithDama) {
      writer.writeInt32(8, msg.winsWithDama);
    }
    if (msg.unforcedFeedToOpen) {
      writer.writeInt32(9, msg.unforcedFeedToOpen);
    }
    if (msg.unforcedFeedToRiichi) {
      writer.writeInt32(10, msg.unforcedFeedToRiichi);
    }
    if (msg.unforcedFeedToDama) {
      writer.writeInt32(11, msg.unforcedFeedToDama);
    }
    if (msg.draw) {
      writer.writeInt32(12, msg.draw);
    }
    if (msg.drawTempai) {
      writer.writeInt32(13, msg.drawTempai);
    }
    if (msg.pointsWon) {
      writer.writeInt32(14, msg.pointsWon);
    }
    if (msg.pointsLostRon) {
      writer.writeInt32(15, msg.pointsLostRon);
    }
    if (msg.pointsLostTsumo) {
      writer.writeInt32(16, msg.pointsLostTsumo);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PlayerWinSummary,
    reader: BinaryReader
  ): PlayerWinSummary {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ron = reader.readInt32();
          break;
        }
        case 2: {
          msg.tsumo = reader.readInt32();
          break;
        }
        case 3: {
          msg.chombo = reader.readInt32();
          break;
        }
        case 4: {
          msg.feed = reader.readInt32();
          break;
        }
        case 5: {
          msg.tsumofeed = reader.readInt32();
          break;
        }
        case 6: {
          msg.winsWithOpen = reader.readInt32();
          break;
        }
        case 7: {
          msg.winsWithRiichi = reader.readInt32();
          break;
        }
        case 8: {
          msg.winsWithDama = reader.readInt32();
          break;
        }
        case 9: {
          msg.unforcedFeedToOpen = reader.readInt32();
          break;
        }
        case 10: {
          msg.unforcedFeedToRiichi = reader.readInt32();
          break;
        }
        case 11: {
          msg.unforcedFeedToDama = reader.readInt32();
          break;
        }
        case 12: {
          msg.draw = reader.readInt32();
          break;
        }
        case 13: {
          msg.drawTempai = reader.readInt32();
          break;
        }
        case 14: {
          msg.pointsWon = reader.readInt32();
          break;
        }
        case 15: {
          msg.pointsLostRon = reader.readInt32();
          break;
        }
        case 16: {
          msg.pointsLostTsumo = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const HandValueStat = {
  /**
   * Serializes HandValueStat to protobuf.
   */
  encode: function (msg: Partial<HandValueStat>): Uint8Array {
    return HandValueStat._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes HandValueStat from protobuf.
   */
  decode: function (bytes: ByteSource): HandValueStat {
    return HandValueStat._readMessage(
      HandValueStat.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes HandValueStat with all fields set to their default value.
   */
  initialize: function (): HandValueStat {
    return {
      hanCount: 0,
      count: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<HandValueStat>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.hanCount) {
      writer.writeInt32(1, msg.hanCount);
    }
    if (msg.count) {
      writer.writeInt32(2, msg.count);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: HandValueStat,
    reader: BinaryReader
  ): HandValueStat {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.hanCount = reader.readInt32();
          break;
        }
        case 2: {
          msg.count = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const YakuStat = {
  /**
   * Serializes YakuStat to protobuf.
   */
  encode: function (msg: Partial<YakuStat>): Uint8Array {
    return YakuStat._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes YakuStat from protobuf.
   */
  decode: function (bytes: ByteSource): YakuStat {
    return YakuStat._readMessage(
      YakuStat.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes YakuStat with all fields set to their default value.
   */
  initialize: function (): YakuStat {
    return {
      yakuId: 0,
      count: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<YakuStat>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.yakuId) {
      writer.writeInt32(1, msg.yakuId);
    }
    if (msg.count) {
      writer.writeInt32(2, msg.count);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: YakuStat, reader: BinaryReader): YakuStat {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.yakuId = reader.readInt32();
          break;
        }
        case 2: {
          msg.count = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const RiichiSummary = {
  /**
   * Serializes RiichiSummary to protobuf.
   */
  encode: function (msg: Partial<RiichiSummary>): Uint8Array {
    return RiichiSummary._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes RiichiSummary from protobuf.
   */
  decode: function (bytes: ByteSource): RiichiSummary {
    return RiichiSummary._readMessage(
      RiichiSummary.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes RiichiSummary with all fields set to their default value.
   */
  initialize: function (): RiichiSummary {
    return {
      riichiWon: 0,
      riichiLost: 0,
      feedUnderRiichi: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<RiichiSummary>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.riichiWon) {
      writer.writeInt32(1, msg.riichiWon);
    }
    if (msg.riichiLost) {
      writer.writeInt32(2, msg.riichiLost);
    }
    if (msg.feedUnderRiichi) {
      writer.writeInt32(3, msg.feedUnderRiichi);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: RiichiSummary,
    reader: BinaryReader
  ): RiichiSummary {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.riichiWon = reader.readInt32();
          break;
        }
        case 2: {
          msg.riichiLost = reader.readInt32();
          break;
        }
        case 3: {
          msg.feedUnderRiichi = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DoraSummary = {
  /**
   * Serializes DoraSummary to protobuf.
   */
  encode: function (msg: Partial<DoraSummary>): Uint8Array {
    return DoraSummary._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes DoraSummary from protobuf.
   */
  decode: function (bytes: ByteSource): DoraSummary {
    return DoraSummary._readMessage(
      DoraSummary.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes DoraSummary with all fields set to their default value.
   */
  initialize: function (): DoraSummary {
    return {
      count: 0,
      average: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<DoraSummary>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.count) {
      writer.writeInt32(1, msg.count);
    }
    if (msg.average) {
      writer.writeFloat(2, msg.average);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: DoraSummary, reader: BinaryReader): DoraSummary {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.count = reader.readInt32();
          break;
        }
        case 2: {
          msg.average = reader.readFloat();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const IntermediateResultOfSession = {
  /**
   * Serializes IntermediateResultOfSession to protobuf.
   */
  encode: function (msg: Partial<IntermediateResultOfSession>): Uint8Array {
    return IntermediateResultOfSession._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes IntermediateResultOfSession from protobuf.
   */
  decode: function (bytes: ByteSource): IntermediateResultOfSession {
    return IntermediateResultOfSession._readMessage(
      IntermediateResultOfSession.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes IntermediateResultOfSession with all fields set to their default value.
   */
  initialize: function (): IntermediateResultOfSession {
    return {
      playerId: 0,
      score: 0,
      penaltyScore: undefined,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<IntermediateResultOfSession>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.playerId) {
      writer.writeInt32(1, msg.playerId);
    }
    if (msg.score) {
      writer.writeInt32(2, msg.score);
    }
    if (msg.penaltyScore != undefined) {
      writer.writeInt32(3, msg.penaltyScore);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: IntermediateResultOfSession,
    reader: BinaryReader
  ): IntermediateResultOfSession {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.playerId = reader.readInt32();
          break;
        }
        case 2: {
          msg.score = reader.readInt32();
          break;
        }
        case 3: {
          msg.penaltyScore = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PaymentLogItem = {
  /**
   * Serializes PaymentLogItem to protobuf.
   */
  encode: function (msg: Partial<PaymentLogItem>): Uint8Array {
    return PaymentLogItem._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes PaymentLogItem from protobuf.
   */
  decode: function (bytes: ByteSource): PaymentLogItem {
    return PaymentLogItem._readMessage(
      PaymentLogItem.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes PaymentLogItem with all fields set to their default value.
   */
  initialize: function (): PaymentLogItem {
    return {
      from: undefined,
      to: undefined,
      amount: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PaymentLogItem>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.from != undefined) {
      writer.writeInt32(1, msg.from);
    }
    if (msg.to != undefined) {
      writer.writeInt32(2, msg.to);
    }
    if (msg.amount) {
      writer.writeInt32(3, msg.amount);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PaymentLogItem,
    reader: BinaryReader
  ): PaymentLogItem {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.from = reader.readInt32();
          break;
        }
        case 2: {
          msg.to = reader.readInt32();
          break;
        }
        case 3: {
          msg.amount = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PaymentLog = {
  /**
   * Serializes PaymentLog to protobuf.
   */
  encode: function (msg: Partial<PaymentLog>): Uint8Array {
    return PaymentLog._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes PaymentLog from protobuf.
   */
  decode: function (bytes: ByteSource): PaymentLog {
    return PaymentLog._readMessage(
      PaymentLog.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes PaymentLog with all fields set to their default value.
   */
  initialize: function (): PaymentLog {
    return {
      direct: [],
      riichi: [],
      honba: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PaymentLog>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.direct?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.direct as any,
        PaymentLogItem._writeMessage
      );
    }
    if (msg.riichi?.length) {
      writer.writeRepeatedMessage(
        2,
        msg.riichi as any,
        PaymentLogItem._writeMessage
      );
    }
    if (msg.honba?.length) {
      writer.writeRepeatedMessage(
        3,
        msg.honba as any,
        PaymentLogItem._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: PaymentLog, reader: BinaryReader): PaymentLog {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = PaymentLogItem.initialize();
          reader.readMessage(m, PaymentLogItem._readMessage);
          msg.direct.push(m);
          break;
        }
        case 2: {
          const m = PaymentLogItem.initialize();
          reader.readMessage(m, PaymentLogItem._readMessage);
          msg.riichi.push(m);
          break;
        }
        case 3: {
          const m = PaymentLogItem.initialize();
          reader.readMessage(m, PaymentLogItem._readMessage);
          msg.honba.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const RoundState = {
  /**
   * Serializes RoundState to protobuf.
   */
  encode: function (msg: Partial<RoundState>): Uint8Array {
    return RoundState._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes RoundState from protobuf.
   */
  decode: function (bytes: ByteSource): RoundState {
    return RoundState._readMessage(
      RoundState.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes RoundState with all fields set to their default value.
   */
  initialize: function (): RoundState {
    return {
      sessionHash: "",
      dealer: 0,
      roundIndex: 0,
      riichi: 0,
      honba: 0,
      riichiIds: [],
      scores: [],
      scoresDelta: [],
      payments: PaymentLog.initialize(),
      round: Round.initialize(),
      outcome: RoundOutcome._fromInt(0),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<RoundState>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.sessionHash) {
      writer.writeString(1, msg.sessionHash);
    }
    if (msg.dealer) {
      writer.writeInt32(2, msg.dealer);
    }
    if (msg.roundIndex) {
      writer.writeInt32(3, msg.roundIndex);
    }
    if (msg.riichi) {
      writer.writeInt32(4, msg.riichi);
    }
    if (msg.honba) {
      writer.writeInt32(5, msg.honba);
    }
    if (msg.riichiIds?.length) {
      writer.writePackedInt32(6, msg.riichiIds);
    }
    if (msg.scores?.length) {
      writer.writeRepeatedMessage(
        7,
        msg.scores as any,
        IntermediateResultOfSession._writeMessage
      );
    }
    if (msg.scoresDelta?.length) {
      writer.writeRepeatedMessage(
        8,
        msg.scoresDelta as any,
        IntermediateResultOfSession._writeMessage
      );
    }
    if (msg.payments) {
      writer.writeMessage(9, msg.payments, PaymentLog._writeMessage);
    }
    if (msg.round) {
      writer.writeMessage(10, msg.round, Round._writeMessage);
    }
    if (msg.outcome && RoundOutcome._toInt(msg.outcome)) {
      writer.writeEnum(11, RoundOutcome._toInt(msg.outcome));
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: RoundState, reader: BinaryReader): RoundState {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.sessionHash = reader.readString();
          break;
        }
        case 2: {
          msg.dealer = reader.readInt32();
          break;
        }
        case 3: {
          msg.roundIndex = reader.readInt32();
          break;
        }
        case 4: {
          msg.riichi = reader.readInt32();
          break;
        }
        case 5: {
          msg.honba = reader.readInt32();
          break;
        }
        case 6: {
          if (reader.isDelimited()) {
            msg.riichiIds.push(...reader.readPackedInt32());
          } else {
            msg.riichiIds.push(reader.readInt32());
          }
          break;
        }
        case 7: {
          const m = IntermediateResultOfSession.initialize();
          reader.readMessage(m, IntermediateResultOfSession._readMessage);
          msg.scores.push(m);
          break;
        }
        case 8: {
          const m = IntermediateResultOfSession.initialize();
          reader.readMessage(m, IntermediateResultOfSession._readMessage);
          msg.scoresDelta.push(m);
          break;
        }
        case 9: {
          reader.readMessage(msg.payments, PaymentLog._readMessage);
          break;
        }
        case 10: {
          reader.readMessage(msg.round, Round._readMessage);
          break;
        }
        case 11: {
          msg.outcome = RoundOutcome._fromInt(reader.readEnum());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EventData = {
  /**
   * Serializes EventData to protobuf.
   */
  encode: function (msg: Partial<EventData>): Uint8Array {
    return EventData._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes EventData from protobuf.
   */
  decode: function (bytes: ByteSource): EventData {
    return EventData._readMessage(
      EventData.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes EventData with all fields set to their default value.
   */
  initialize: function (): EventData {
    return {
      type: undefined,
      title: "",
      description: "",
      duration: 0,
      ruleset: "",
      timezone: "",
      lobbyId: 0,
      seriesLength: 0,
      minGames: 0,
      isTeam: false,
      isPrescripted: false,
      autostart: 0,
      rulesetChanges: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EventData>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.type != undefined) {
      writer.writeEnum(1, EventType._toInt(msg.type));
    }
    if (msg.title) {
      writer.writeString(2, msg.title);
    }
    if (msg.description) {
      writer.writeString(3, msg.description);
    }
    if (msg.duration) {
      writer.writeInt32(4, msg.duration);
    }
    if (msg.ruleset) {
      writer.writeString(5, msg.ruleset);
    }
    if (msg.timezone) {
      writer.writeString(6, msg.timezone);
    }
    if (msg.lobbyId) {
      writer.writeInt32(7, msg.lobbyId);
    }
    if (msg.seriesLength) {
      writer.writeInt32(8, msg.seriesLength);
    }
    if (msg.minGames) {
      writer.writeInt32(9, msg.minGames);
    }
    if (msg.isTeam) {
      writer.writeBool(10, msg.isTeam);
    }
    if (msg.isPrescripted) {
      writer.writeBool(11, msg.isPrescripted);
    }
    if (msg.autostart) {
      writer.writeInt32(12, msg.autostart);
    }
    if (msg.rulesetChanges) {
      writer.writeString(13, msg.rulesetChanges);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: EventData, reader: BinaryReader): EventData {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.type = EventType._fromInt(reader.readEnum());
          break;
        }
        case 2: {
          msg.title = reader.readString();
          break;
        }
        case 3: {
          msg.description = reader.readString();
          break;
        }
        case 4: {
          msg.duration = reader.readInt32();
          break;
        }
        case 5: {
          msg.ruleset = reader.readString();
          break;
        }
        case 6: {
          msg.timezone = reader.readString();
          break;
        }
        case 7: {
          msg.lobbyId = reader.readInt32();
          break;
        }
        case 8: {
          msg.seriesLength = reader.readInt32();
          break;
        }
        case 9: {
          msg.minGames = reader.readInt32();
          break;
        }
        case 10: {
          msg.isTeam = reader.readBool();
          break;
        }
        case 11: {
          msg.isPrescripted = reader.readBool();
          break;
        }
        case 12: {
          msg.autostart = reader.readInt32();
          break;
        }
        case 13: {
          msg.rulesetChanges = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const TableState = {
  /**
   * Serializes TableState to protobuf.
   */
  encode: function (msg: Partial<TableState>): Uint8Array {
    return TableState._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes TableState from protobuf.
   */
  decode: function (bytes: ByteSource): TableState {
    return TableState._readMessage(
      TableState.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes TableState with all fields set to their default value.
   */
  initialize: function (): TableState {
    return {
      status: SessionStatus._fromInt(0),
      mayDefinalize: false,
      sessionHash: "",
      penaltyLog: [],
      tableIndex: undefined,
      lastRound: undefined,
      currentRoundIndex: 0,
      scores: [],
      players: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<TableState>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.status && SessionStatus._toInt(msg.status)) {
      writer.writeEnum(1, SessionStatus._toInt(msg.status));
    }
    if (msg.mayDefinalize) {
      writer.writeBool(2, msg.mayDefinalize);
    }
    if (msg.sessionHash) {
      writer.writeString(3, msg.sessionHash);
    }
    if (msg.penaltyLog?.length) {
      writer.writeRepeatedMessage(
        4,
        msg.penaltyLog as any,
        Penalty._writeMessage
      );
    }
    if (msg.tableIndex != undefined) {
      writer.writeInt32(5, msg.tableIndex);
    }
    if (msg.lastRound != undefined) {
      writer.writeMessage(6, msg.lastRound, Round._writeMessage);
    }
    if (msg.currentRoundIndex) {
      writer.writeInt32(7, msg.currentRoundIndex);
    }
    if (msg.scores?.length) {
      writer.writeRepeatedMessage(
        8,
        msg.scores as any,
        IntermediateResultOfSession._writeMessage
      );
    }
    if (msg.players?.length) {
      writer.writeRepeatedMessage(
        9,
        msg.players as any,
        RegisteredPlayer._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: TableState, reader: BinaryReader): TableState {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.status = SessionStatus._fromInt(reader.readEnum());
          break;
        }
        case 2: {
          msg.mayDefinalize = reader.readBool();
          break;
        }
        case 3: {
          msg.sessionHash = reader.readString();
          break;
        }
        case 4: {
          const m = Penalty.initialize();
          reader.readMessage(m, Penalty._readMessage);
          msg.penaltyLog.push(m);
          break;
        }
        case 5: {
          msg.tableIndex = reader.readInt32();
          break;
        }
        case 6: {
          msg.lastRound = Round.initialize();
          reader.readMessage(msg.lastRound, Round._readMessage);
          break;
        }
        case 7: {
          msg.currentRoundIndex = reader.readInt32();
          break;
        }
        case 8: {
          const m = IntermediateResultOfSession.initialize();
          reader.readMessage(m, IntermediateResultOfSession._readMessage);
          msg.scores.push(m);
          break;
        }
        case 9: {
          const m = RegisteredPlayer.initialize();
          reader.readMessage(m, RegisteredPlayer._readMessage);
          msg.players.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Achievement = {
  /**
   * Serializes Achievement to protobuf.
   */
  encode: function (msg: Partial<Achievement>): Uint8Array {
    return Achievement._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Achievement from protobuf.
   */
  decode: function (bytes: ByteSource): Achievement {
    return Achievement._readMessage(
      Achievement.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Achievement with all fields set to their default value.
   */
  initialize: function (): Achievement {
    return {
      achievementId: "",
      achieventData: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Achievement>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.achievementId) {
      writer.writeString(1, msg.achievementId);
    }
    if (msg.achieventData) {
      writer.writeString(2, msg.achieventData);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Achievement, reader: BinaryReader): Achievement {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.achievementId = reader.readString();
          break;
        }
        case 2: {
          msg.achieventData = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const LocalIdMapping = {
  /**
   * Serializes LocalIdMapping to protobuf.
   */
  encode: function (msg: Partial<LocalIdMapping>): Uint8Array {
    return LocalIdMapping._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes LocalIdMapping from protobuf.
   */
  decode: function (bytes: ByteSource): LocalIdMapping {
    return LocalIdMapping._readMessage(
      LocalIdMapping.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes LocalIdMapping with all fields set to their default value.
   */
  initialize: function (): LocalIdMapping {
    return {
      playerId: 0,
      localId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<LocalIdMapping>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.playerId) {
      writer.writeInt32(1, msg.playerId);
    }
    if (msg.localId) {
      writer.writeInt32(2, msg.localId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: LocalIdMapping,
    reader: BinaryReader
  ): LocalIdMapping {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.playerId = reader.readInt32();
          break;
        }
        case 2: {
          msg.localId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const TeamMapping = {
  /**
   * Serializes TeamMapping to protobuf.
   */
  encode: function (msg: Partial<TeamMapping>): Uint8Array {
    return TeamMapping._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes TeamMapping from protobuf.
   */
  decode: function (bytes: ByteSource): TeamMapping {
    return TeamMapping._readMessage(
      TeamMapping.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes TeamMapping with all fields set to their default value.
   */
  initialize: function (): TeamMapping {
    return {
      playerId: 0,
      teamName: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<TeamMapping>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.playerId) {
      writer.writeInt32(1, msg.playerId);
    }
    if (msg.teamName) {
      writer.writeString(2, msg.teamName);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: TeamMapping, reader: BinaryReader): TeamMapping {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.playerId = reader.readInt32();
          break;
        }
        case 2: {
          msg.teamName = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PlayerSeating = {
  /**
   * Serializes PlayerSeating to protobuf.
   */
  encode: function (msg: Partial<PlayerSeating>): Uint8Array {
    return PlayerSeating._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes PlayerSeating from protobuf.
   */
  decode: function (bytes: ByteSource): PlayerSeating {
    return PlayerSeating._readMessage(
      PlayerSeating.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes PlayerSeating with all fields set to their default value.
   */
  initialize: function (): PlayerSeating {
    return {
      order: 0,
      playerId: 0,
      sessionId: 0,
      tableIndex: 0,
      rating: 0,
      playerTitle: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PlayerSeating>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.order) {
      writer.writeInt32(1, msg.order);
    }
    if (msg.playerId) {
      writer.writeInt32(2, msg.playerId);
    }
    if (msg.sessionId) {
      writer.writeInt32(3, msg.sessionId);
    }
    if (msg.tableIndex) {
      writer.writeInt32(4, msg.tableIndex);
    }
    if (msg.rating) {
      writer.writeFloat(5, msg.rating);
    }
    if (msg.playerTitle) {
      writer.writeString(6, msg.playerTitle);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PlayerSeating,
    reader: BinaryReader
  ): PlayerSeating {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.order = reader.readInt32();
          break;
        }
        case 2: {
          msg.playerId = reader.readInt32();
          break;
        }
        case 3: {
          msg.sessionId = reader.readInt32();
          break;
        }
        case 4: {
          msg.tableIndex = reader.readInt32();
          break;
        }
        case 5: {
          msg.rating = reader.readFloat();
          break;
        }
        case 6: {
          msg.playerTitle = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PlayerSeatingSwiss = {
  /**
   * Serializes PlayerSeatingSwiss to protobuf.
   */
  encode: function (msg: Partial<PlayerSeatingSwiss>): Uint8Array {
    return PlayerSeatingSwiss._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes PlayerSeatingSwiss from protobuf.
   */
  decode: function (bytes: ByteSource): PlayerSeatingSwiss {
    return PlayerSeatingSwiss._readMessage(
      PlayerSeatingSwiss.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes PlayerSeatingSwiss with all fields set to their default value.
   */
  initialize: function (): PlayerSeatingSwiss {
    return {
      playerId: 0,
      rating: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PlayerSeatingSwiss>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.playerId) {
      writer.writeInt32(1, msg.playerId);
    }
    if (msg.rating) {
      writer.writeFloat(2, msg.rating);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PlayerSeatingSwiss,
    reader: BinaryReader
  ): PlayerSeatingSwiss {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.playerId = reader.readInt32();
          break;
        }
        case 2: {
          msg.rating = reader.readFloat();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const TableItemSwiss = {
  /**
   * Serializes TableItemSwiss to protobuf.
   */
  encode: function (msg: Partial<TableItemSwiss>): Uint8Array {
    return TableItemSwiss._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes TableItemSwiss from protobuf.
   */
  decode: function (bytes: ByteSource): TableItemSwiss {
    return TableItemSwiss._readMessage(
      TableItemSwiss.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes TableItemSwiss with all fields set to their default value.
   */
  initialize: function (): TableItemSwiss {
    return {
      players: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<TableItemSwiss>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.players?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.players as any,
        PlayerSeatingSwiss._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: TableItemSwiss,
    reader: BinaryReader
  ): TableItemSwiss {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = PlayerSeatingSwiss.initialize();
          reader.readMessage(m, PlayerSeatingSwiss._readMessage);
          msg.players.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PrescriptedTable = {
  /**
   * Serializes PrescriptedTable to protobuf.
   */
  encode: function (msg: Partial<PrescriptedTable>): Uint8Array {
    return PrescriptedTable._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes PrescriptedTable from protobuf.
   */
  decode: function (bytes: ByteSource): PrescriptedTable {
    return PrescriptedTable._readMessage(
      PrescriptedTable.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes PrescriptedTable with all fields set to their default value.
   */
  initialize: function (): PrescriptedTable {
    return {
      players: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PrescriptedTable>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.players?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.players as any,
        RegisteredPlayer._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PrescriptedTable,
    reader: BinaryReader
  ): PrescriptedTable {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = RegisteredPlayer.initialize();
          reader.readMessage(m, RegisteredPlayer._readMessage);
          msg.players.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SessionState = {
  /**
   * Serializes SessionState to protobuf.
   */
  encode: function (msg: Partial<SessionState>): Uint8Array {
    return SessionState._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes SessionState from protobuf.
   */
  decode: function (bytes: ByteSource): SessionState {
    return SessionState._readMessage(
      SessionState.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes SessionState with all fields set to their default value.
   */
  initialize: function (): SessionState {
    return {
      dealer: 0,
      roundIndex: 0,
      riichiCount: 0,
      honbaCount: 0,
      scores: [],
      finished: false,
      penalties: [],
      yellowZoneAlreadyPlayed: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<SessionState>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.dealer) {
      writer.writeInt32(1, msg.dealer);
    }
    if (msg.roundIndex) {
      writer.writeInt32(2, msg.roundIndex);
    }
    if (msg.riichiCount) {
      writer.writeInt32(3, msg.riichiCount);
    }
    if (msg.honbaCount) {
      writer.writeInt32(4, msg.honbaCount);
    }
    if (msg.scores?.length) {
      writer.writeRepeatedMessage(
        5,
        msg.scores as any,
        IntermediateResultOfSession._writeMessage
      );
    }
    if (msg.finished) {
      writer.writeBool(6, msg.finished);
    }
    if (msg.penalties?.length) {
      writer.writeRepeatedMessage(
        7,
        msg.penalties as any,
        Penalty._writeMessage
      );
    }
    if (msg.yellowZoneAlreadyPlayed) {
      writer.writeBool(8, msg.yellowZoneAlreadyPlayed);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SessionState,
    reader: BinaryReader
  ): SessionState {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.dealer = reader.readInt32();
          break;
        }
        case 2: {
          msg.roundIndex = reader.readInt32();
          break;
        }
        case 3: {
          msg.riichiCount = reader.readInt32();
          break;
        }
        case 4: {
          msg.honbaCount = reader.readInt32();
          break;
        }
        case 5: {
          const m = IntermediateResultOfSession.initialize();
          reader.readMessage(m, IntermediateResultOfSession._readMessage);
          msg.scores.push(m);
          break;
        }
        case 6: {
          msg.finished = reader.readBool();
          break;
        }
        case 7: {
          const m = Penalty.initialize();
          reader.readMessage(m, Penalty._readMessage);
          msg.penalties.push(m);
          break;
        }
        case 8: {
          msg.yellowZoneAlreadyPlayed = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Generic_Success_Response = {
  /**
   * Serializes Generic_Success_Response to protobuf.
   */
  encode: function (msg: Partial<Generic_Success_Response>): Uint8Array {
    return Generic_Success_Response._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Generic_Success_Response from protobuf.
   */
  decode: function (bytes: ByteSource): Generic_Success_Response {
    return Generic_Success_Response._readMessage(
      Generic_Success_Response.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Generic_Success_Response with all fields set to their default value.
   */
  initialize: function (): Generic_Success_Response {
    return {
      success: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Generic_Success_Response>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.success) {
      writer.writeBool(1, msg.success);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Generic_Success_Response,
    reader: BinaryReader
  ): Generic_Success_Response {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.success = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Generic_Event_Payload = {
  /**
   * Serializes Generic_Event_Payload to protobuf.
   */
  encode: function (msg: Partial<Generic_Event_Payload>): Uint8Array {
    return Generic_Event_Payload._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes Generic_Event_Payload from protobuf.
   */
  decode: function (bytes: ByteSource): Generic_Event_Payload {
    return Generic_Event_Payload._readMessage(
      Generic_Event_Payload.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Generic_Event_Payload with all fields set to their default value.
   */
  initialize: function (): Generic_Event_Payload {
    return {
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Generic_Event_Payload>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.eventId) {
      writer.writeInt32(1, msg.eventId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Generic_Event_Payload,
    reader: BinaryReader
  ): Generic_Event_Payload {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.eventId = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const EventTypeJSON = {
  ONLINE: "ONLINE",
  TOURNAMENT: "TOURNAMENT",
  LOCAL: "LOCAL",
  /**
   * @private
   */
  _fromInt: function (i: number): EventType {
    switch (i) {
      case 0: {
        return "ONLINE";
      }
      case 1: {
        return "TOURNAMENT";
      }
      case 2: {
        return "LOCAL";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as EventType;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: EventType): number {
    switch (i) {
      case "ONLINE": {
        return 0;
      }
      case "TOURNAMENT": {
        return 1;
      }
      case "LOCAL": {
        return 2;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const TournamentGamesStatusJSON = {
  NONE: "NONE",
  SEATING_READY: "SEATING_READY",
  STARTED: "STARTED",
  /**
   * @private
   */
  _fromInt: function (i: number): TournamentGamesStatus {
    switch (i) {
      case 0: {
        return "NONE";
      }
      case 1: {
        return "SEATING_READY";
      }
      case 2: {
        return "STARTED";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as TournamentGamesStatus;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: TournamentGamesStatus): number {
    switch (i) {
      case "NONE": {
        return 0;
      }
      case "SEATING_READY": {
        return 1;
      }
      case "STARTED": {
        return 2;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const RoundOutcomeJSON = {
  RON: "RON",
  TSUMO: "TSUMO",
  DRAW: "DRAW",
  ABORT: "ABORT",
  CHOMBO: "CHOMBO",
  NAGASHI: "NAGASHI",
  MULTIRON: "MULTIRON",
  /**
   * @private
   */
  _fromInt: function (i: number): RoundOutcome {
    switch (i) {
      case 0: {
        return "RON";
      }
      case 1: {
        return "TSUMO";
      }
      case 2: {
        return "DRAW";
      }
      case 3: {
        return "ABORT";
      }
      case 4: {
        return "CHOMBO";
      }
      case 5: {
        return "NAGASHI";
      }
      case 6: {
        return "MULTIRON";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as RoundOutcome;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: RoundOutcome): number {
    switch (i) {
      case "RON": {
        return 0;
      }
      case "TSUMO": {
        return 1;
      }
      case "DRAW": {
        return 2;
      }
      case "ABORT": {
        return 3;
      }
      case "CHOMBO": {
        return 4;
      }
      case "NAGASHI": {
        return 5;
      }
      case "MULTIRON": {
        return 6;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const SessionStatusJSON = {
  PLANNED: "PLANNED",
  INPROGRESS: "INPROGRESS",
  PREFINISHED: "PREFINISHED",
  FINISHED: "FINISHED",
  CANCELLED: "CANCELLED",
  /**
   * @private
   */
  _fromInt: function (i: number): SessionStatus {
    switch (i) {
      case 0: {
        return "PLANNED";
      }
      case 1: {
        return "INPROGRESS";
      }
      case 2: {
        return "PREFINISHED";
      }
      case 3: {
        return "FINISHED";
      }
      case 4: {
        return "CANCELLED";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as SessionStatus;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: SessionStatus): number {
    switch (i) {
      case "PLANNED": {
        return 0;
      }
      case "INPROGRESS": {
        return 1;
      }
      case "PREFINISHED": {
        return 2;
      }
      case "FINISHED": {
        return 3;
      }
      case "CANCELLED": {
        return 4;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const AccessRulesJSON = {
  /**
   * Serializes AccessRules to JSON.
   */
  encode: function (msg: Partial<AccessRules>): string {
    return JSON.stringify(AccessRulesJSON._writeMessage(msg));
  },

  /**
   * Deserializes AccessRules from JSON.
   */
  decode: function (json: string): AccessRules {
    return AccessRulesJSON._readMessage(
      AccessRulesJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes AccessRules with all fields set to their default value.
   */
  initialize: function (): AccessRules {
    return {
      rules: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<AccessRules>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.rules) {
      const _rules_ = Object.fromEntries(
        Object.entries(msg.rules)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(AccessRulesJSON.Rules._writeMessage)
          .map(({ key, value }) => [key, value])
      );
      if (Object.keys(_rules_).length > 0) {
        json["rules"] = _rules_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: AccessRules, json: any): AccessRules {
    const _rules_ = json["rules"];
    if (_rules_) {
      msg.rules = Object.fromEntries(
        Object.entries(_rules_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(AccessRulesJSON.Rules._readMessage)
          .map(({ key, value }) => [key, value])
      );
    }
    return msg;
  },

  Rules: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<AccessRules.Rules>
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        const _value_ = RuleValueJSON._writeMessage(msg.value);
        if (Object.keys(_value_).length > 0) {
          json["value"] = _value_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: AccessRules.Rules,
      json: any
    ): AccessRules.Rules {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        const m = RuleValue.initialize();
        RuleValueJSON._readMessage(m, _value_);
        msg.value = m;
      }
      return msg;
    },
  },
};

export const RuleValueJSON = {
  /**
   * Serializes RuleValue to JSON.
   */
  encode: function (msg: Partial<RuleValue>): string {
    return JSON.stringify(RuleValueJSON._writeMessage(msg));
  },

  /**
   * Deserializes RuleValue from JSON.
   */
  decode: function (json: string): RuleValue {
    return RuleValueJSON._readMessage(
      RuleValueJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes RuleValue with all fields set to their default value.
   */
  initialize: function (): RuleValue {
    return {
      numberValue: undefined,
      stringValue: undefined,
      boolValue: undefined,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<RuleValue>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.numberValue != undefined) {
      json["numberValue"] = msg.numberValue;
    }
    if (msg.stringValue != undefined) {
      json["stringValue"] = msg.stringValue;
    }
    if (msg.boolValue != undefined) {
      json["boolValue"] = msg.boolValue;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: RuleValue, json: any): RuleValue {
    const _numberValue_ = json["numberValue"] ?? json["number_value"];
    if (_numberValue_) {
      msg.numberValue = _numberValue_;
    }
    const _stringValue_ = json["stringValue"] ?? json["string_value"];
    if (_stringValue_) {
      msg.stringValue = _stringValue_;
    }
    const _boolValue_ = json["boolValue"] ?? json["bool_value"];
    if (_boolValue_) {
      msg.boolValue = _boolValue_;
    }
    return msg;
  },
};

export const EventAdminJSON = {
  /**
   * Serializes EventAdmin to JSON.
   */
  encode: function (msg: Partial<EventAdmin>): string {
    return JSON.stringify(EventAdminJSON._writeMessage(msg));
  },

  /**
   * Deserializes EventAdmin from JSON.
   */
  decode: function (json: string): EventAdmin {
    return EventAdminJSON._readMessage(
      EventAdminJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes EventAdmin with all fields set to their default value.
   */
  initialize: function (): EventAdmin {
    return {
      ruleId: 0,
      personId: 0,
      personName: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<EventAdmin>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ruleId) {
      json["ruleId"] = msg.ruleId;
    }
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    if (msg.personName) {
      json["personName"] = msg.personName;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: EventAdmin, json: any): EventAdmin {
    const _ruleId_ = json["ruleId"];
    if (_ruleId_) {
      msg.ruleId = _ruleId_;
    }
    const _personId_ = json["personId"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    const _personName_ = json["personName"];
    if (_personName_) {
      msg.personName = _personName_;
    }
    return msg;
  },
};

export const RuleListItemJSON = {
  /**
   * Serializes RuleListItem to JSON.
   */
  encode: function (msg: Partial<RuleListItem>): string {
    return JSON.stringify(RuleListItemJSON._writeMessage(msg));
  },

  /**
   * Deserializes RuleListItem from JSON.
   */
  decode: function (json: string): RuleListItem {
    return RuleListItemJSON._readMessage(
      RuleListItemJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes RuleListItem with all fields set to their default value.
   */
  initialize: function (): RuleListItem {
    return {
      default: "",
      type: "",
      title: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<RuleListItem>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.default) {
      json["default"] = msg.default;
    }
    if (msg.type) {
      json["type"] = msg.type;
    }
    if (msg.title) {
      json["title"] = msg.title;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: RuleListItem, json: any): RuleListItem {
    const _default_ = json["default"];
    if (_default_) {
      msg.default = _default_;
    }
    const _type_ = json["type"];
    if (_type_) {
      msg.type = _type_;
    }
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    return msg;
  },
};

export const EventRuleListItemJSON = {
  /**
   * Serializes EventRuleListItem to JSON.
   */
  encode: function (msg: Partial<EventRuleListItem>): string {
    return JSON.stringify(EventRuleListItemJSON._writeMessage(msg));
  },

  /**
   * Deserializes EventRuleListItem from JSON.
   */
  decode: function (json: string): EventRuleListItem {
    return EventRuleListItemJSON._readMessage(
      EventRuleListItemJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes EventRuleListItem with all fields set to their default value.
   */
  initialize: function (): EventRuleListItem {
    return {
      isGlobal: false,
      id: 0,
      value: RuleValueJSON.initialize(),
      name: "",
      ownerTitle: "",
      allowedValues: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<EventRuleListItem>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.isGlobal) {
      json["isGlobal"] = msg.isGlobal;
    }
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.value) {
      const _value_ = RuleValueJSON._writeMessage(msg.value);
      if (Object.keys(_value_).length > 0) {
        json["value"] = _value_;
      }
    }
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.ownerTitle) {
      json["ownerTitle"] = msg.ownerTitle;
    }
    if (msg.allowedValues?.length) {
      json["allowedValues"] = msg.allowedValues;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: EventRuleListItem,
    json: any
  ): EventRuleListItem {
    const _isGlobal_ = json["isGlobal"];
    if (_isGlobal_) {
      msg.isGlobal = _isGlobal_;
    }
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _value_ = json["value"];
    if (_value_) {
      const m = RuleValue.initialize();
      RuleValueJSON._readMessage(m, _value_);
      msg.value = m;
    }
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _ownerTitle_ = json["ownerTitle"];
    if (_ownerTitle_) {
      msg.ownerTitle = _ownerTitle_;
    }
    const _allowedValues_ = json["allowedValues"];
    if (_allowedValues_) {
      msg.allowedValues = _allowedValues_;
    }
    return msg;
  },
};

export const RuleListItemExJSON = {
  /**
   * Serializes RuleListItemEx to JSON.
   */
  encode: function (msg: Partial<RuleListItemEx>): string {
    return JSON.stringify(RuleListItemExJSON._writeMessage(msg));
  },

  /**
   * Deserializes RuleListItemEx from JSON.
   */
  decode: function (json: string): RuleListItemEx {
    return RuleListItemExJSON._readMessage(
      RuleListItemExJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes RuleListItemEx with all fields set to their default value.
   */
  initialize: function (): RuleListItemEx {
    return {
      id: 0,
      type: "",
      value: RuleValueJSON.initialize(),
      allowedValues: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<RuleListItemEx>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.type) {
      json["type"] = msg.type;
    }
    if (msg.value) {
      const _value_ = RuleValueJSON._writeMessage(msg.value);
      if (Object.keys(_value_).length > 0) {
        json["value"] = _value_;
      }
    }
    if (msg.allowedValues?.length) {
      json["allowedValues"] = msg.allowedValues;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: RuleListItemEx, json: any): RuleListItemEx {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _type_ = json["type"];
    if (_type_) {
      msg.type = _type_;
    }
    const _value_ = json["value"];
    if (_value_) {
      const m = RuleValue.initialize();
      RuleValueJSON._readMessage(m, _value_);
      msg.value = m;
    }
    const _allowedValues_ = json["allowedValues"];
    if (_allowedValues_) {
      msg.allowedValues = _allowedValues_;
    }
    return msg;
  },
};

export const RuleListItemExMapJSON = {
  /**
   * Serializes RuleListItemExMap to JSON.
   */
  encode: function (msg: Partial<RuleListItemExMap>): string {
    return JSON.stringify(RuleListItemExMapJSON._writeMessage(msg));
  },

  /**
   * Deserializes RuleListItemExMap from JSON.
   */
  decode: function (json: string): RuleListItemExMap {
    return RuleListItemExMapJSON._readMessage(
      RuleListItemExMapJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes RuleListItemExMap with all fields set to their default value.
   */
  initialize: function (): RuleListItemExMap {
    return {
      rules: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<RuleListItemExMap>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.rules) {
      const _rules_ = Object.fromEntries(
        Object.entries(msg.rules)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(RuleListItemExMapJSON.Rules._writeMessage)
          .map(({ key, value }) => [key, value])
      );
      if (Object.keys(_rules_).length > 0) {
        json["rules"] = _rules_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: RuleListItemExMap,
    json: any
  ): RuleListItemExMap {
    const _rules_ = json["rules"];
    if (_rules_) {
      msg.rules = Object.fromEntries(
        Object.entries(_rules_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(RuleListItemExMapJSON.Rules._readMessage)
          .map(({ key, value }) => [key, value])
      );
    }
    return msg;
  },

  Rules: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<RuleListItemExMap.Rules>
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        const _value_ = RuleListItemExJSON._writeMessage(msg.value);
        if (Object.keys(_value_).length > 0) {
          json["value"] = _value_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: RuleListItemExMap.Rules,
      json: any
    ): RuleListItemExMap.Rules {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        const m = RuleListItemEx.initialize();
        RuleListItemExJSON._readMessage(m, _value_);
        msg.value = m;
      }
      return msg;
    },
  },
};

export const PersonJSON = {
  /**
   * Serializes Person to JSON.
   */
  encode: function (msg: Partial<Person>): string {
    return JSON.stringify(PersonJSON._writeMessage(msg));
  },

  /**
   * Deserializes Person from JSON.
   */
  decode: function (json: string): Person {
    return PersonJSON._readMessage(PersonJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Person with all fields set to their default value.
   */
  initialize: function (): Person {
    return {
      id: 0,
      city: "",
      tenhouId: "",
      title: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Person>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.city) {
      json["city"] = msg.city;
    }
    if (msg.tenhouId) {
      json["tenhouId"] = msg.tenhouId;
    }
    if (msg.title) {
      json["title"] = msg.title;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Person, json: any): Person {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _city_ = json["city"];
    if (_city_) {
      msg.city = _city_;
    }
    const _tenhouId_ = json["tenhouId"];
    if (_tenhouId_) {
      msg.tenhouId = _tenhouId_;
    }
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    return msg;
  },
};

export const PersonExJSON = {
  /**
   * Serializes PersonEx to JSON.
   */
  encode: function (msg: Partial<PersonEx>): string {
    return JSON.stringify(PersonExJSON._writeMessage(msg));
  },

  /**
   * Deserializes PersonEx from JSON.
   */
  decode: function (json: string): PersonEx {
    return PersonExJSON._readMessage(
      PersonExJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes PersonEx with all fields set to their default value.
   */
  initialize: function (): PersonEx {
    return {
      id: 0,
      city: "",
      tenhouId: "",
      title: "",
      country: "",
      email: "",
      phone: "",
      groups: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<PersonEx>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.city) {
      json["city"] = msg.city;
    }
    if (msg.tenhouId) {
      json["tenhouId"] = msg.tenhouId;
    }
    if (msg.title) {
      json["title"] = msg.title;
    }
    if (msg.country) {
      json["country"] = msg.country;
    }
    if (msg.email) {
      json["email"] = msg.email;
    }
    if (msg.phone) {
      json["phone"] = msg.phone;
    }
    if (msg.groups?.length) {
      json["groups"] = msg.groups;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: PersonEx, json: any): PersonEx {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _city_ = json["city"];
    if (_city_) {
      msg.city = _city_;
    }
    const _tenhouId_ = json["tenhouId"];
    if (_tenhouId_) {
      msg.tenhouId = _tenhouId_;
    }
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    const _country_ = json["country"];
    if (_country_) {
      msg.country = _country_;
    }
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    const _phone_ = json["phone"];
    if (_phone_) {
      msg.phone = _phone_;
    }
    const _groups_ = json["groups"];
    if (_groups_) {
      msg.groups = _groups_;
    }
    return msg;
  },
};

export const GroupJSON = {
  /**
   * Serializes Group to JSON.
   */
  encode: function (msg: Partial<Group>): string {
    return JSON.stringify(GroupJSON._writeMessage(msg));
  },

  /**
   * Deserializes Group from JSON.
   */
  decode: function (json: string): Group {
    return GroupJSON._readMessage(GroupJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Group with all fields set to their default value.
   */
  initialize: function (): Group {
    return {
      id: 0,
      title: "",
      color: "",
      description: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Group>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.title) {
      json["title"] = msg.title;
    }
    if (msg.color) {
      json["color"] = msg.color;
    }
    if (msg.description) {
      json["description"] = msg.description;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Group, json: any): Group {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    const _color_ = json["color"];
    if (_color_) {
      msg.color = _color_;
    }
    const _description_ = json["description"];
    if (_description_) {
      msg.description = _description_;
    }
    return msg;
  },
};

export const RulesetGeneratedJSON = {
  /**
   * Serializes RulesetGenerated to JSON.
   */
  encode: function (msg: Partial<RulesetGenerated>): string {
    return JSON.stringify(RulesetGeneratedJSON._writeMessage(msg));
  },

  /**
   * Deserializes RulesetGenerated from JSON.
   */
  decode: function (json: string): RulesetGenerated {
    return RulesetGeneratedJSON._readMessage(
      RulesetGeneratedJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes RulesetGenerated with all fields set to their default value.
   */
  initialize: function (): RulesetGenerated {
    return {
      title: "",
      description: "",
      defaultRules: "",
      fieldTypes: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<RulesetGenerated>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.title) {
      json["title"] = msg.title;
    }
    if (msg.description) {
      json["description"] = msg.description;
    }
    if (msg.defaultRules) {
      json["defaultRules"] = msg.defaultRules;
    }
    if (msg.fieldTypes) {
      json["fieldTypes"] = msg.fieldTypes;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: RulesetGenerated, json: any): RulesetGenerated {
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    const _description_ = json["description"];
    if (_description_) {
      msg.description = _description_;
    }
    const _defaultRules_ = json["defaultRules"];
    if (_defaultRules_) {
      msg.defaultRules = _defaultRules_;
    }
    const _fieldTypes_ = json["fieldTypes"];
    if (_fieldTypes_) {
      msg.fieldTypes = _fieldTypes_;
    }
    return msg;
  },
};

export const CountryJSON = {
  /**
   * Serializes Country to JSON.
   */
  encode: function (msg: Partial<Country>): string {
    return JSON.stringify(CountryJSON._writeMessage(msg));
  },

  /**
   * Deserializes Country from JSON.
   */
  decode: function (json: string): Country {
    return CountryJSON._readMessage(CountryJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Country with all fields set to their default value.
   */
  initialize: function (): Country {
    return {
      code: "",
      name: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Country>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.code) {
      json["code"] = msg.code;
    }
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Country, json: any): Country {
    const _code_ = json["code"];
    if (_code_) {
      msg.code = _code_;
    }
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};

export const EventJSON = {
  /**
   * Serializes Event to JSON.
   */
  encode: function (msg: Partial<Event>): string {
    return JSON.stringify(EventJSON._writeMessage(msg));
  },

  /**
   * Deserializes Event from JSON.
   */
  decode: function (json: string): Event {
    return EventJSON._readMessage(EventJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Event with all fields set to their default value.
   */
  initialize: function (): Event {
    return {
      id: 0,
      title: "",
      description: "",
      finished: false,
      isListed: false,
      isRatingShown: false,
      tournamentStarted: false,
      type: EventType._fromInt(0),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Event>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.title) {
      json["title"] = msg.title;
    }
    if (msg.description) {
      json["description"] = msg.description;
    }
    if (msg.finished) {
      json["finished"] = msg.finished;
    }
    if (msg.isListed) {
      json["isListed"] = msg.isListed;
    }
    if (msg.isRatingShown) {
      json["isRatingShown"] = msg.isRatingShown;
    }
    if (msg.tournamentStarted) {
      json["tournamentStarted"] = msg.tournamentStarted;
    }
    if (msg.type && EventTypeJSON._toInt(msg.type)) {
      json["type"] = msg.type;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Event, json: any): Event {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    const _description_ = json["description"];
    if (_description_) {
      msg.description = _description_;
    }
    const _finished_ = json["finished"];
    if (_finished_) {
      msg.finished = _finished_;
    }
    const _isListed_ = json["isListed"];
    if (_isListed_) {
      msg.isListed = _isListed_;
    }
    const _isRatingShown_ = json["isRatingShown"];
    if (_isRatingShown_) {
      msg.isRatingShown = _isRatingShown_;
    }
    const _tournamentStarted_ = json["tournamentStarted"];
    if (_tournamentStarted_) {
      msg.tournamentStarted = _tournamentStarted_;
    }
    const _type_ = json["type"];
    if (_type_) {
      msg.type = _type_;
    }
    return msg;
  },
};

export const MyEventJSON = {
  /**
   * Serializes MyEvent to JSON.
   */
  encode: function (msg: Partial<MyEvent>): string {
    return JSON.stringify(MyEventJSON._writeMessage(msg));
  },

  /**
   * Deserializes MyEvent from JSON.
   */
  decode: function (json: string): MyEvent {
    return MyEventJSON._readMessage(MyEventJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes MyEvent with all fields set to their default value.
   */
  initialize: function (): MyEvent {
    return {
      id: 0,
      title: "",
      description: "",
      isOnline: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<MyEvent>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.title) {
      json["title"] = msg.title;
    }
    if (msg.description) {
      json["description"] = msg.description;
    }
    if (msg.isOnline) {
      json["isOnline"] = msg.isOnline;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: MyEvent, json: any): MyEvent {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    const _description_ = json["description"];
    if (_description_) {
      msg.description = _description_;
    }
    const _isOnline_ = json["isOnline"];
    if (_isOnline_) {
      msg.isOnline = _isOnline_;
    }
    return msg;
  },
};

export const GameConfigJSON = {
  /**
   * Serializes GameConfig to JSON.
   */
  encode: function (msg: Partial<GameConfig>): string {
    return JSON.stringify(GameConfigJSON._writeMessage(msg));
  },

  /**
   * Deserializes GameConfig from JSON.
   */
  decode: function (json: string): GameConfig {
    return GameConfigJSON._readMessage(
      GameConfigJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GameConfig with all fields set to their default value.
   */
  initialize: function (): GameConfig {
    return {
      allowedYaku: [],
      startPoints: 0,
      goalPoints: 0,
      playAdditionalRounds: false,
      withKazoe: false,
      withKiriageMangan: false,
      withAbortives: false,
      withNagashiMangan: false,
      withAtamahane: false,
      rulesetTitle: "",
      tonpuusen: false,
      startRating: 0,
      riichiGoesToWinner: false,
      doubleronRiichiAtamahane: false,
      doubleronHonbaAtamahane: false,
      extraChomboPayments: false,
      chomboPenalty: 0,
      withKuitan: false,
      withButtobi: false,
      withMultiYakumans: false,
      gameExpirationTime: 0,
      minPenalty: 0,
      maxPenalty: 0,
      penaltyStep: 0,
      yakuWithPao: [],
      eventTitle: "",
      eventDescription: "",
      eventStatHost: "",
      useTimer: false,
      usePenalty: false,
      timerPolicy: "",
      redZone: 0,
      yellowZone: 0,
      gameDuration: 0,
      timezone: "",
      isOnline: false,
      isTeam: false,
      autoSeating: false,
      syncStart: false,
      syncEnd: false,
      sortByGames: false,
      allowPlayerAppend: false,
      withLeadingDealerGameOver: false,
      subtractStartPoints: false,
      seriesLength: 0,
      minGamesCount: 0,
      gamesStatus: TournamentGamesStatus._fromInt(0),
      hideResults: false,
      hideAddReplayButton: false,
      isPrescripted: false,
      chipsValue: 0,
      isFinished: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<GameConfig>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.allowedYaku?.length) {
      json["allowedYaku"] = msg.allowedYaku;
    }
    if (msg.startPoints) {
      json["startPoints"] = msg.startPoints;
    }
    if (msg.goalPoints) {
      json["goalPoints"] = msg.goalPoints;
    }
    if (msg.playAdditionalRounds) {
      json["playAdditionalRounds"] = msg.playAdditionalRounds;
    }
    if (msg.withKazoe) {
      json["withKazoe"] = msg.withKazoe;
    }
    if (msg.withKiriageMangan) {
      json["withKiriageMangan"] = msg.withKiriageMangan;
    }
    if (msg.withAbortives) {
      json["withAbortives"] = msg.withAbortives;
    }
    if (msg.withNagashiMangan) {
      json["withNagashiMangan"] = msg.withNagashiMangan;
    }
    if (msg.withAtamahane) {
      json["withAtamahane"] = msg.withAtamahane;
    }
    if (msg.rulesetTitle) {
      json["rulesetTitle"] = msg.rulesetTitle;
    }
    if (msg.tonpuusen) {
      json["tonpuusen"] = msg.tonpuusen;
    }
    if (msg.startRating) {
      json["startRating"] = msg.startRating;
    }
    if (msg.riichiGoesToWinner) {
      json["riichiGoesToWinner"] = msg.riichiGoesToWinner;
    }
    if (msg.doubleronRiichiAtamahane) {
      json["doubleronRiichiAtamahane"] = msg.doubleronRiichiAtamahane;
    }
    if (msg.doubleronHonbaAtamahane) {
      json["doubleronHonbaAtamahane"] = msg.doubleronHonbaAtamahane;
    }
    if (msg.extraChomboPayments) {
      json["extraChomboPayments"] = msg.extraChomboPayments;
    }
    if (msg.chomboPenalty) {
      json["chomboPenalty"] = msg.chomboPenalty;
    }
    if (msg.withKuitan) {
      json["withKuitan"] = msg.withKuitan;
    }
    if (msg.withButtobi) {
      json["withButtobi"] = msg.withButtobi;
    }
    if (msg.withMultiYakumans) {
      json["withMultiYakumans"] = msg.withMultiYakumans;
    }
    if (msg.gameExpirationTime) {
      json["gameExpirationTime"] = msg.gameExpirationTime;
    }
    if (msg.minPenalty) {
      json["minPenalty"] = msg.minPenalty;
    }
    if (msg.maxPenalty) {
      json["maxPenalty"] = msg.maxPenalty;
    }
    if (msg.penaltyStep) {
      json["penaltyStep"] = msg.penaltyStep;
    }
    if (msg.yakuWithPao?.length) {
      json["yakuWithPao"] = msg.yakuWithPao;
    }
    if (msg.eventTitle) {
      json["eventTitle"] = msg.eventTitle;
    }
    if (msg.eventDescription) {
      json["eventDescription"] = msg.eventDescription;
    }
    if (msg.eventStatHost) {
      json["eventStatHost"] = msg.eventStatHost;
    }
    if (msg.useTimer) {
      json["useTimer"] = msg.useTimer;
    }
    if (msg.usePenalty) {
      json["usePenalty"] = msg.usePenalty;
    }
    if (msg.timerPolicy) {
      json["timerPolicy"] = msg.timerPolicy;
    }
    if (msg.redZone) {
      json["redZone"] = msg.redZone;
    }
    if (msg.yellowZone) {
      json["yellowZone"] = msg.yellowZone;
    }
    if (msg.gameDuration) {
      json["gameDuration"] = msg.gameDuration;
    }
    if (msg.timezone) {
      json["timezone"] = msg.timezone;
    }
    if (msg.isOnline) {
      json["isOnline"] = msg.isOnline;
    }
    if (msg.isTeam) {
      json["isTeam"] = msg.isTeam;
    }
    if (msg.autoSeating) {
      json["autoSeating"] = msg.autoSeating;
    }
    if (msg.syncStart) {
      json["syncStart"] = msg.syncStart;
    }
    if (msg.syncEnd) {
      json["syncEnd"] = msg.syncEnd;
    }
    if (msg.sortByGames) {
      json["sortByGames"] = msg.sortByGames;
    }
    if (msg.allowPlayerAppend) {
      json["allowPlayerAppend"] = msg.allowPlayerAppend;
    }
    if (msg.withLeadingDealerGameOver) {
      json["withLeadingDealerGameOver"] = msg.withLeadingDealerGameOver;
    }
    if (msg.subtractStartPoints) {
      json["subtractStartPoints"] = msg.subtractStartPoints;
    }
    if (msg.seriesLength) {
      json["seriesLength"] = msg.seriesLength;
    }
    if (msg.minGamesCount) {
      json["minGamesCount"] = msg.minGamesCount;
    }
    if (msg.gamesStatus && TournamentGamesStatusJSON._toInt(msg.gamesStatus)) {
      json["gamesStatus"] = msg.gamesStatus;
    }
    if (msg.hideResults) {
      json["hideResults"] = msg.hideResults;
    }
    if (msg.hideAddReplayButton) {
      json["hideAddReplayButton"] = msg.hideAddReplayButton;
    }
    if (msg.isPrescripted) {
      json["isPrescripted"] = msg.isPrescripted;
    }
    if (msg.chipsValue) {
      json["chipsValue"] = msg.chipsValue;
    }
    if (msg.isFinished) {
      json["isFinished"] = msg.isFinished;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: GameConfig, json: any): GameConfig {
    const _allowedYaku_ = json["allowedYaku"];
    if (_allowedYaku_) {
      msg.allowedYaku = _allowedYaku_;
    }
    const _startPoints_ = json["startPoints"];
    if (_startPoints_) {
      msg.startPoints = _startPoints_;
    }
    const _goalPoints_ = json["goalPoints"];
    if (_goalPoints_) {
      msg.goalPoints = _goalPoints_;
    }
    const _playAdditionalRounds_ = json["playAdditionalRounds"];
    if (_playAdditionalRounds_) {
      msg.playAdditionalRounds = _playAdditionalRounds_;
    }
    const _withKazoe_ = json["withKazoe"];
    if (_withKazoe_) {
      msg.withKazoe = _withKazoe_;
    }
    const _withKiriageMangan_ = json["withKiriageMangan"];
    if (_withKiriageMangan_) {
      msg.withKiriageMangan = _withKiriageMangan_;
    }
    const _withAbortives_ = json["withAbortives"];
    if (_withAbortives_) {
      msg.withAbortives = _withAbortives_;
    }
    const _withNagashiMangan_ = json["withNagashiMangan"];
    if (_withNagashiMangan_) {
      msg.withNagashiMangan = _withNagashiMangan_;
    }
    const _withAtamahane_ = json["withAtamahane"];
    if (_withAtamahane_) {
      msg.withAtamahane = _withAtamahane_;
    }
    const _rulesetTitle_ = json["rulesetTitle"];
    if (_rulesetTitle_) {
      msg.rulesetTitle = _rulesetTitle_;
    }
    const _tonpuusen_ = json["tonpuusen"];
    if (_tonpuusen_) {
      msg.tonpuusen = _tonpuusen_;
    }
    const _startRating_ = json["startRating"];
    if (_startRating_) {
      msg.startRating = _startRating_;
    }
    const _riichiGoesToWinner_ = json["riichiGoesToWinner"];
    if (_riichiGoesToWinner_) {
      msg.riichiGoesToWinner = _riichiGoesToWinner_;
    }
    const _doubleronRiichiAtamahane_ = json["doubleronRiichiAtamahane"];
    if (_doubleronRiichiAtamahane_) {
      msg.doubleronRiichiAtamahane = _doubleronRiichiAtamahane_;
    }
    const _doubleronHonbaAtamahane_ = json["doubleronHonbaAtamahane"];
    if (_doubleronHonbaAtamahane_) {
      msg.doubleronHonbaAtamahane = _doubleronHonbaAtamahane_;
    }
    const _extraChomboPayments_ = json["extraChomboPayments"];
    if (_extraChomboPayments_) {
      msg.extraChomboPayments = _extraChomboPayments_;
    }
    const _chomboPenalty_ = json["chomboPenalty"];
    if (_chomboPenalty_) {
      msg.chomboPenalty = _chomboPenalty_;
    }
    const _withKuitan_ = json["withKuitan"];
    if (_withKuitan_) {
      msg.withKuitan = _withKuitan_;
    }
    const _withButtobi_ = json["withButtobi"];
    if (_withButtobi_) {
      msg.withButtobi = _withButtobi_;
    }
    const _withMultiYakumans_ = json["withMultiYakumans"];
    if (_withMultiYakumans_) {
      msg.withMultiYakumans = _withMultiYakumans_;
    }
    const _gameExpirationTime_ = json["gameExpirationTime"];
    if (_gameExpirationTime_) {
      msg.gameExpirationTime = _gameExpirationTime_;
    }
    const _minPenalty_ = json["minPenalty"];
    if (_minPenalty_) {
      msg.minPenalty = _minPenalty_;
    }
    const _maxPenalty_ = json["maxPenalty"];
    if (_maxPenalty_) {
      msg.maxPenalty = _maxPenalty_;
    }
    const _penaltyStep_ = json["penaltyStep"];
    if (_penaltyStep_) {
      msg.penaltyStep = _penaltyStep_;
    }
    const _yakuWithPao_ = json["yakuWithPao"];
    if (_yakuWithPao_) {
      msg.yakuWithPao = _yakuWithPao_;
    }
    const _eventTitle_ = json["eventTitle"];
    if (_eventTitle_) {
      msg.eventTitle = _eventTitle_;
    }
    const _eventDescription_ = json["eventDescription"];
    if (_eventDescription_) {
      msg.eventDescription = _eventDescription_;
    }
    const _eventStatHost_ = json["eventStatHost"];
    if (_eventStatHost_) {
      msg.eventStatHost = _eventStatHost_;
    }
    const _useTimer_ = json["useTimer"];
    if (_useTimer_) {
      msg.useTimer = _useTimer_;
    }
    const _usePenalty_ = json["usePenalty"];
    if (_usePenalty_) {
      msg.usePenalty = _usePenalty_;
    }
    const _timerPolicy_ = json["timerPolicy"];
    if (_timerPolicy_) {
      msg.timerPolicy = _timerPolicy_;
    }
    const _redZone_ = json["redZone"];
    if (_redZone_) {
      msg.redZone = _redZone_;
    }
    const _yellowZone_ = json["yellowZone"];
    if (_yellowZone_) {
      msg.yellowZone = _yellowZone_;
    }
    const _gameDuration_ = json["gameDuration"];
    if (_gameDuration_) {
      msg.gameDuration = _gameDuration_;
    }
    const _timezone_ = json["timezone"];
    if (_timezone_) {
      msg.timezone = _timezone_;
    }
    const _isOnline_ = json["isOnline"];
    if (_isOnline_) {
      msg.isOnline = _isOnline_;
    }
    const _isTeam_ = json["isTeam"];
    if (_isTeam_) {
      msg.isTeam = _isTeam_;
    }
    const _autoSeating_ = json["autoSeating"];
    if (_autoSeating_) {
      msg.autoSeating = _autoSeating_;
    }
    const _syncStart_ = json["syncStart"];
    if (_syncStart_) {
      msg.syncStart = _syncStart_;
    }
    const _syncEnd_ = json["syncEnd"];
    if (_syncEnd_) {
      msg.syncEnd = _syncEnd_;
    }
    const _sortByGames_ = json["sortByGames"];
    if (_sortByGames_) {
      msg.sortByGames = _sortByGames_;
    }
    const _allowPlayerAppend_ = json["allowPlayerAppend"];
    if (_allowPlayerAppend_) {
      msg.allowPlayerAppend = _allowPlayerAppend_;
    }
    const _withLeadingDealerGameOver_ = json["withLeadingDealerGameOver"];
    if (_withLeadingDealerGameOver_) {
      msg.withLeadingDealerGameOver = _withLeadingDealerGameOver_;
    }
    const _subtractStartPoints_ = json["subtractStartPoints"];
    if (_subtractStartPoints_) {
      msg.subtractStartPoints = _subtractStartPoints_;
    }
    const _seriesLength_ = json["seriesLength"];
    if (_seriesLength_) {
      msg.seriesLength = _seriesLength_;
    }
    const _minGamesCount_ = json["minGamesCount"];
    if (_minGamesCount_) {
      msg.minGamesCount = _minGamesCount_;
    }
    const _gamesStatus_ = json["gamesStatus"];
    if (_gamesStatus_) {
      msg.gamesStatus = _gamesStatus_;
    }
    const _hideResults_ = json["hideResults"];
    if (_hideResults_) {
      msg.hideResults = _hideResults_;
    }
    const _hideAddReplayButton_ = json["hideAddReplayButton"];
    if (_hideAddReplayButton_) {
      msg.hideAddReplayButton = _hideAddReplayButton_;
    }
    const _isPrescripted_ = json["isPrescripted"];
    if (_isPrescripted_) {
      msg.isPrescripted = _isPrescripted_;
    }
    const _chipsValue_ = json["chipsValue"];
    if (_chipsValue_) {
      msg.chipsValue = _chipsValue_;
    }
    const _isFinished_ = json["isFinished"];
    if (_isFinished_) {
      msg.isFinished = _isFinished_;
    }
    return msg;
  },
};

export const PlayerInRatingJSON = {
  /**
   * Serializes PlayerInRating to JSON.
   */
  encode: function (msg: Partial<PlayerInRating>): string {
    return JSON.stringify(PlayerInRatingJSON._writeMessage(msg));
  },

  /**
   * Deserializes PlayerInRating from JSON.
   */
  decode: function (json: string): PlayerInRating {
    return PlayerInRatingJSON._readMessage(
      PlayerInRatingJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes PlayerInRating with all fields set to their default value.
   */
  initialize: function (): PlayerInRating {
    return {
      id: 0,
      title: "",
      tenhouId: "",
      rating: 0,
      chips: 0,
      winnerZone: false,
      avgPlace: 0,
      avgScore: 0,
      gamesPlayed: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PlayerInRating>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.title) {
      json["title"] = msg.title;
    }
    if (msg.tenhouId) {
      json["tenhouId"] = msg.tenhouId;
    }
    if (msg.rating) {
      json["rating"] = msg.rating;
    }
    if (msg.chips) {
      json["chips"] = msg.chips;
    }
    if (msg.winnerZone) {
      json["winnerZone"] = msg.winnerZone;
    }
    if (msg.avgPlace) {
      json["avgPlace"] = msg.avgPlace;
    }
    if (msg.avgScore) {
      json["avgScore"] = msg.avgScore;
    }
    if (msg.gamesPlayed) {
      json["gamesPlayed"] = msg.gamesPlayed;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: PlayerInRating, json: any): PlayerInRating {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    const _tenhouId_ = json["tenhouId"];
    if (_tenhouId_) {
      msg.tenhouId = _tenhouId_;
    }
    const _rating_ = json["rating"];
    if (_rating_) {
      msg.rating = _rating_;
    }
    const _chips_ = json["chips"];
    if (_chips_) {
      msg.chips = _chips_;
    }
    const _winnerZone_ = json["winnerZone"];
    if (_winnerZone_) {
      msg.winnerZone = _winnerZone_;
    }
    const _avgPlace_ = json["avgPlace"];
    if (_avgPlace_) {
      msg.avgPlace = _avgPlace_;
    }
    const _avgScore_ = json["avgScore"];
    if (_avgScore_) {
      msg.avgScore = _avgScore_;
    }
    const _gamesPlayed_ = json["gamesPlayed"];
    if (_gamesPlayed_) {
      msg.gamesPlayed = _gamesPlayed_;
    }
    return msg;
  },
};

export const PlayerJSON = {
  /**
   * Serializes Player to JSON.
   */
  encode: function (msg: Partial<Player>): string {
    return JSON.stringify(PlayerJSON._writeMessage(msg));
  },

  /**
   * Deserializes Player from JSON.
   */
  decode: function (json: string): Player {
    return PlayerJSON._readMessage(PlayerJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Player with all fields set to their default value.
   */
  initialize: function (): Player {
    return {
      id: 0,
      title: "",
      tenhouId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Player>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.title) {
      json["title"] = msg.title;
    }
    if (msg.tenhouId) {
      json["tenhouId"] = msg.tenhouId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Player, json: any): Player {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    const _tenhouId_ = json["tenhouId"];
    if (_tenhouId_) {
      msg.tenhouId = _tenhouId_;
    }
    return msg;
  },
};

export const FinalResultOfSessionJSON = {
  /**
   * Serializes FinalResultOfSession to JSON.
   */
  encode: function (msg: Partial<FinalResultOfSession>): string {
    return JSON.stringify(FinalResultOfSessionJSON._writeMessage(msg));
  },

  /**
   * Deserializes FinalResultOfSession from JSON.
   */
  decode: function (json: string): FinalResultOfSession {
    return FinalResultOfSessionJSON._readMessage(
      FinalResultOfSessionJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes FinalResultOfSession with all fields set to their default value.
   */
  initialize: function (): FinalResultOfSession {
    return {
      playerId: 0,
      score: 0,
      ratingDelta: 0,
      place: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<FinalResultOfSession>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.playerId) {
      json["playerId"] = msg.playerId;
    }
    if (msg.score) {
      json["score"] = msg.score;
    }
    if (msg.ratingDelta) {
      json["ratingDelta"] = msg.ratingDelta;
    }
    if (msg.place) {
      json["place"] = msg.place;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FinalResultOfSession,
    json: any
  ): FinalResultOfSession {
    const _playerId_ = json["playerId"];
    if (_playerId_) {
      msg.playerId = _playerId_;
    }
    const _score_ = json["score"];
    if (_score_) {
      msg.score = _score_;
    }
    const _ratingDelta_ = json["ratingDelta"];
    if (_ratingDelta_) {
      msg.ratingDelta = _ratingDelta_;
    }
    const _place_ = json["place"];
    if (_place_) {
      msg.place = _place_;
    }
    return msg;
  },
};

export const PenaltyJSON = {
  /**
   * Serializes Penalty to JSON.
   */
  encode: function (msg: Partial<Penalty>): string {
    return JSON.stringify(PenaltyJSON._writeMessage(msg));
  },

  /**
   * Deserializes Penalty from JSON.
   */
  decode: function (json: string): Penalty {
    return PenaltyJSON._readMessage(PenaltyJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Penalty with all fields set to their default value.
   */
  initialize: function (): Penalty {
    return {
      who: 0,
      amount: 0,
      reason: undefined,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Penalty>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.who) {
      json["who"] = msg.who;
    }
    if (msg.amount) {
      json["amount"] = msg.amount;
    }
    if (msg.reason != undefined) {
      json["reason"] = msg.reason;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Penalty, json: any): Penalty {
    const _who_ = json["who"];
    if (_who_) {
      msg.who = _who_;
    }
    const _amount_ = json["amount"];
    if (_amount_) {
      msg.amount = _amount_;
    }
    const _reason_ = json["reason"];
    if (_reason_) {
      msg.reason = _reason_;
    }
    return msg;
  },
};

export const RonResultJSON = {
  /**
   * Serializes RonResult to JSON.
   */
  encode: function (msg: Partial<RonResult>): string {
    return JSON.stringify(RonResultJSON._writeMessage(msg));
  },

  /**
   * Deserializes RonResult from JSON.
   */
  decode: function (json: string): RonResult {
    return RonResultJSON._readMessage(
      RonResultJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes RonResult with all fields set to their default value.
   */
  initialize: function (): RonResult {
    return {
      roundIndex: 0,
      honba: 0,
      winnerId: 0,
      loserId: 0,
      paoPlayerId: 0,
      han: 0,
      fu: 0,
      yaku: [],
      riichiBets: [],
      dora: 0,
      uradora: 0,
      kandora: 0,
      kanuradora: 0,
      openHand: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<RonResult>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.roundIndex) {
      json["roundIndex"] = msg.roundIndex;
    }
    if (msg.honba) {
      json["honba"] = msg.honba;
    }
    if (msg.winnerId) {
      json["winnerId"] = msg.winnerId;
    }
    if (msg.loserId) {
      json["loserId"] = msg.loserId;
    }
    if (msg.paoPlayerId) {
      json["paoPlayerId"] = msg.paoPlayerId;
    }
    if (msg.han) {
      json["han"] = msg.han;
    }
    if (msg.fu) {
      json["fu"] = msg.fu;
    }
    if (msg.yaku?.length) {
      json["yaku"] = msg.yaku;
    }
    if (msg.riichiBets?.length) {
      json["riichiBets"] = msg.riichiBets;
    }
    if (msg.dora) {
      json["dora"] = msg.dora;
    }
    if (msg.uradora) {
      json["uradora"] = msg.uradora;
    }
    if (msg.kandora) {
      json["kandora"] = msg.kandora;
    }
    if (msg.kanuradora) {
      json["kanuradora"] = msg.kanuradora;
    }
    if (msg.openHand) {
      json["openHand"] = msg.openHand;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: RonResult, json: any): RonResult {
    const _roundIndex_ = json["roundIndex"];
    if (_roundIndex_) {
      msg.roundIndex = _roundIndex_;
    }
    const _honba_ = json["honba"];
    if (_honba_) {
      msg.honba = _honba_;
    }
    const _winnerId_ = json["winnerId"];
    if (_winnerId_) {
      msg.winnerId = _winnerId_;
    }
    const _loserId_ = json["loserId"];
    if (_loserId_) {
      msg.loserId = _loserId_;
    }
    const _paoPlayerId_ = json["paoPlayerId"];
    if (_paoPlayerId_) {
      msg.paoPlayerId = _paoPlayerId_;
    }
    const _han_ = json["han"];
    if (_han_) {
      msg.han = _han_;
    }
    const _fu_ = json["fu"];
    if (_fu_) {
      msg.fu = _fu_;
    }
    const _yaku_ = json["yaku"];
    if (_yaku_) {
      msg.yaku = _yaku_;
    }
    const _riichiBets_ = json["riichiBets"];
    if (_riichiBets_) {
      msg.riichiBets = _riichiBets_;
    }
    const _dora_ = json["dora"];
    if (_dora_) {
      msg.dora = _dora_;
    }
    const _uradora_ = json["uradora"];
    if (_uradora_) {
      msg.uradora = _uradora_;
    }
    const _kandora_ = json["kandora"];
    if (_kandora_) {
      msg.kandora = _kandora_;
    }
    const _kanuradora_ = json["kanuradora"];
    if (_kanuradora_) {
      msg.kanuradora = _kanuradora_;
    }
    const _openHand_ = json["openHand"];
    if (_openHand_) {
      msg.openHand = _openHand_;
    }
    return msg;
  },
};

export const MultironWinJSON = {
  /**
   * Serializes MultironWin to JSON.
   */
  encode: function (msg: Partial<MultironWin>): string {
    return JSON.stringify(MultironWinJSON._writeMessage(msg));
  },

  /**
   * Deserializes MultironWin from JSON.
   */
  decode: function (json: string): MultironWin {
    return MultironWinJSON._readMessage(
      MultironWinJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes MultironWin with all fields set to their default value.
   */
  initialize: function (): MultironWin {
    return {
      winnerId: 0,
      paoPlayerId: 0,
      han: 0,
      fu: 0,
      yaku: [],
      dora: 0,
      uradora: 0,
      kandora: 0,
      kanuradora: 0,
      openHand: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<MultironWin>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.winnerId) {
      json["winnerId"] = msg.winnerId;
    }
    if (msg.paoPlayerId) {
      json["paoPlayerId"] = msg.paoPlayerId;
    }
    if (msg.han) {
      json["han"] = msg.han;
    }
    if (msg.fu) {
      json["fu"] = msg.fu;
    }
    if (msg.yaku?.length) {
      json["yaku"] = msg.yaku;
    }
    if (msg.dora) {
      json["dora"] = msg.dora;
    }
    if (msg.uradora) {
      json["uradora"] = msg.uradora;
    }
    if (msg.kandora) {
      json["kandora"] = msg.kandora;
    }
    if (msg.kanuradora) {
      json["kanuradora"] = msg.kanuradora;
    }
    if (msg.openHand) {
      json["openHand"] = msg.openHand;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: MultironWin, json: any): MultironWin {
    const _winnerId_ = json["winnerId"];
    if (_winnerId_) {
      msg.winnerId = _winnerId_;
    }
    const _paoPlayerId_ = json["paoPlayerId"];
    if (_paoPlayerId_) {
      msg.paoPlayerId = _paoPlayerId_;
    }
    const _han_ = json["han"];
    if (_han_) {
      msg.han = _han_;
    }
    const _fu_ = json["fu"];
    if (_fu_) {
      msg.fu = _fu_;
    }
    const _yaku_ = json["yaku"];
    if (_yaku_) {
      msg.yaku = _yaku_;
    }
    const _dora_ = json["dora"];
    if (_dora_) {
      msg.dora = _dora_;
    }
    const _uradora_ = json["uradora"];
    if (_uradora_) {
      msg.uradora = _uradora_;
    }
    const _kandora_ = json["kandora"];
    if (_kandora_) {
      msg.kandora = _kandora_;
    }
    const _kanuradora_ = json["kanuradora"];
    if (_kanuradora_) {
      msg.kanuradora = _kanuradora_;
    }
    const _openHand_ = json["openHand"];
    if (_openHand_) {
      msg.openHand = _openHand_;
    }
    return msg;
  },
};

export const MultironResultJSON = {
  /**
   * Serializes MultironResult to JSON.
   */
  encode: function (msg: Partial<MultironResult>): string {
    return JSON.stringify(MultironResultJSON._writeMessage(msg));
  },

  /**
   * Deserializes MultironResult from JSON.
   */
  decode: function (json: string): MultironResult {
    return MultironResultJSON._readMessage(
      MultironResultJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes MultironResult with all fields set to their default value.
   */
  initialize: function (): MultironResult {
    return {
      roundIndex: 0,
      honba: 0,
      loserId: 0,
      multiRon: 0,
      wins: [],
      riichiBets: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<MultironResult>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.roundIndex) {
      json["roundIndex"] = msg.roundIndex;
    }
    if (msg.honba) {
      json["honba"] = msg.honba;
    }
    if (msg.loserId) {
      json["loserId"] = msg.loserId;
    }
    if (msg.multiRon) {
      json["multiRon"] = msg.multiRon;
    }
    if (msg.wins?.length) {
      json["wins"] = msg.wins.map(MultironWinJSON._writeMessage);
    }
    if (msg.riichiBets?.length) {
      json["riichiBets"] = msg.riichiBets;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: MultironResult, json: any): MultironResult {
    const _roundIndex_ = json["roundIndex"];
    if (_roundIndex_) {
      msg.roundIndex = _roundIndex_;
    }
    const _honba_ = json["honba"];
    if (_honba_) {
      msg.honba = _honba_;
    }
    const _loserId_ = json["loserId"];
    if (_loserId_) {
      msg.loserId = _loserId_;
    }
    const _multiRon_ = json["multiRon"];
    if (_multiRon_) {
      msg.multiRon = _multiRon_;
    }
    const _wins_ = json["wins"];
    if (_wins_) {
      for (const item of _wins_) {
        const m = MultironWin.initialize();
        MultironWinJSON._readMessage(m, item);
        msg.wins.push(m);
      }
    }
    const _riichiBets_ = json["riichiBets"];
    if (_riichiBets_) {
      msg.riichiBets = _riichiBets_;
    }
    return msg;
  },
};

export const TsumoResultJSON = {
  /**
   * Serializes TsumoResult to JSON.
   */
  encode: function (msg: Partial<TsumoResult>): string {
    return JSON.stringify(TsumoResultJSON._writeMessage(msg));
  },

  /**
   * Deserializes TsumoResult from JSON.
   */
  decode: function (json: string): TsumoResult {
    return TsumoResultJSON._readMessage(
      TsumoResultJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes TsumoResult with all fields set to their default value.
   */
  initialize: function (): TsumoResult {
    return {
      roundIndex: 0,
      honba: 0,
      winnerId: 0,
      paoPlayerId: 0,
      han: 0,
      fu: 0,
      yaku: [],
      riichiBets: [],
      dora: 0,
      uradora: 0,
      kandora: 0,
      kanuradora: 0,
      openHand: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<TsumoResult>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.roundIndex) {
      json["roundIndex"] = msg.roundIndex;
    }
    if (msg.honba) {
      json["honba"] = msg.honba;
    }
    if (msg.winnerId) {
      json["winnerId"] = msg.winnerId;
    }
    if (msg.paoPlayerId) {
      json["paoPlayerId"] = msg.paoPlayerId;
    }
    if (msg.han) {
      json["han"] = msg.han;
    }
    if (msg.fu) {
      json["fu"] = msg.fu;
    }
    if (msg.yaku?.length) {
      json["yaku"] = msg.yaku;
    }
    if (msg.riichiBets?.length) {
      json["riichiBets"] = msg.riichiBets;
    }
    if (msg.dora) {
      json["dora"] = msg.dora;
    }
    if (msg.uradora) {
      json["uradora"] = msg.uradora;
    }
    if (msg.kandora) {
      json["kandora"] = msg.kandora;
    }
    if (msg.kanuradora) {
      json["kanuradora"] = msg.kanuradora;
    }
    if (msg.openHand) {
      json["openHand"] = msg.openHand;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: TsumoResult, json: any): TsumoResult {
    const _roundIndex_ = json["roundIndex"];
    if (_roundIndex_) {
      msg.roundIndex = _roundIndex_;
    }
    const _honba_ = json["honba"];
    if (_honba_) {
      msg.honba = _honba_;
    }
    const _winnerId_ = json["winnerId"];
    if (_winnerId_) {
      msg.winnerId = _winnerId_;
    }
    const _paoPlayerId_ = json["paoPlayerId"];
    if (_paoPlayerId_) {
      msg.paoPlayerId = _paoPlayerId_;
    }
    const _han_ = json["han"];
    if (_han_) {
      msg.han = _han_;
    }
    const _fu_ = json["fu"];
    if (_fu_) {
      msg.fu = _fu_;
    }
    const _yaku_ = json["yaku"];
    if (_yaku_) {
      msg.yaku = _yaku_;
    }
    const _riichiBets_ = json["riichiBets"];
    if (_riichiBets_) {
      msg.riichiBets = _riichiBets_;
    }
    const _dora_ = json["dora"];
    if (_dora_) {
      msg.dora = _dora_;
    }
    const _uradora_ = json["uradora"];
    if (_uradora_) {
      msg.uradora = _uradora_;
    }
    const _kandora_ = json["kandora"];
    if (_kandora_) {
      msg.kandora = _kandora_;
    }
    const _kanuradora_ = json["kanuradora"];
    if (_kanuradora_) {
      msg.kanuradora = _kanuradora_;
    }
    const _openHand_ = json["openHand"];
    if (_openHand_) {
      msg.openHand = _openHand_;
    }
    return msg;
  },
};

export const DrawResultJSON = {
  /**
   * Serializes DrawResult to JSON.
   */
  encode: function (msg: Partial<DrawResult>): string {
    return JSON.stringify(DrawResultJSON._writeMessage(msg));
  },

  /**
   * Deserializes DrawResult from JSON.
   */
  decode: function (json: string): DrawResult {
    return DrawResultJSON._readMessage(
      DrawResultJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes DrawResult with all fields set to their default value.
   */
  initialize: function (): DrawResult {
    return {
      roundIndex: 0,
      honba: 0,
      riichiBets: [],
      tempai: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<DrawResult>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.roundIndex) {
      json["roundIndex"] = msg.roundIndex;
    }
    if (msg.honba) {
      json["honba"] = msg.honba;
    }
    if (msg.riichiBets?.length) {
      json["riichiBets"] = msg.riichiBets;
    }
    if (msg.tempai?.length) {
      json["tempai"] = msg.tempai;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: DrawResult, json: any): DrawResult {
    const _roundIndex_ = json["roundIndex"];
    if (_roundIndex_) {
      msg.roundIndex = _roundIndex_;
    }
    const _honba_ = json["honba"];
    if (_honba_) {
      msg.honba = _honba_;
    }
    const _riichiBets_ = json["riichiBets"];
    if (_riichiBets_) {
      msg.riichiBets = _riichiBets_;
    }
    const _tempai_ = json["tempai"];
    if (_tempai_) {
      msg.tempai = _tempai_;
    }
    return msg;
  },
};

export const AbortResultJSON = {
  /**
   * Serializes AbortResult to JSON.
   */
  encode: function (msg: Partial<AbortResult>): string {
    return JSON.stringify(AbortResultJSON._writeMessage(msg));
  },

  /**
   * Deserializes AbortResult from JSON.
   */
  decode: function (json: string): AbortResult {
    return AbortResultJSON._readMessage(
      AbortResultJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes AbortResult with all fields set to their default value.
   */
  initialize: function (): AbortResult {
    return {
      roundIndex: 0,
      honba: 0,
      riichiBets: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<AbortResult>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.roundIndex) {
      json["roundIndex"] = msg.roundIndex;
    }
    if (msg.honba) {
      json["honba"] = msg.honba;
    }
    if (msg.riichiBets?.length) {
      json["riichiBets"] = msg.riichiBets;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: AbortResult, json: any): AbortResult {
    const _roundIndex_ = json["roundIndex"];
    if (_roundIndex_) {
      msg.roundIndex = _roundIndex_;
    }
    const _honba_ = json["honba"];
    if (_honba_) {
      msg.honba = _honba_;
    }
    const _riichiBets_ = json["riichiBets"];
    if (_riichiBets_) {
      msg.riichiBets = _riichiBets_;
    }
    return msg;
  },
};

export const ChomboResultJSON = {
  /**
   * Serializes ChomboResult to JSON.
   */
  encode: function (msg: Partial<ChomboResult>): string {
    return JSON.stringify(ChomboResultJSON._writeMessage(msg));
  },

  /**
   * Deserializes ChomboResult from JSON.
   */
  decode: function (json: string): ChomboResult {
    return ChomboResultJSON._readMessage(
      ChomboResultJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ChomboResult with all fields set to their default value.
   */
  initialize: function (): ChomboResult {
    return {
      roundIndex: 0,
      honba: 0,
      loserId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ChomboResult>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.roundIndex) {
      json["roundIndex"] = msg.roundIndex;
    }
    if (msg.honba) {
      json["honba"] = msg.honba;
    }
    if (msg.loserId) {
      json["loserId"] = msg.loserId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: ChomboResult, json: any): ChomboResult {
    const _roundIndex_ = json["roundIndex"];
    if (_roundIndex_) {
      msg.roundIndex = _roundIndex_;
    }
    const _honba_ = json["honba"];
    if (_honba_) {
      msg.honba = _honba_;
    }
    const _loserId_ = json["loserId"];
    if (_loserId_) {
      msg.loserId = _loserId_;
    }
    return msg;
  },
};

export const NagashiResultJSON = {
  /**
   * Serializes NagashiResult to JSON.
   */
  encode: function (msg: Partial<NagashiResult>): string {
    return JSON.stringify(NagashiResultJSON._writeMessage(msg));
  },

  /**
   * Deserializes NagashiResult from JSON.
   */
  decode: function (json: string): NagashiResult {
    return NagashiResultJSON._readMessage(
      NagashiResultJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes NagashiResult with all fields set to their default value.
   */
  initialize: function (): NagashiResult {
    return {
      roundIndex: 0,
      honba: 0,
      riichiBets: [],
      tempai: [],
      nagashi: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<NagashiResult>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.roundIndex) {
      json["roundIndex"] = msg.roundIndex;
    }
    if (msg.honba) {
      json["honba"] = msg.honba;
    }
    if (msg.riichiBets?.length) {
      json["riichiBets"] = msg.riichiBets;
    }
    if (msg.tempai?.length) {
      json["tempai"] = msg.tempai;
    }
    if (msg.nagashi?.length) {
      json["nagashi"] = msg.nagashi;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: NagashiResult, json: any): NagashiResult {
    const _roundIndex_ = json["roundIndex"];
    if (_roundIndex_) {
      msg.roundIndex = _roundIndex_;
    }
    const _honba_ = json["honba"];
    if (_honba_) {
      msg.honba = _honba_;
    }
    const _riichiBets_ = json["riichiBets"];
    if (_riichiBets_) {
      msg.riichiBets = _riichiBets_;
    }
    const _tempai_ = json["tempai"];
    if (_tempai_) {
      msg.tempai = _tempai_;
    }
    const _nagashi_ = json["nagashi"];
    if (_nagashi_) {
      msg.nagashi = _nagashi_;
    }
    return msg;
  },
};

export const RoundJSON = {
  /**
   * Serializes Round to JSON.
   */
  encode: function (msg: Partial<Round>): string {
    return JSON.stringify(RoundJSON._writeMessage(msg));
  },

  /**
   * Deserializes Round from JSON.
   */
  decode: function (json: string): Round {
    return RoundJSON._readMessage(RoundJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Round with all fields set to their default value.
   */
  initialize: function (): Round {
    return {
      ron: undefined,
      tsumo: undefined,
      multiron: undefined,
      draw: undefined,
      abort: undefined,
      chombo: undefined,
      nagashi: undefined,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Round>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ron != undefined) {
      const _ron_ = RonResultJSON._writeMessage(msg.ron);
      json["ron"] = _ron_;
    }
    if (msg.tsumo != undefined) {
      const _tsumo_ = TsumoResultJSON._writeMessage(msg.tsumo);
      json["tsumo"] = _tsumo_;
    }
    if (msg.multiron != undefined) {
      const _multiron_ = MultironResultJSON._writeMessage(msg.multiron);
      json["multiron"] = _multiron_;
    }
    if (msg.draw != undefined) {
      const _draw_ = DrawResultJSON._writeMessage(msg.draw);
      json["draw"] = _draw_;
    }
    if (msg.abort != undefined) {
      const _abort_ = AbortResultJSON._writeMessage(msg.abort);
      json["abort"] = _abort_;
    }
    if (msg.chombo != undefined) {
      const _chombo_ = ChomboResultJSON._writeMessage(msg.chombo);
      json["chombo"] = _chombo_;
    }
    if (msg.nagashi != undefined) {
      const _nagashi_ = NagashiResultJSON._writeMessage(msg.nagashi);
      json["nagashi"] = _nagashi_;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Round, json: any): Round {
    const _ron_ = json["ron"];
    if (_ron_) {
      const m = RonResult.initialize();
      RonResultJSON._readMessage(m, _ron_);
      msg.ron = m;
    }
    const _tsumo_ = json["tsumo"];
    if (_tsumo_) {
      const m = TsumoResult.initialize();
      TsumoResultJSON._readMessage(m, _tsumo_);
      msg.tsumo = m;
    }
    const _multiron_ = json["multiron"];
    if (_multiron_) {
      const m = MultironResult.initialize();
      MultironResultJSON._readMessage(m, _multiron_);
      msg.multiron = m;
    }
    const _draw_ = json["draw"];
    if (_draw_) {
      const m = DrawResult.initialize();
      DrawResultJSON._readMessage(m, _draw_);
      msg.draw = m;
    }
    const _abort_ = json["abort"];
    if (_abort_) {
      const m = AbortResult.initialize();
      AbortResultJSON._readMessage(m, _abort_);
      msg.abort = m;
    }
    const _chombo_ = json["chombo"];
    if (_chombo_) {
      const m = ChomboResult.initialize();
      ChomboResultJSON._readMessage(m, _chombo_);
      msg.chombo = m;
    }
    const _nagashi_ = json["nagashi"];
    if (_nagashi_) {
      const m = NagashiResult.initialize();
      NagashiResultJSON._readMessage(m, _nagashi_);
      msg.nagashi = m;
    }
    return msg;
  },
};

export const GameResultJSON = {
  /**
   * Serializes GameResult to JSON.
   */
  encode: function (msg: Partial<GameResult>): string {
    return JSON.stringify(GameResultJSON._writeMessage(msg));
  },

  /**
   * Deserializes GameResult from JSON.
   */
  decode: function (json: string): GameResult {
    return GameResultJSON._readMessage(
      GameResultJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GameResult with all fields set to their default value.
   */
  initialize: function (): GameResult {
    return {
      sessionHash: "",
      date: undefined,
      replayLink: "",
      players: [],
      finalResults: [],
      penaltyLog: [],
      rounds: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<GameResult>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.sessionHash) {
      json["sessionHash"] = msg.sessionHash;
    }
    if (msg.date != undefined) {
      json["date"] = msg.date;
    }
    if (msg.replayLink) {
      json["replayLink"] = msg.replayLink;
    }
    if (msg.players?.length) {
      json["players"] = msg.players;
    }
    if (msg.finalResults?.length) {
      json["finalResults"] = msg.finalResults.map(
        FinalResultOfSessionJSON._writeMessage
      );
    }
    if (msg.penaltyLog?.length) {
      json["penaltyLog"] = msg.penaltyLog.map(PenaltyJSON._writeMessage);
    }
    if (msg.rounds?.length) {
      json["rounds"] = msg.rounds.map(RoundJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: GameResult, json: any): GameResult {
    const _sessionHash_ = json["sessionHash"];
    if (_sessionHash_) {
      msg.sessionHash = _sessionHash_;
    }
    const _date_ = json["date"];
    if (_date_) {
      msg.date = _date_;
    }
    const _replayLink_ = json["replayLink"];
    if (_replayLink_) {
      msg.replayLink = _replayLink_;
    }
    const _players_ = json["players"];
    if (_players_) {
      msg.players = _players_;
    }
    const _finalResults_ = json["finalResults"];
    if (_finalResults_) {
      for (const item of _finalResults_) {
        const m = FinalResultOfSession.initialize();
        FinalResultOfSessionJSON._readMessage(m, item);
        msg.finalResults.push(m);
      }
    }
    const _penaltyLog_ = json["penaltyLog"];
    if (_penaltyLog_) {
      for (const item of _penaltyLog_) {
        const m = Penalty.initialize();
        PenaltyJSON._readMessage(m, item);
        msg.penaltyLog.push(m);
      }
    }
    const _rounds_ = json["rounds"];
    if (_rounds_) {
      for (const item of _rounds_) {
        const m = Round.initialize();
        RoundJSON._readMessage(m, item);
        msg.rounds.push(m);
      }
    }
    return msg;
  },
};

export const PlayerPlaceInSeriesJSON = {
  /**
   * Serializes PlayerPlaceInSeries to JSON.
   */
  encode: function (msg: Partial<PlayerPlaceInSeries>): string {
    return JSON.stringify(PlayerPlaceInSeriesJSON._writeMessage(msg));
  },

  /**
   * Deserializes PlayerPlaceInSeries from JSON.
   */
  decode: function (json: string): PlayerPlaceInSeries {
    return PlayerPlaceInSeriesJSON._readMessage(
      PlayerPlaceInSeriesJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes PlayerPlaceInSeries with all fields set to their default value.
   */
  initialize: function (): PlayerPlaceInSeries {
    return {
      sessionHash: "",
      place: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PlayerPlaceInSeries>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.sessionHash) {
      json["sessionHash"] = msg.sessionHash;
    }
    if (msg.place) {
      json["place"] = msg.place;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PlayerPlaceInSeries,
    json: any
  ): PlayerPlaceInSeries {
    const _sessionHash_ = json["sessionHash"];
    if (_sessionHash_) {
      msg.sessionHash = _sessionHash_;
    }
    const _place_ = json["place"];
    if (_place_) {
      msg.place = _place_;
    }
    return msg;
  },
};

export const SeriesResultJSON = {
  /**
   * Serializes SeriesResult to JSON.
   */
  encode: function (msg: Partial<SeriesResult>): string {
    return JSON.stringify(SeriesResultJSON._writeMessage(msg));
  },

  /**
   * Deserializes SeriesResult from JSON.
   */
  decode: function (json: string): SeriesResult {
    return SeriesResultJSON._readMessage(
      SeriesResultJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes SeriesResult with all fields set to their default value.
   */
  initialize: function (): SeriesResult {
    return {
      player: PlayerJSON.initialize(),
      bestSeries: [],
      bestSeriesScores: 0,
      bestSeriesPlaces: 0,
      bestSeriesAvgPlace: "",
      currentSeries: [],
      currentSeriesScores: 0,
      currentSeriesPlaces: 0,
      currentSeriesAvgPlace: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<SeriesResult>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.player) {
      const _player_ = PlayerJSON._writeMessage(msg.player);
      if (Object.keys(_player_).length > 0) {
        json["player"] = _player_;
      }
    }
    if (msg.bestSeries?.length) {
      json["bestSeries"] = msg.bestSeries.map(
        PlayerPlaceInSeriesJSON._writeMessage
      );
    }
    if (msg.bestSeriesScores) {
      json["bestSeriesScores"] = msg.bestSeriesScores;
    }
    if (msg.bestSeriesPlaces) {
      json["bestSeriesPlaces"] = msg.bestSeriesPlaces;
    }
    if (msg.bestSeriesAvgPlace) {
      json["bestSeriesAvgPlace"] = msg.bestSeriesAvgPlace;
    }
    if (msg.currentSeries?.length) {
      json["currentSeries"] = msg.currentSeries.map(
        PlayerPlaceInSeriesJSON._writeMessage
      );
    }
    if (msg.currentSeriesScores) {
      json["currentSeriesScores"] = msg.currentSeriesScores;
    }
    if (msg.currentSeriesPlaces) {
      json["currentSeriesPlaces"] = msg.currentSeriesPlaces;
    }
    if (msg.currentSeriesAvgPlace) {
      json["currentSeriesAvgPlace"] = msg.currentSeriesAvgPlace;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: SeriesResult, json: any): SeriesResult {
    const _player_ = json["player"];
    if (_player_) {
      const m = Player.initialize();
      PlayerJSON._readMessage(m, _player_);
      msg.player = m;
    }
    const _bestSeries_ = json["bestSeries"];
    if (_bestSeries_) {
      for (const item of _bestSeries_) {
        const m = PlayerPlaceInSeries.initialize();
        PlayerPlaceInSeriesJSON._readMessage(m, item);
        msg.bestSeries.push(m);
      }
    }
    const _bestSeriesScores_ = json["bestSeriesScores"];
    if (_bestSeriesScores_) {
      msg.bestSeriesScores = _bestSeriesScores_;
    }
    const _bestSeriesPlaces_ = json["bestSeriesPlaces"];
    if (_bestSeriesPlaces_) {
      msg.bestSeriesPlaces = _bestSeriesPlaces_;
    }
    const _bestSeriesAvgPlace_ = json["bestSeriesAvgPlace"];
    if (_bestSeriesAvgPlace_) {
      msg.bestSeriesAvgPlace = _bestSeriesAvgPlace_;
    }
    const _currentSeries_ = json["currentSeries"];
    if (_currentSeries_) {
      for (const item of _currentSeries_) {
        const m = PlayerPlaceInSeries.initialize();
        PlayerPlaceInSeriesJSON._readMessage(m, item);
        msg.currentSeries.push(m);
      }
    }
    const _currentSeriesScores_ = json["currentSeriesScores"];
    if (_currentSeriesScores_) {
      msg.currentSeriesScores = _currentSeriesScores_;
    }
    const _currentSeriesPlaces_ = json["currentSeriesPlaces"];
    if (_currentSeriesPlaces_) {
      msg.currentSeriesPlaces = _currentSeriesPlaces_;
    }
    const _currentSeriesAvgPlace_ = json["currentSeriesAvgPlace"];
    if (_currentSeriesAvgPlace_) {
      msg.currentSeriesAvgPlace = _currentSeriesAvgPlace_;
    }
    return msg;
  },
};

export const ReplacementPlayerJSON = {
  /**
   * Serializes ReplacementPlayer to JSON.
   */
  encode: function (msg: Partial<ReplacementPlayer>): string {
    return JSON.stringify(ReplacementPlayerJSON._writeMessage(msg));
  },

  /**
   * Deserializes ReplacementPlayer from JSON.
   */
  decode: function (json: string): ReplacementPlayer {
    return ReplacementPlayerJSON._readMessage(
      ReplacementPlayerJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ReplacementPlayer with all fields set to their default value.
   */
  initialize: function (): ReplacementPlayer {
    return {
      id: 0,
      title: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ReplacementPlayer>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.title) {
      json["title"] = msg.title;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ReplacementPlayer,
    json: any
  ): ReplacementPlayer {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    return msg;
  },
};

export const PlayerInSessionJSON = {
  /**
   * Serializes PlayerInSession to JSON.
   */
  encode: function (msg: Partial<PlayerInSession>): string {
    return JSON.stringify(PlayerInSessionJSON._writeMessage(msg));
  },

  /**
   * Deserializes PlayerInSession from JSON.
   */
  decode: function (json: string): PlayerInSession {
    return PlayerInSessionJSON._readMessage(
      PlayerInSessionJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes PlayerInSession with all fields set to their default value.
   */
  initialize: function (): PlayerInSession {
    return {
      id: 0,
      title: "",
      score: 0,
      replacedBy: undefined,
      ratingDelta: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PlayerInSession>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.title) {
      json["title"] = msg.title;
    }
    if (msg.score) {
      json["score"] = msg.score;
    }
    if (msg.replacedBy != undefined) {
      const _replacedBy_ = ReplacementPlayerJSON._writeMessage(msg.replacedBy);
      json["replacedBy"] = _replacedBy_;
    }
    if (msg.ratingDelta) {
      json["ratingDelta"] = msg.ratingDelta;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: PlayerInSession, json: any): PlayerInSession {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    const _score_ = json["score"];
    if (_score_) {
      msg.score = _score_;
    }
    const _replacedBy_ = json["replacedBy"];
    if (_replacedBy_) {
      const m = ReplacementPlayer.initialize();
      ReplacementPlayerJSON._readMessage(m, _replacedBy_);
      msg.replacedBy = m;
    }
    const _ratingDelta_ = json["ratingDelta"];
    if (_ratingDelta_) {
      msg.ratingDelta = _ratingDelta_;
    }
    return msg;
  },
};

export const CurrentSessionJSON = {
  /**
   * Serializes CurrentSession to JSON.
   */
  encode: function (msg: Partial<CurrentSession>): string {
    return JSON.stringify(CurrentSessionJSON._writeMessage(msg));
  },

  /**
   * Deserializes CurrentSession from JSON.
   */
  decode: function (json: string): CurrentSession {
    return CurrentSessionJSON._readMessage(
      CurrentSessionJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes CurrentSession with all fields set to their default value.
   */
  initialize: function (): CurrentSession {
    return {
      sessionHash: "",
      status: "",
      tableIndex: undefined,
      players: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<CurrentSession>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.sessionHash) {
      json["sessionHash"] = msg.sessionHash;
    }
    if (msg.status) {
      json["status"] = msg.status;
    }
    if (msg.tableIndex != undefined) {
      json["tableIndex"] = msg.tableIndex;
    }
    if (msg.players?.length) {
      json["players"] = msg.players.map(PlayerInSessionJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: CurrentSession, json: any): CurrentSession {
    const _sessionHash_ = json["sessionHash"];
    if (_sessionHash_) {
      msg.sessionHash = _sessionHash_;
    }
    const _status_ = json["status"];
    if (_status_) {
      msg.status = _status_;
    }
    const _tableIndex_ = json["tableIndex"];
    if (_tableIndex_) {
      msg.tableIndex = _tableIndex_;
    }
    const _players_ = json["players"];
    if (_players_) {
      for (const item of _players_) {
        const m = PlayerInSession.initialize();
        PlayerInSessionJSON._readMessage(m, item);
        msg.players.push(m);
      }
    }
    return msg;
  },
};

export const RegisteredPlayerJSON = {
  /**
   * Serializes RegisteredPlayer to JSON.
   */
  encode: function (msg: Partial<RegisteredPlayer>): string {
    return JSON.stringify(RegisteredPlayerJSON._writeMessage(msg));
  },

  /**
   * Deserializes RegisteredPlayer from JSON.
   */
  decode: function (json: string): RegisteredPlayer {
    return RegisteredPlayerJSON._readMessage(
      RegisteredPlayerJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes RegisteredPlayer with all fields set to their default value.
   */
  initialize: function (): RegisteredPlayer {
    return {
      id: 0,
      title: "",
      localId: undefined,
      teamName: undefined,
      tenhouId: "",
      ignoreSeating: false,
      replacedBy: undefined,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<RegisteredPlayer>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.title) {
      json["title"] = msg.title;
    }
    if (msg.localId != undefined) {
      json["localId"] = msg.localId;
    }
    if (msg.teamName != undefined) {
      json["teamName"] = msg.teamName;
    }
    if (msg.tenhouId) {
      json["tenhouId"] = msg.tenhouId;
    }
    if (msg.ignoreSeating) {
      json["ignoreSeating"] = msg.ignoreSeating;
    }
    if (msg.replacedBy != undefined) {
      const _replacedBy_ = ReplacementPlayerJSON._writeMessage(msg.replacedBy);
      json["replacedBy"] = _replacedBy_;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: RegisteredPlayer, json: any): RegisteredPlayer {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    const _localId_ = json["localId"];
    if (_localId_) {
      msg.localId = _localId_;
    }
    const _teamName_ = json["teamName"];
    if (_teamName_) {
      msg.teamName = _teamName_;
    }
    const _tenhouId_ = json["tenhouId"];
    if (_tenhouId_) {
      msg.tenhouId = _tenhouId_;
    }
    const _ignoreSeating_ = json["ignoreSeating"];
    if (_ignoreSeating_) {
      msg.ignoreSeating = _ignoreSeating_;
    }
    const _replacedBy_ = json["replacedBy"];
    if (_replacedBy_) {
      const m = ReplacementPlayer.initialize();
      ReplacementPlayerJSON._readMessage(m, _replacedBy_);
      msg.replacedBy = m;
    }
    return msg;
  },
};

export const SessionHistoryResultJSON = {
  /**
   * Serializes SessionHistoryResult to JSON.
   */
  encode: function (msg: Partial<SessionHistoryResult>): string {
    return JSON.stringify(SessionHistoryResultJSON._writeMessage(msg));
  },

  /**
   * Deserializes SessionHistoryResult from JSON.
   */
  decode: function (json: string): SessionHistoryResult {
    return SessionHistoryResultJSON._readMessage(
      SessionHistoryResultJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes SessionHistoryResult with all fields set to their default value.
   */
  initialize: function (): SessionHistoryResult {
    return {
      sessionHash: "",
      eventId: 0,
      playerId: 0,
      score: 0,
      ratingDelta: 0,
      place: 0,
      title: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<SessionHistoryResult>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.sessionHash) {
      json["sessionHash"] = msg.sessionHash;
    }
    if (msg.eventId) {
      json["eventId"] = msg.eventId;
    }
    if (msg.playerId) {
      json["playerId"] = msg.playerId;
    }
    if (msg.score) {
      json["score"] = msg.score;
    }
    if (msg.ratingDelta) {
      json["ratingDelta"] = msg.ratingDelta;
    }
    if (msg.place) {
      json["place"] = msg.place;
    }
    if (msg.title) {
      json["title"] = msg.title;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SessionHistoryResult,
    json: any
  ): SessionHistoryResult {
    const _sessionHash_ = json["sessionHash"];
    if (_sessionHash_) {
      msg.sessionHash = _sessionHash_;
    }
    const _eventId_ = json["eventId"];
    if (_eventId_) {
      msg.eventId = _eventId_;
    }
    const _playerId_ = json["playerId"];
    if (_playerId_) {
      msg.playerId = _playerId_;
    }
    const _score_ = json["score"];
    if (_score_) {
      msg.score = _score_;
    }
    const _ratingDelta_ = json["ratingDelta"];
    if (_ratingDelta_) {
      msg.ratingDelta = _ratingDelta_;
    }
    const _place_ = json["place"];
    if (_place_) {
      msg.place = _place_;
    }
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    return msg;
  },
};

export const SessionHistoryResultTableJSON = {
  /**
   * Serializes SessionHistoryResultTable to JSON.
   */
  encode: function (msg: Partial<SessionHistoryResultTable>): string {
    return JSON.stringify(SessionHistoryResultTableJSON._writeMessage(msg));
  },

  /**
   * Deserializes SessionHistoryResultTable from JSON.
   */
  decode: function (json: string): SessionHistoryResultTable {
    return SessionHistoryResultTableJSON._readMessage(
      SessionHistoryResultTableJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes SessionHistoryResultTable with all fields set to their default value.
   */
  initialize: function (): SessionHistoryResultTable {
    return {
      table: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<SessionHistoryResultTable>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.table?.length) {
      json["table"] = msg.table.map(SessionHistoryResultJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SessionHistoryResultTable,
    json: any
  ): SessionHistoryResultTable {
    const _table_ = json["table"];
    if (_table_) {
      for (const item of _table_) {
        const m = SessionHistoryResult.initialize();
        SessionHistoryResultJSON._readMessage(m, item);
        msg.table.push(m);
      }
    }
    return msg;
  },
};

export const PlacesSummaryItemJSON = {
  /**
   * Serializes PlacesSummaryItem to JSON.
   */
  encode: function (msg: Partial<PlacesSummaryItem>): string {
    return JSON.stringify(PlacesSummaryItemJSON._writeMessage(msg));
  },

  /**
   * Deserializes PlacesSummaryItem from JSON.
   */
  decode: function (json: string): PlacesSummaryItem {
    return PlacesSummaryItemJSON._readMessage(
      PlacesSummaryItemJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes PlacesSummaryItem with all fields set to their default value.
   */
  initialize: function (): PlacesSummaryItem {
    return {
      place: 0,
      count: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PlacesSummaryItem>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.place) {
      json["place"] = msg.place;
    }
    if (msg.count) {
      json["count"] = msg.count;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PlacesSummaryItem,
    json: any
  ): PlacesSummaryItem {
    const _place_ = json["place"];
    if (_place_) {
      msg.place = _place_;
    }
    const _count_ = json["count"];
    if (_count_) {
      msg.count = _count_;
    }
    return msg;
  },
};

export const PlayerWinSummaryJSON = {
  /**
   * Serializes PlayerWinSummary to JSON.
   */
  encode: function (msg: Partial<PlayerWinSummary>): string {
    return JSON.stringify(PlayerWinSummaryJSON._writeMessage(msg));
  },

  /**
   * Deserializes PlayerWinSummary from JSON.
   */
  decode: function (json: string): PlayerWinSummary {
    return PlayerWinSummaryJSON._readMessage(
      PlayerWinSummaryJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes PlayerWinSummary with all fields set to their default value.
   */
  initialize: function (): PlayerWinSummary {
    return {
      ron: 0,
      tsumo: 0,
      chombo: 0,
      feed: 0,
      tsumofeed: 0,
      winsWithOpen: 0,
      winsWithRiichi: 0,
      winsWithDama: 0,
      unforcedFeedToOpen: 0,
      unforcedFeedToRiichi: 0,
      unforcedFeedToDama: 0,
      draw: 0,
      drawTempai: 0,
      pointsWon: 0,
      pointsLostRon: 0,
      pointsLostTsumo: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PlayerWinSummary>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ron) {
      json["ron"] = msg.ron;
    }
    if (msg.tsumo) {
      json["tsumo"] = msg.tsumo;
    }
    if (msg.chombo) {
      json["chombo"] = msg.chombo;
    }
    if (msg.feed) {
      json["feed"] = msg.feed;
    }
    if (msg.tsumofeed) {
      json["tsumofeed"] = msg.tsumofeed;
    }
    if (msg.winsWithOpen) {
      json["winsWithOpen"] = msg.winsWithOpen;
    }
    if (msg.winsWithRiichi) {
      json["winsWithRiichi"] = msg.winsWithRiichi;
    }
    if (msg.winsWithDama) {
      json["winsWithDama"] = msg.winsWithDama;
    }
    if (msg.unforcedFeedToOpen) {
      json["unforcedFeedToOpen"] = msg.unforcedFeedToOpen;
    }
    if (msg.unforcedFeedToRiichi) {
      json["unforcedFeedToRiichi"] = msg.unforcedFeedToRiichi;
    }
    if (msg.unforcedFeedToDama) {
      json["unforcedFeedToDama"] = msg.unforcedFeedToDama;
    }
    if (msg.draw) {
      json["draw"] = msg.draw;
    }
    if (msg.drawTempai) {
      json["drawTempai"] = msg.drawTempai;
    }
    if (msg.pointsWon) {
      json["pointsWon"] = msg.pointsWon;
    }
    if (msg.pointsLostRon) {
      json["pointsLostRon"] = msg.pointsLostRon;
    }
    if (msg.pointsLostTsumo) {
      json["pointsLostTsumo"] = msg.pointsLostTsumo;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: PlayerWinSummary, json: any): PlayerWinSummary {
    const _ron_ = json["ron"];
    if (_ron_) {
      msg.ron = _ron_;
    }
    const _tsumo_ = json["tsumo"];
    if (_tsumo_) {
      msg.tsumo = _tsumo_;
    }
    const _chombo_ = json["chombo"];
    if (_chombo_) {
      msg.chombo = _chombo_;
    }
    const _feed_ = json["feed"];
    if (_feed_) {
      msg.feed = _feed_;
    }
    const _tsumofeed_ = json["tsumofeed"];
    if (_tsumofeed_) {
      msg.tsumofeed = _tsumofeed_;
    }
    const _winsWithOpen_ = json["winsWithOpen"];
    if (_winsWithOpen_) {
      msg.winsWithOpen = _winsWithOpen_;
    }
    const _winsWithRiichi_ = json["winsWithRiichi"];
    if (_winsWithRiichi_) {
      msg.winsWithRiichi = _winsWithRiichi_;
    }
    const _winsWithDama_ = json["winsWithDama"];
    if (_winsWithDama_) {
      msg.winsWithDama = _winsWithDama_;
    }
    const _unforcedFeedToOpen_ = json["unforcedFeedToOpen"];
    if (_unforcedFeedToOpen_) {
      msg.unforcedFeedToOpen = _unforcedFeedToOpen_;
    }
    const _unforcedFeedToRiichi_ = json["unforcedFeedToRiichi"];
    if (_unforcedFeedToRiichi_) {
      msg.unforcedFeedToRiichi = _unforcedFeedToRiichi_;
    }
    const _unforcedFeedToDama_ = json["unforcedFeedToDama"];
    if (_unforcedFeedToDama_) {
      msg.unforcedFeedToDama = _unforcedFeedToDama_;
    }
    const _draw_ = json["draw"];
    if (_draw_) {
      msg.draw = _draw_;
    }
    const _drawTempai_ = json["drawTempai"];
    if (_drawTempai_) {
      msg.drawTempai = _drawTempai_;
    }
    const _pointsWon_ = json["pointsWon"];
    if (_pointsWon_) {
      msg.pointsWon = _pointsWon_;
    }
    const _pointsLostRon_ = json["pointsLostRon"];
    if (_pointsLostRon_) {
      msg.pointsLostRon = _pointsLostRon_;
    }
    const _pointsLostTsumo_ = json["pointsLostTsumo"];
    if (_pointsLostTsumo_) {
      msg.pointsLostTsumo = _pointsLostTsumo_;
    }
    return msg;
  },
};

export const HandValueStatJSON = {
  /**
   * Serializes HandValueStat to JSON.
   */
  encode: function (msg: Partial<HandValueStat>): string {
    return JSON.stringify(HandValueStatJSON._writeMessage(msg));
  },

  /**
   * Deserializes HandValueStat from JSON.
   */
  decode: function (json: string): HandValueStat {
    return HandValueStatJSON._readMessage(
      HandValueStatJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes HandValueStat with all fields set to their default value.
   */
  initialize: function (): HandValueStat {
    return {
      hanCount: 0,
      count: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<HandValueStat>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.hanCount) {
      json["hanCount"] = msg.hanCount;
    }
    if (msg.count) {
      json["count"] = msg.count;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: HandValueStat, json: any): HandValueStat {
    const _hanCount_ = json["hanCount"];
    if (_hanCount_) {
      msg.hanCount = _hanCount_;
    }
    const _count_ = json["count"];
    if (_count_) {
      msg.count = _count_;
    }
    return msg;
  },
};

export const YakuStatJSON = {
  /**
   * Serializes YakuStat to JSON.
   */
  encode: function (msg: Partial<YakuStat>): string {
    return JSON.stringify(YakuStatJSON._writeMessage(msg));
  },

  /**
   * Deserializes YakuStat from JSON.
   */
  decode: function (json: string): YakuStat {
    return YakuStatJSON._readMessage(
      YakuStatJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes YakuStat with all fields set to their default value.
   */
  initialize: function (): YakuStat {
    return {
      yakuId: 0,
      count: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<YakuStat>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.yakuId) {
      json["yakuId"] = msg.yakuId;
    }
    if (msg.count) {
      json["count"] = msg.count;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: YakuStat, json: any): YakuStat {
    const _yakuId_ = json["yakuId"];
    if (_yakuId_) {
      msg.yakuId = _yakuId_;
    }
    const _count_ = json["count"];
    if (_count_) {
      msg.count = _count_;
    }
    return msg;
  },
};

export const RiichiSummaryJSON = {
  /**
   * Serializes RiichiSummary to JSON.
   */
  encode: function (msg: Partial<RiichiSummary>): string {
    return JSON.stringify(RiichiSummaryJSON._writeMessage(msg));
  },

  /**
   * Deserializes RiichiSummary from JSON.
   */
  decode: function (json: string): RiichiSummary {
    return RiichiSummaryJSON._readMessage(
      RiichiSummaryJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes RiichiSummary with all fields set to their default value.
   */
  initialize: function (): RiichiSummary {
    return {
      riichiWon: 0,
      riichiLost: 0,
      feedUnderRiichi: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<RiichiSummary>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.riichiWon) {
      json["riichiWon"] = msg.riichiWon;
    }
    if (msg.riichiLost) {
      json["riichiLost"] = msg.riichiLost;
    }
    if (msg.feedUnderRiichi) {
      json["feedUnderRiichi"] = msg.feedUnderRiichi;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: RiichiSummary, json: any): RiichiSummary {
    const _riichiWon_ = json["riichiWon"];
    if (_riichiWon_) {
      msg.riichiWon = _riichiWon_;
    }
    const _riichiLost_ = json["riichiLost"];
    if (_riichiLost_) {
      msg.riichiLost = _riichiLost_;
    }
    const _feedUnderRiichi_ = json["feedUnderRiichi"];
    if (_feedUnderRiichi_) {
      msg.feedUnderRiichi = _feedUnderRiichi_;
    }
    return msg;
  },
};

export const DoraSummaryJSON = {
  /**
   * Serializes DoraSummary to JSON.
   */
  encode: function (msg: Partial<DoraSummary>): string {
    return JSON.stringify(DoraSummaryJSON._writeMessage(msg));
  },

  /**
   * Deserializes DoraSummary from JSON.
   */
  decode: function (json: string): DoraSummary {
    return DoraSummaryJSON._readMessage(
      DoraSummaryJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes DoraSummary with all fields set to their default value.
   */
  initialize: function (): DoraSummary {
    return {
      count: 0,
      average: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<DoraSummary>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.count) {
      json["count"] = msg.count;
    }
    if (msg.average) {
      json["average"] = msg.average;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: DoraSummary, json: any): DoraSummary {
    const _count_ = json["count"];
    if (_count_) {
      msg.count = _count_;
    }
    const _average_ = json["average"];
    if (_average_) {
      msg.average = _average_;
    }
    return msg;
  },
};

export const IntermediateResultOfSessionJSON = {
  /**
   * Serializes IntermediateResultOfSession to JSON.
   */
  encode: function (msg: Partial<IntermediateResultOfSession>): string {
    return JSON.stringify(IntermediateResultOfSessionJSON._writeMessage(msg));
  },

  /**
   * Deserializes IntermediateResultOfSession from JSON.
   */
  decode: function (json: string): IntermediateResultOfSession {
    return IntermediateResultOfSessionJSON._readMessage(
      IntermediateResultOfSessionJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes IntermediateResultOfSession with all fields set to their default value.
   */
  initialize: function (): IntermediateResultOfSession {
    return {
      playerId: 0,
      score: 0,
      penaltyScore: undefined,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<IntermediateResultOfSession>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.playerId) {
      json["playerId"] = msg.playerId;
    }
    if (msg.score) {
      json["score"] = msg.score;
    }
    if (msg.penaltyScore != undefined) {
      json["penaltyScore"] = msg.penaltyScore;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: IntermediateResultOfSession,
    json: any
  ): IntermediateResultOfSession {
    const _playerId_ = json["playerId"];
    if (_playerId_) {
      msg.playerId = _playerId_;
    }
    const _score_ = json["score"];
    if (_score_) {
      msg.score = _score_;
    }
    const _penaltyScore_ = json["penaltyScore"];
    if (_penaltyScore_) {
      msg.penaltyScore = _penaltyScore_;
    }
    return msg;
  },
};

export const PaymentLogItemJSON = {
  /**
   * Serializes PaymentLogItem to JSON.
   */
  encode: function (msg: Partial<PaymentLogItem>): string {
    return JSON.stringify(PaymentLogItemJSON._writeMessage(msg));
  },

  /**
   * Deserializes PaymentLogItem from JSON.
   */
  decode: function (json: string): PaymentLogItem {
    return PaymentLogItemJSON._readMessage(
      PaymentLogItemJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes PaymentLogItem with all fields set to their default value.
   */
  initialize: function (): PaymentLogItem {
    return {
      from: undefined,
      to: undefined,
      amount: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PaymentLogItem>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.from != undefined) {
      json["from"] = msg.from;
    }
    if (msg.to != undefined) {
      json["to"] = msg.to;
    }
    if (msg.amount) {
      json["amount"] = msg.amount;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: PaymentLogItem, json: any): PaymentLogItem {
    const _from_ = json["from"];
    if (_from_) {
      msg.from = _from_;
    }
    const _to_ = json["to"];
    if (_to_) {
      msg.to = _to_;
    }
    const _amount_ = json["amount"];
    if (_amount_) {
      msg.amount = _amount_;
    }
    return msg;
  },
};

export const PaymentLogJSON = {
  /**
   * Serializes PaymentLog to JSON.
   */
  encode: function (msg: Partial<PaymentLog>): string {
    return JSON.stringify(PaymentLogJSON._writeMessage(msg));
  },

  /**
   * Deserializes PaymentLog from JSON.
   */
  decode: function (json: string): PaymentLog {
    return PaymentLogJSON._readMessage(
      PaymentLogJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes PaymentLog with all fields set to their default value.
   */
  initialize: function (): PaymentLog {
    return {
      direct: [],
      riichi: [],
      honba: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<PaymentLog>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.direct?.length) {
      json["direct"] = msg.direct.map(PaymentLogItemJSON._writeMessage);
    }
    if (msg.riichi?.length) {
      json["riichi"] = msg.riichi.map(PaymentLogItemJSON._writeMessage);
    }
    if (msg.honba?.length) {
      json["honba"] = msg.honba.map(PaymentLogItemJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: PaymentLog, json: any): PaymentLog {
    const _direct_ = json["direct"];
    if (_direct_) {
      for (const item of _direct_) {
        const m = PaymentLogItem.initialize();
        PaymentLogItemJSON._readMessage(m, item);
        msg.direct.push(m);
      }
    }
    const _riichi_ = json["riichi"];
    if (_riichi_) {
      for (const item of _riichi_) {
        const m = PaymentLogItem.initialize();
        PaymentLogItemJSON._readMessage(m, item);
        msg.riichi.push(m);
      }
    }
    const _honba_ = json["honba"];
    if (_honba_) {
      for (const item of _honba_) {
        const m = PaymentLogItem.initialize();
        PaymentLogItemJSON._readMessage(m, item);
        msg.honba.push(m);
      }
    }
    return msg;
  },
};

export const RoundStateJSON = {
  /**
   * Serializes RoundState to JSON.
   */
  encode: function (msg: Partial<RoundState>): string {
    return JSON.stringify(RoundStateJSON._writeMessage(msg));
  },

  /**
   * Deserializes RoundState from JSON.
   */
  decode: function (json: string): RoundState {
    return RoundStateJSON._readMessage(
      RoundStateJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes RoundState with all fields set to their default value.
   */
  initialize: function (): RoundState {
    return {
      sessionHash: "",
      dealer: 0,
      roundIndex: 0,
      riichi: 0,
      honba: 0,
      riichiIds: [],
      scores: [],
      scoresDelta: [],
      payments: PaymentLogJSON.initialize(),
      round: RoundJSON.initialize(),
      outcome: RoundOutcome._fromInt(0),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<RoundState>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.sessionHash) {
      json["sessionHash"] = msg.sessionHash;
    }
    if (msg.dealer) {
      json["dealer"] = msg.dealer;
    }
    if (msg.roundIndex) {
      json["roundIndex"] = msg.roundIndex;
    }
    if (msg.riichi) {
      json["riichi"] = msg.riichi;
    }
    if (msg.honba) {
      json["honba"] = msg.honba;
    }
    if (msg.riichiIds?.length) {
      json["riichiIds"] = msg.riichiIds;
    }
    if (msg.scores?.length) {
      json["scores"] = msg.scores.map(
        IntermediateResultOfSessionJSON._writeMessage
      );
    }
    if (msg.scoresDelta?.length) {
      json["scoresDelta"] = msg.scoresDelta.map(
        IntermediateResultOfSessionJSON._writeMessage
      );
    }
    if (msg.payments) {
      const _payments_ = PaymentLogJSON._writeMessage(msg.payments);
      if (Object.keys(_payments_).length > 0) {
        json["payments"] = _payments_;
      }
    }
    if (msg.round) {
      const _round_ = RoundJSON._writeMessage(msg.round);
      if (Object.keys(_round_).length > 0) {
        json["round"] = _round_;
      }
    }
    if (msg.outcome && RoundOutcomeJSON._toInt(msg.outcome)) {
      json["outcome"] = msg.outcome;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: RoundState, json: any): RoundState {
    const _sessionHash_ = json["sessionHash"];
    if (_sessionHash_) {
      msg.sessionHash = _sessionHash_;
    }
    const _dealer_ = json["dealer"];
    if (_dealer_) {
      msg.dealer = _dealer_;
    }
    const _roundIndex_ = json["roundIndex"];
    if (_roundIndex_) {
      msg.roundIndex = _roundIndex_;
    }
    const _riichi_ = json["riichi"];
    if (_riichi_) {
      msg.riichi = _riichi_;
    }
    const _honba_ = json["honba"];
    if (_honba_) {
      msg.honba = _honba_;
    }
    const _riichiIds_ = json["riichiIds"];
    if (_riichiIds_) {
      msg.riichiIds = _riichiIds_;
    }
    const _scores_ = json["scores"];
    if (_scores_) {
      for (const item of _scores_) {
        const m = IntermediateResultOfSession.initialize();
        IntermediateResultOfSessionJSON._readMessage(m, item);
        msg.scores.push(m);
      }
    }
    const _scoresDelta_ = json["scoresDelta"];
    if (_scoresDelta_) {
      for (const item of _scoresDelta_) {
        const m = IntermediateResultOfSession.initialize();
        IntermediateResultOfSessionJSON._readMessage(m, item);
        msg.scoresDelta.push(m);
      }
    }
    const _payments_ = json["payments"];
    if (_payments_) {
      const m = PaymentLog.initialize();
      PaymentLogJSON._readMessage(m, _payments_);
      msg.payments = m;
    }
    const _round_ = json["round"];
    if (_round_) {
      const m = Round.initialize();
      RoundJSON._readMessage(m, _round_);
      msg.round = m;
    }
    const _outcome_ = json["outcome"];
    if (_outcome_) {
      msg.outcome = _outcome_;
    }
    return msg;
  },
};

export const EventDataJSON = {
  /**
   * Serializes EventData to JSON.
   */
  encode: function (msg: Partial<EventData>): string {
    return JSON.stringify(EventDataJSON._writeMessage(msg));
  },

  /**
   * Deserializes EventData from JSON.
   */
  decode: function (json: string): EventData {
    return EventDataJSON._readMessage(
      EventDataJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes EventData with all fields set to their default value.
   */
  initialize: function (): EventData {
    return {
      type: undefined,
      title: "",
      description: "",
      duration: 0,
      ruleset: "",
      timezone: "",
      lobbyId: 0,
      seriesLength: 0,
      minGames: 0,
      isTeam: false,
      isPrescripted: false,
      autostart: 0,
      rulesetChanges: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<EventData>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.type != undefined) {
      json["type"] = msg.type;
    }
    if (msg.title) {
      json["title"] = msg.title;
    }
    if (msg.description) {
      json["description"] = msg.description;
    }
    if (msg.duration) {
      json["duration"] = msg.duration;
    }
    if (msg.ruleset) {
      json["ruleset"] = msg.ruleset;
    }
    if (msg.timezone) {
      json["timezone"] = msg.timezone;
    }
    if (msg.lobbyId) {
      json["lobbyId"] = msg.lobbyId;
    }
    if (msg.seriesLength) {
      json["seriesLength"] = msg.seriesLength;
    }
    if (msg.minGames) {
      json["minGames"] = msg.minGames;
    }
    if (msg.isTeam) {
      json["isTeam"] = msg.isTeam;
    }
    if (msg.isPrescripted) {
      json["isPrescripted"] = msg.isPrescripted;
    }
    if (msg.autostart) {
      json["autostart"] = msg.autostart;
    }
    if (msg.rulesetChanges) {
      json["rulesetChanges"] = msg.rulesetChanges;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: EventData, json: any): EventData {
    const _type_ = json["type"];
    if (_type_) {
      msg.type = _type_;
    }
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    const _description_ = json["description"];
    if (_description_) {
      msg.description = _description_;
    }
    const _duration_ = json["duration"];
    if (_duration_) {
      msg.duration = _duration_;
    }
    const _ruleset_ = json["ruleset"];
    if (_ruleset_) {
      msg.ruleset = _ruleset_;
    }
    const _timezone_ = json["timezone"];
    if (_timezone_) {
      msg.timezone = _timezone_;
    }
    const _lobbyId_ = json["lobbyId"];
    if (_lobbyId_) {
      msg.lobbyId = _lobbyId_;
    }
    const _seriesLength_ = json["seriesLength"];
    if (_seriesLength_) {
      msg.seriesLength = _seriesLength_;
    }
    const _minGames_ = json["minGames"];
    if (_minGames_) {
      msg.minGames = _minGames_;
    }
    const _isTeam_ = json["isTeam"];
    if (_isTeam_) {
      msg.isTeam = _isTeam_;
    }
    const _isPrescripted_ = json["isPrescripted"];
    if (_isPrescripted_) {
      msg.isPrescripted = _isPrescripted_;
    }
    const _autostart_ = json["autostart"];
    if (_autostart_) {
      msg.autostart = _autostart_;
    }
    const _rulesetChanges_ = json["rulesetChanges"];
    if (_rulesetChanges_) {
      msg.rulesetChanges = _rulesetChanges_;
    }
    return msg;
  },
};

export const TableStateJSON = {
  /**
   * Serializes TableState to JSON.
   */
  encode: function (msg: Partial<TableState>): string {
    return JSON.stringify(TableStateJSON._writeMessage(msg));
  },

  /**
   * Deserializes TableState from JSON.
   */
  decode: function (json: string): TableState {
    return TableStateJSON._readMessage(
      TableStateJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes TableState with all fields set to their default value.
   */
  initialize: function (): TableState {
    return {
      status: SessionStatus._fromInt(0),
      mayDefinalize: false,
      sessionHash: "",
      penaltyLog: [],
      tableIndex: undefined,
      lastRound: undefined,
      currentRoundIndex: 0,
      scores: [],
      players: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<TableState>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.status && SessionStatusJSON._toInt(msg.status)) {
      json["status"] = msg.status;
    }
    if (msg.mayDefinalize) {
      json["mayDefinalize"] = msg.mayDefinalize;
    }
    if (msg.sessionHash) {
      json["sessionHash"] = msg.sessionHash;
    }
    if (msg.penaltyLog?.length) {
      json["penaltyLog"] = msg.penaltyLog.map(PenaltyJSON._writeMessage);
    }
    if (msg.tableIndex != undefined) {
      json["tableIndex"] = msg.tableIndex;
    }
    if (msg.lastRound != undefined) {
      const _lastRound_ = RoundJSON._writeMessage(msg.lastRound);
      json["lastRound"] = _lastRound_;
    }
    if (msg.currentRoundIndex) {
      json["currentRoundIndex"] = msg.currentRoundIndex;
    }
    if (msg.scores?.length) {
      json["scores"] = msg.scores.map(
        IntermediateResultOfSessionJSON._writeMessage
      );
    }
    if (msg.players?.length) {
      json["players"] = msg.players.map(RegisteredPlayerJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: TableState, json: any): TableState {
    const _status_ = json["status"];
    if (_status_) {
      msg.status = _status_;
    }
    const _mayDefinalize_ = json["mayDefinalize"];
    if (_mayDefinalize_) {
      msg.mayDefinalize = _mayDefinalize_;
    }
    const _sessionHash_ = json["sessionHash"];
    if (_sessionHash_) {
      msg.sessionHash = _sessionHash_;
    }
    const _penaltyLog_ = json["penaltyLog"];
    if (_penaltyLog_) {
      for (const item of _penaltyLog_) {
        const m = Penalty.initialize();
        PenaltyJSON._readMessage(m, item);
        msg.penaltyLog.push(m);
      }
    }
    const _tableIndex_ = json["tableIndex"];
    if (_tableIndex_) {
      msg.tableIndex = _tableIndex_;
    }
    const _lastRound_ = json["lastRound"];
    if (_lastRound_) {
      const m = Round.initialize();
      RoundJSON._readMessage(m, _lastRound_);
      msg.lastRound = m;
    }
    const _currentRoundIndex_ = json["currentRoundIndex"];
    if (_currentRoundIndex_) {
      msg.currentRoundIndex = _currentRoundIndex_;
    }
    const _scores_ = json["scores"];
    if (_scores_) {
      for (const item of _scores_) {
        const m = IntermediateResultOfSession.initialize();
        IntermediateResultOfSessionJSON._readMessage(m, item);
        msg.scores.push(m);
      }
    }
    const _players_ = json["players"];
    if (_players_) {
      for (const item of _players_) {
        const m = RegisteredPlayer.initialize();
        RegisteredPlayerJSON._readMessage(m, item);
        msg.players.push(m);
      }
    }
    return msg;
  },
};

export const AchievementJSON = {
  /**
   * Serializes Achievement to JSON.
   */
  encode: function (msg: Partial<Achievement>): string {
    return JSON.stringify(AchievementJSON._writeMessage(msg));
  },

  /**
   * Deserializes Achievement from JSON.
   */
  decode: function (json: string): Achievement {
    return AchievementJSON._readMessage(
      AchievementJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Achievement with all fields set to their default value.
   */
  initialize: function (): Achievement {
    return {
      achievementId: "",
      achieventData: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Achievement>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.achievementId) {
      json["achievementId"] = msg.achievementId;
    }
    if (msg.achieventData) {
      json["achieventData"] = msg.achieventData;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Achievement, json: any): Achievement {
    const _achievementId_ = json["achievementId"];
    if (_achievementId_) {
      msg.achievementId = _achievementId_;
    }
    const _achieventData_ = json["achieventData"];
    if (_achieventData_) {
      msg.achieventData = _achieventData_;
    }
    return msg;
  },
};

export const LocalIdMappingJSON = {
  /**
   * Serializes LocalIdMapping to JSON.
   */
  encode: function (msg: Partial<LocalIdMapping>): string {
    return JSON.stringify(LocalIdMappingJSON._writeMessage(msg));
  },

  /**
   * Deserializes LocalIdMapping from JSON.
   */
  decode: function (json: string): LocalIdMapping {
    return LocalIdMappingJSON._readMessage(
      LocalIdMappingJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes LocalIdMapping with all fields set to their default value.
   */
  initialize: function (): LocalIdMapping {
    return {
      playerId: 0,
      localId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<LocalIdMapping>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.playerId) {
      json["playerId"] = msg.playerId;
    }
    if (msg.localId) {
      json["localId"] = msg.localId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: LocalIdMapping, json: any): LocalIdMapping {
    const _playerId_ = json["playerId"];
    if (_playerId_) {
      msg.playerId = _playerId_;
    }
    const _localId_ = json["localId"];
    if (_localId_) {
      msg.localId = _localId_;
    }
    return msg;
  },
};

export const TeamMappingJSON = {
  /**
   * Serializes TeamMapping to JSON.
   */
  encode: function (msg: Partial<TeamMapping>): string {
    return JSON.stringify(TeamMappingJSON._writeMessage(msg));
  },

  /**
   * Deserializes TeamMapping from JSON.
   */
  decode: function (json: string): TeamMapping {
    return TeamMappingJSON._readMessage(
      TeamMappingJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes TeamMapping with all fields set to their default value.
   */
  initialize: function (): TeamMapping {
    return {
      playerId: 0,
      teamName: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<TeamMapping>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.playerId) {
      json["playerId"] = msg.playerId;
    }
    if (msg.teamName) {
      json["teamName"] = msg.teamName;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: TeamMapping, json: any): TeamMapping {
    const _playerId_ = json["playerId"];
    if (_playerId_) {
      msg.playerId = _playerId_;
    }
    const _teamName_ = json["teamName"];
    if (_teamName_) {
      msg.teamName = _teamName_;
    }
    return msg;
  },
};

export const PlayerSeatingJSON = {
  /**
   * Serializes PlayerSeating to JSON.
   */
  encode: function (msg: Partial<PlayerSeating>): string {
    return JSON.stringify(PlayerSeatingJSON._writeMessage(msg));
  },

  /**
   * Deserializes PlayerSeating from JSON.
   */
  decode: function (json: string): PlayerSeating {
    return PlayerSeatingJSON._readMessage(
      PlayerSeatingJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes PlayerSeating with all fields set to their default value.
   */
  initialize: function (): PlayerSeating {
    return {
      order: 0,
      playerId: 0,
      sessionId: 0,
      tableIndex: 0,
      rating: 0,
      playerTitle: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PlayerSeating>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.order) {
      json["order"] = msg.order;
    }
    if (msg.playerId) {
      json["playerId"] = msg.playerId;
    }
    if (msg.sessionId) {
      json["sessionId"] = msg.sessionId;
    }
    if (msg.tableIndex) {
      json["tableIndex"] = msg.tableIndex;
    }
    if (msg.rating) {
      json["rating"] = msg.rating;
    }
    if (msg.playerTitle) {
      json["playerTitle"] = msg.playerTitle;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: PlayerSeating, json: any): PlayerSeating {
    const _order_ = json["order"];
    if (_order_) {
      msg.order = _order_;
    }
    const _playerId_ = json["playerId"];
    if (_playerId_) {
      msg.playerId = _playerId_;
    }
    const _sessionId_ = json["sessionId"];
    if (_sessionId_) {
      msg.sessionId = _sessionId_;
    }
    const _tableIndex_ = json["tableIndex"];
    if (_tableIndex_) {
      msg.tableIndex = _tableIndex_;
    }
    const _rating_ = json["rating"];
    if (_rating_) {
      msg.rating = _rating_;
    }
    const _playerTitle_ = json["playerTitle"];
    if (_playerTitle_) {
      msg.playerTitle = _playerTitle_;
    }
    return msg;
  },
};

export const PlayerSeatingSwissJSON = {
  /**
   * Serializes PlayerSeatingSwiss to JSON.
   */
  encode: function (msg: Partial<PlayerSeatingSwiss>): string {
    return JSON.stringify(PlayerSeatingSwissJSON._writeMessage(msg));
  },

  /**
   * Deserializes PlayerSeatingSwiss from JSON.
   */
  decode: function (json: string): PlayerSeatingSwiss {
    return PlayerSeatingSwissJSON._readMessage(
      PlayerSeatingSwissJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes PlayerSeatingSwiss with all fields set to their default value.
   */
  initialize: function (): PlayerSeatingSwiss {
    return {
      playerId: 0,
      rating: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PlayerSeatingSwiss>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.playerId) {
      json["playerId"] = msg.playerId;
    }
    if (msg.rating) {
      json["rating"] = msg.rating;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PlayerSeatingSwiss,
    json: any
  ): PlayerSeatingSwiss {
    const _playerId_ = json["playerId"];
    if (_playerId_) {
      msg.playerId = _playerId_;
    }
    const _rating_ = json["rating"];
    if (_rating_) {
      msg.rating = _rating_;
    }
    return msg;
  },
};

export const TableItemSwissJSON = {
  /**
   * Serializes TableItemSwiss to JSON.
   */
  encode: function (msg: Partial<TableItemSwiss>): string {
    return JSON.stringify(TableItemSwissJSON._writeMessage(msg));
  },

  /**
   * Deserializes TableItemSwiss from JSON.
   */
  decode: function (json: string): TableItemSwiss {
    return TableItemSwissJSON._readMessage(
      TableItemSwissJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes TableItemSwiss with all fields set to their default value.
   */
  initialize: function (): TableItemSwiss {
    return {
      players: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<TableItemSwiss>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.players?.length) {
      json["players"] = msg.players.map(PlayerSeatingSwissJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: TableItemSwiss, json: any): TableItemSwiss {
    const _players_ = json["players"];
    if (_players_) {
      for (const item of _players_) {
        const m = PlayerSeatingSwiss.initialize();
        PlayerSeatingSwissJSON._readMessage(m, item);
        msg.players.push(m);
      }
    }
    return msg;
  },
};

export const PrescriptedTableJSON = {
  /**
   * Serializes PrescriptedTable to JSON.
   */
  encode: function (msg: Partial<PrescriptedTable>): string {
    return JSON.stringify(PrescriptedTableJSON._writeMessage(msg));
  },

  /**
   * Deserializes PrescriptedTable from JSON.
   */
  decode: function (json: string): PrescriptedTable {
    return PrescriptedTableJSON._readMessage(
      PrescriptedTableJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes PrescriptedTable with all fields set to their default value.
   */
  initialize: function (): PrescriptedTable {
    return {
      players: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PrescriptedTable>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.players?.length) {
      json["players"] = msg.players.map(RegisteredPlayerJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: PrescriptedTable, json: any): PrescriptedTable {
    const _players_ = json["players"];
    if (_players_) {
      for (const item of _players_) {
        const m = RegisteredPlayer.initialize();
        RegisteredPlayerJSON._readMessage(m, item);
        msg.players.push(m);
      }
    }
    return msg;
  },
};

export const SessionStateJSON = {
  /**
   * Serializes SessionState to JSON.
   */
  encode: function (msg: Partial<SessionState>): string {
    return JSON.stringify(SessionStateJSON._writeMessage(msg));
  },

  /**
   * Deserializes SessionState from JSON.
   */
  decode: function (json: string): SessionState {
    return SessionStateJSON._readMessage(
      SessionStateJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes SessionState with all fields set to their default value.
   */
  initialize: function (): SessionState {
    return {
      dealer: 0,
      roundIndex: 0,
      riichiCount: 0,
      honbaCount: 0,
      scores: [],
      finished: false,
      penalties: [],
      yellowZoneAlreadyPlayed: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<SessionState>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.dealer) {
      json["dealer"] = msg.dealer;
    }
    if (msg.roundIndex) {
      json["roundIndex"] = msg.roundIndex;
    }
    if (msg.riichiCount) {
      json["riichiCount"] = msg.riichiCount;
    }
    if (msg.honbaCount) {
      json["honbaCount"] = msg.honbaCount;
    }
    if (msg.scores?.length) {
      json["scores"] = msg.scores.map(
        IntermediateResultOfSessionJSON._writeMessage
      );
    }
    if (msg.finished) {
      json["finished"] = msg.finished;
    }
    if (msg.penalties?.length) {
      json["penalties"] = msg.penalties.map(PenaltyJSON._writeMessage);
    }
    if (msg.yellowZoneAlreadyPlayed) {
      json["yellowZoneAlreadyPlayed"] = msg.yellowZoneAlreadyPlayed;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: SessionState, json: any): SessionState {
    const _dealer_ = json["dealer"];
    if (_dealer_) {
      msg.dealer = _dealer_;
    }
    const _roundIndex_ = json["roundIndex"];
    if (_roundIndex_) {
      msg.roundIndex = _roundIndex_;
    }
    const _riichiCount_ = json["riichiCount"];
    if (_riichiCount_) {
      msg.riichiCount = _riichiCount_;
    }
    const _honbaCount_ = json["honbaCount"];
    if (_honbaCount_) {
      msg.honbaCount = _honbaCount_;
    }
    const _scores_ = json["scores"];
    if (_scores_) {
      for (const item of _scores_) {
        const m = IntermediateResultOfSession.initialize();
        IntermediateResultOfSessionJSON._readMessage(m, item);
        msg.scores.push(m);
      }
    }
    const _finished_ = json["finished"];
    if (_finished_) {
      msg.finished = _finished_;
    }
    const _penalties_ = json["penalties"];
    if (_penalties_) {
      for (const item of _penalties_) {
        const m = Penalty.initialize();
        PenaltyJSON._readMessage(m, item);
        msg.penalties.push(m);
      }
    }
    const _yellowZoneAlreadyPlayed_ = json["yellowZoneAlreadyPlayed"];
    if (_yellowZoneAlreadyPlayed_) {
      msg.yellowZoneAlreadyPlayed = _yellowZoneAlreadyPlayed_;
    }
    return msg;
  },
};

export const Generic_Success_ResponseJSON = {
  /**
   * Serializes Generic_Success_Response to JSON.
   */
  encode: function (msg: Partial<Generic_Success_Response>): string {
    return JSON.stringify(Generic_Success_ResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes Generic_Success_Response from JSON.
   */
  decode: function (json: string): Generic_Success_Response {
    return Generic_Success_ResponseJSON._readMessage(
      Generic_Success_ResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Generic_Success_Response with all fields set to their default value.
   */
  initialize: function (): Generic_Success_Response {
    return {
      success: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Generic_Success_Response>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.success) {
      json["success"] = msg.success;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Generic_Success_Response,
    json: any
  ): Generic_Success_Response {
    const _success_ = json["success"];
    if (_success_) {
      msg.success = _success_;
    }
    return msg;
  },
};

export const Generic_Event_PayloadJSON = {
  /**
   * Serializes Generic_Event_Payload to JSON.
   */
  encode: function (msg: Partial<Generic_Event_Payload>): string {
    return JSON.stringify(Generic_Event_PayloadJSON._writeMessage(msg));
  },

  /**
   * Deserializes Generic_Event_Payload from JSON.
   */
  decode: function (json: string): Generic_Event_Payload {
    return Generic_Event_PayloadJSON._readMessage(
      Generic_Event_PayloadJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Generic_Event_Payload with all fields set to their default value.
   */
  initialize: function (): Generic_Event_Payload {
    return {
      eventId: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Generic_Event_Payload>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.eventId) {
      json["eventId"] = msg.eventId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Generic_Event_Payload,
    json: any
  ): Generic_Event_Payload {
    const _eventId_ = json["eventId"];
    if (_eventId_) {
      msg.eventId = _eventId_;
    }
    return msg;
  },
};
